
Reservoir_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000744c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  080075ec  080075ec  000085ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a8c  08007a8c  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007a8c  08007a8c  00008a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a94  08007a94  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a94  08007a94  00008a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a98  08007a98  00008a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007a9c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000064  08007b00  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08007b00  00009434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec30  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204a  00000000  00000000  00017cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00019d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b01  00000000  00000000  0001ab10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178ea  00000000  00000000  0001b611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103e6  00000000  00000000  00032efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099a3f  00000000  00000000  000432e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcd20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000407c  00000000  00000000  000dcd64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000e0de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080075d4 	.word	0x080075d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080075d4 	.word	0x080075d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ADC_Select_CH>:
static void ADC_Select_CH(int CH);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_CH(int CH) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]

switch(CH)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	f200 814b 	bhi.w	8000834 <ADC_Select_CH+0x2b4>
 800059e:	a201      	add	r2, pc, #4	@ (adr r2, 80005a4 <ADC_Select_CH+0x24>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005e5 	.word	0x080005e5
 80005a8:	08000607 	.word	0x08000607
 80005ac:	08000629 	.word	0x08000629
 80005b0:	0800064b 	.word	0x0800064b
 80005b4:	0800066d 	.word	0x0800066d
 80005b8:	0800068f 	.word	0x0800068f
 80005bc:	080006b1 	.word	0x080006b1
 80005c0:	080006d3 	.word	0x080006d3
 80005c4:	080006f5 	.word	0x080006f5
 80005c8:	08000717 	.word	0x08000717
 80005cc:	08000737 	.word	0x08000737
 80005d0:	08000757 	.word	0x08000757
 80005d4:	08000777 	.word	0x08000777
 80005d8:	08000797 	.word	0x08000797
 80005dc:	080007b7 	.word	0x080007b7
 80005e0:	080007d7 	.word	0x080007d7
{
case 0:
sConfig.Channel = ADC_CHANNEL_0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	4619      	mov	r1, r3
 80005f2:	4892      	ldr	r0, [pc, #584]	@ (800083c <ADC_Select_CH+0x2bc>)
 80005f4:	f002 fcc2 	bl	8002f7c <HAL_ADC_ConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f000 80fb 	beq.w	80007f6 <ADC_Select_CH+0x276>
{
Error_Handler();
 8000600:	f001 ff78 	bl	80024f4 <Error_Handler>
}
break;
 8000604:	e0f7      	b.n	80007f6 <ADC_Select_CH+0x276>
case 1:
sConfig.Channel = ADC_CHANNEL_1;
 8000606:	2301      	movs	r3, #1
 8000608:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4619      	mov	r1, r3
 8000614:	4889      	ldr	r0, [pc, #548]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000616:	f002 fcb1 	bl	8002f7c <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	f000 80ec 	beq.w	80007fa <ADC_Select_CH+0x27a>
{
Error_Handler();
 8000622:	f001 ff67 	bl	80024f4 <Error_Handler>
}
break;
 8000626:	e0e8      	b.n	80007fa <ADC_Select_CH+0x27a>
case 2:
sConfig.Channel = ADC_CHANNEL_2;
 8000628:	2302      	movs	r3, #2
 800062a:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800062c:	2301      	movs	r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	4619      	mov	r1, r3
 8000636:	4881      	ldr	r0, [pc, #516]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000638:	f002 fca0 	bl	8002f7c <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	f000 80dd 	beq.w	80007fe <ADC_Select_CH+0x27e>
{
Error_Handler();
 8000644:	f001 ff56 	bl	80024f4 <Error_Handler>
}
break;
 8000648:	e0d9      	b.n	80007fe <ADC_Select_CH+0x27e>
case 3:
sConfig.Channel = ADC_CHANNEL_3;
 800064a:	2303      	movs	r3, #3
 800064c:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	4619      	mov	r1, r3
 8000658:	4878      	ldr	r0, [pc, #480]	@ (800083c <ADC_Select_CH+0x2bc>)
 800065a:	f002 fc8f 	bl	8002f7c <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	f000 80ce 	beq.w	8000802 <ADC_Select_CH+0x282>
{
Error_Handler();
 8000666:	f001 ff45 	bl	80024f4 <Error_Handler>
}
break;
 800066a:	e0ca      	b.n	8000802 <ADC_Select_CH+0x282>
case 4:
sConfig.Channel = ADC_CHANNEL_4;
 800066c:	2304      	movs	r3, #4
 800066e:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	4619      	mov	r1, r3
 800067a:	4870      	ldr	r0, [pc, #448]	@ (800083c <ADC_Select_CH+0x2bc>)
 800067c:	f002 fc7e 	bl	8002f7c <HAL_ADC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	f000 80bf 	beq.w	8000806 <ADC_Select_CH+0x286>
{
Error_Handler();
 8000688:	f001 ff34 	bl	80024f4 <Error_Handler>
}
break;
 800068c:	e0bb      	b.n	8000806 <ADC_Select_CH+0x286>
case 5:
sConfig.Channel = ADC_CHANNEL_5;
 800068e:	2305      	movs	r3, #5
 8000690:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	4619      	mov	r1, r3
 800069c:	4867      	ldr	r0, [pc, #412]	@ (800083c <ADC_Select_CH+0x2bc>)
 800069e:	f002 fc6d 	bl	8002f7c <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f000 80b0 	beq.w	800080a <ADC_Select_CH+0x28a>
{
Error_Handler();
 80006aa:	f001 ff23 	bl	80024f4 <Error_Handler>
}
break;
 80006ae:	e0ac      	b.n	800080a <ADC_Select_CH+0x28a>
case 6:
sConfig.Channel = ADC_CHANNEL_6;
 80006b0:	2306      	movs	r3, #6
 80006b2:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	4619      	mov	r1, r3
 80006be:	485f      	ldr	r0, [pc, #380]	@ (800083c <ADC_Select_CH+0x2bc>)
 80006c0:	f002 fc5c 	bl	8002f7c <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	f000 80a1 	beq.w	800080e <ADC_Select_CH+0x28e>
{
Error_Handler();
 80006cc:	f001 ff12 	bl	80024f4 <Error_Handler>
}
break;
 80006d0:	e09d      	b.n	800080e <ADC_Select_CH+0x28e>
case 7:
sConfig.Channel = ADC_CHANNEL_7;
 80006d2:	2307      	movs	r3, #7
 80006d4:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4619      	mov	r1, r3
 80006e0:	4856      	ldr	r0, [pc, #344]	@ (800083c <ADC_Select_CH+0x2bc>)
 80006e2:	f002 fc4b 	bl	8002f7c <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	f000 8092 	beq.w	8000812 <ADC_Select_CH+0x292>
{
Error_Handler();
 80006ee:	f001 ff01 	bl	80024f4 <Error_Handler>
}
break;
 80006f2:	e08e      	b.n	8000812 <ADC_Select_CH+0x292>
case 8:
sConfig.Channel = ADC_CHANNEL_8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	4619      	mov	r1, r3
 8000702:	484e      	ldr	r0, [pc, #312]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000704:	f002 fc3a 	bl	8002f7c <HAL_ADC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	f000 8083 	beq.w	8000816 <ADC_Select_CH+0x296>
{
Error_Handler();
 8000710:	f001 fef0 	bl	80024f4 <Error_Handler>
}
break;
 8000714:	e07f      	b.n	8000816 <ADC_Select_CH+0x296>
case 9:
sConfig.Channel = ADC_CHANNEL_9;
 8000716:	2309      	movs	r3, #9
 8000718:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	4619      	mov	r1, r3
 8000724:	4845      	ldr	r0, [pc, #276]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000726:	f002 fc29 	bl	8002f7c <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d074      	beq.n	800081a <ADC_Select_CH+0x29a>
{
Error_Handler();
 8000730:	f001 fee0 	bl	80024f4 <Error_Handler>
}
break;
 8000734:	e071      	b.n	800081a <ADC_Select_CH+0x29a>
case 10:
sConfig.Channel = ADC_CHANNEL_10;
 8000736:	230a      	movs	r3, #10
 8000738:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	4619      	mov	r1, r3
 8000744:	483d      	ldr	r0, [pc, #244]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000746:	f002 fc19 	bl	8002f7c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d066      	beq.n	800081e <ADC_Select_CH+0x29e>
{
Error_Handler();
 8000750:	f001 fed0 	bl	80024f4 <Error_Handler>
}
break;
 8000754:	e063      	b.n	800081e <ADC_Select_CH+0x29e>
case 11:
sConfig.Channel = ADC_CHANNEL_11;
 8000756:	230b      	movs	r3, #11
 8000758:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	4835      	ldr	r0, [pc, #212]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000766:	f002 fc09 	bl	8002f7c <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d058      	beq.n	8000822 <ADC_Select_CH+0x2a2>
{
Error_Handler();
 8000770:	f001 fec0 	bl	80024f4 <Error_Handler>
}
break;
 8000774:	e055      	b.n	8000822 <ADC_Select_CH+0x2a2>
case 12:
sConfig.Channel = ADC_CHANNEL_12;
 8000776:	230c      	movs	r3, #12
 8000778:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800077a:	2301      	movs	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	4619      	mov	r1, r3
 8000784:	482d      	ldr	r0, [pc, #180]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000786:	f002 fbf9 	bl	8002f7c <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d04a      	beq.n	8000826 <ADC_Select_CH+0x2a6>
{
Error_Handler();
 8000790:	f001 feb0 	bl	80024f4 <Error_Handler>
}
break;
 8000794:	e047      	b.n	8000826 <ADC_Select_CH+0x2a6>
case 13:
sConfig.Channel = ADC_CHANNEL_13;
 8000796:	230d      	movs	r3, #13
 8000798:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4619      	mov	r1, r3
 80007a4:	4825      	ldr	r0, [pc, #148]	@ (800083c <ADC_Select_CH+0x2bc>)
 80007a6:	f002 fbe9 	bl	8002f7c <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d03c      	beq.n	800082a <ADC_Select_CH+0x2aa>
{
Error_Handler();
 80007b0:	f001 fea0 	bl	80024f4 <Error_Handler>
}
break;
 80007b4:	e039      	b.n	800082a <ADC_Select_CH+0x2aa>
case 14:
sConfig.Channel = ADC_CHANNEL_14;
 80007b6:	230e      	movs	r3, #14
 80007b8:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	4619      	mov	r1, r3
 80007c4:	481d      	ldr	r0, [pc, #116]	@ (800083c <ADC_Select_CH+0x2bc>)
 80007c6:	f002 fbd9 	bl	8002f7c <HAL_ADC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d02e      	beq.n	800082e <ADC_Select_CH+0x2ae>
{
Error_Handler();
 80007d0:	f001 fe90 	bl	80024f4 <Error_Handler>
}
break;
 80007d4:	e02b      	b.n	800082e <ADC_Select_CH+0x2ae>
case 15:
sConfig.Channel = ADC_CHANNEL_15;
 80007d6:	230f      	movs	r3, #15
 80007d8:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	4619      	mov	r1, r3
 80007e4:	4815      	ldr	r0, [pc, #84]	@ (800083c <ADC_Select_CH+0x2bc>)
 80007e6:	f002 fbc9 	bl	8002f7c <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d020      	beq.n	8000832 <ADC_Select_CH+0x2b2>
{
Error_Handler();
 80007f0:	f001 fe80 	bl	80024f4 <Error_Handler>
}
break;
 80007f4:	e01d      	b.n	8000832 <ADC_Select_CH+0x2b2>
break;
 80007f6:	bf00      	nop
 80007f8:	e01c      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 80007fa:	bf00      	nop
 80007fc:	e01a      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 80007fe:	bf00      	nop
 8000800:	e018      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 8000802:	bf00      	nop
 8000804:	e016      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 8000806:	bf00      	nop
 8000808:	e014      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 800080a:	bf00      	nop
 800080c:	e012      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 800080e:	bf00      	nop
 8000810:	e010      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 8000812:	bf00      	nop
 8000814:	e00e      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 8000816:	bf00      	nop
 8000818:	e00c      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 800081a:	bf00      	nop
 800081c:	e00a      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 800081e:	bf00      	nop
 8000820:	e008      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 8000822:	bf00      	nop
 8000824:	e006      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 8000826:	bf00      	nop
 8000828:	e004      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 800082a:	bf00      	nop
 800082c:	e002      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 800082e:	bf00      	nop
 8000830:	e000      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 8000832:	bf00      	nop
}
}
 8000834:	bf00      	nop
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000080 	.word	0x20000080

08000840 <change_pipe>:

int manual_control = 0;

uint8_t ADC_CH9;

void change_pipe(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b092      	sub	sp, #72	@ 0x48
 8000844:	af00      	add	r7, sp, #0
	uint8_t txd_msg_buffer[64];
	for (int i=0; i<4; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	647b      	str	r3, [r7, #68]	@ 0x44
 800084a:	e028      	b.n	800089e <change_pipe+0x5e>
		if (starts[i] == clock_hours){
 800084c:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <change_pipe+0x6c>)
 800084e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	4a16      	ldr	r2, [pc, #88]	@ (80008b0 <change_pipe+0x70>)
 8000856:	7812      	ldrb	r2, [r2, #0]
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	4293      	cmp	r3, r2
 800085c:	d103      	bne.n	8000866 <change_pipe+0x26>
			active_zone = i;
 800085e:	4a15      	ldr	r2, [pc, #84]	@ (80008b4 <change_pipe+0x74>)
 8000860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	e01e      	b.n	80008a4 <change_pipe+0x64>
		    return;
		}
		else if (stops[i] == clock_hours) {
 8000866:	4a14      	ldr	r2, [pc, #80]	@ (80008b8 <change_pipe+0x78>)
 8000868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800086a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086e:	4a10      	ldr	r2, [pc, #64]	@ (80008b0 <change_pipe+0x70>)
 8000870:	7812      	ldrb	r2, [r2, #0]
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	4293      	cmp	r3, r2
 8000876:	d10f      	bne.n	8000898 <change_pipe+0x58>
			HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fcb0 	bl	80001e0 <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	b29a      	uxth	r2, r3
 8000884:	1d39      	adds	r1, r7, #4
 8000886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088a:	480c      	ldr	r0, [pc, #48]	@ (80008bc <change_pipe+0x7c>)
 800088c:	f005 f9fc 	bl	8005c88 <HAL_UART_Transmit>
			active_zone = -1;
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <change_pipe+0x74>)
 8000892:	f04f 32ff 	mov.w	r2, #4294967295
 8000896:	601a      	str	r2, [r3, #0]
	for (int i=0; i<4; i++) {
 8000898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800089a:	3301      	adds	r3, #1
 800089c:	647b      	str	r3, [r7, #68]	@ 0x44
 800089e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	ddd3      	ble.n	800084c <change_pipe+0xc>
		}
	}
}
 80008a4:	3748      	adds	r7, #72	@ 0x48
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200002a0 	.word	0x200002a0
 80008b0:	200002c8 	.word	0x200002c8
 80008b4:	200002d4 	.word	0x200002d4
 80008b8:	200002b0 	.word	0x200002b0
 80008bc:	20000230 	.word	0x20000230

080008c0 <emergency_mode>:

void emergency_mode() {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b090      	sub	sp, #64	@ 0x40
 80008c4:	af00      	add	r7, sp, #0
		uint8_t txd_msg_buffer[64];
		sprintf((char*)txd_msg_buffer, "\r\nRESERVOIR EMPTY!");
 80008c6:	463b      	mov	r3, r7
 80008c8:	491d      	ldr	r1, [pc, #116]	@ (8000940 <emergency_mode+0x80>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	f006 f9e2 	bl	8006c94 <siprintf>
		HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80008d0:	463b      	mov	r3, r7
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fc84 	bl	80001e0 <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4639      	mov	r1, r7
 80008de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e2:	4818      	ldr	r0, [pc, #96]	@ (8000944 <emergency_mode+0x84>)
 80008e4:	f005 f9d0 	bl	8005c88 <HAL_UART_Transmit>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80008e8:	2100      	movs	r1, #0
 80008ea:	4817      	ldr	r0, [pc, #92]	@ (8000948 <emergency_mode+0x88>)
 80008ec:	f003 ff62 	bl	80047b4 <HAL_TIM_PWM_Stop>
		while (1) {
			HAL_GPIO_WritePin(GPIOC, GRN_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2140      	movs	r1, #64	@ 0x40
 80008f4:	4815      	ldr	r0, [pc, #84]	@ (800094c <emergency_mode+0x8c>)
 80008f6:	f003 f887 	bl	8003a08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, RED_Pin, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2120      	movs	r1, #32
 80008fe:	4813      	ldr	r0, [pc, #76]	@ (800094c <emergency_mode+0x8c>)
 8000900:	f003 f882 	bl	8003a08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, BLU_Pin, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2180      	movs	r1, #128	@ 0x80
 8000908:	4810      	ldr	r0, [pc, #64]	@ (800094c <emergency_mode+0x8c>)
 800090a:	f003 f87d 	bl	8003a08 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 800090e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000912:	f002 f94b 	bl	8002bac <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GRN_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2140      	movs	r1, #64	@ 0x40
 800091a:	480c      	ldr	r0, [pc, #48]	@ (800094c <emergency_mode+0x8c>)
 800091c:	f003 f874 	bl	8003a08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, RED_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2120      	movs	r1, #32
 8000924:	4809      	ldr	r0, [pc, #36]	@ (800094c <emergency_mode+0x8c>)
 8000926:	f003 f86f 	bl	8003a08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, BLU_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2180      	movs	r1, #128	@ 0x80
 800092e:	4807      	ldr	r0, [pc, #28]	@ (800094c <emergency_mode+0x8c>)
 8000930:	f003 f86a 	bl	8003a08 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000934:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000938:	f002 f938 	bl	8002bac <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GRN_Pin, GPIO_PIN_SET);
 800093c:	bf00      	nop
 800093e:	e7d7      	b.n	80008f0 <emergency_mode+0x30>
 8000940:	080075ec 	.word	0x080075ec
 8000944:	20000230 	.word	0x20000230
 8000948:	200000c8 	.word	0x200000c8
 800094c:	40020800 	.word	0x40020800

08000950 <set_timer.5>:
{

  /* USER CODE BEGIN 1 */
	uint8_t txd_msg_buffer[64] = {'h'};

	void set_timer(uint8_t DIGIT_A, uint8_t DIGIT_B) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	@ 0x30
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	460a      	mov	r2, r1
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	4613      	mov	r3, r2
 800095e:	71bb      	strb	r3, [r7, #6]
 8000960:	f8c7 c000 	str.w	ip, [r7]
				uint8_t DIGITA_VAL = 0x0F & DIGIT_A; //mask off higher4 bits
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				 int Abit0 = (DIGITA_VAL ) & 1;  	// extract Abit0 of the 4-bit value
 800096e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
				 int Abit1 = (DIGITA_VAL >> 1) & 1;  // extract Abit1 of the 4-bit value
 8000978:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800097c:	085b      	lsrs	r3, r3, #1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
				 int Abit2 = (DIGITA_VAL >> 2) & 1;  // extract Abit2 of the 4-bit value
 8000986:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	623b      	str	r3, [r7, #32]
				 int Abit3 = (DIGITA_VAL >> 3) & 1;  // extract Abit3 of the 4-bit value
 8000994:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000998:	08db      	lsrs	r3, r3, #3
 800099a:	b2db      	uxtb	r3, r3
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	61fb      	str	r3, [r7, #28]

				 uint8_t DIGITB_VAL = 0x0F & DIGIT_B; //mask off higher4 bits
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	f003 030f 	and.w	r3, r3, #15
 80009a8:	76fb      	strb	r3, [r7, #27]
				 int Bbit0 = (DIGITB_VAL ) & 1;  	// extract Bbit0 of the 4-bit value
 80009aa:	7efb      	ldrb	r3, [r7, #27]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
				 int Bbit1 = (DIGITB_VAL >> 1) & 1;  // extract Bbit1 of the 4-bit value
 80009b2:	7efb      	ldrb	r3, [r7, #27]
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	613b      	str	r3, [r7, #16]
				 int Bbit2 = (DIGITB_VAL >> 2) & 1;  // extract Bbit2 of the 4-bit value
 80009be:	7efb      	ldrb	r3, [r7, #27]
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
				 int Bbit3 = (DIGITB_VAL >> 3) & 1;  // extract Bbit3 of the 4-bit value
 80009ca:	7efb      	ldrb	r3, [r7, #27]
 80009cc:	08db      	lsrs	r3, r3, #3
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]

				 if (Abit0 == (0))
 80009d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d105      	bne.n	80009e8 <set_timer.5+0x98>
				 {
					 HAL_GPIO_WritePin(GPIOC, A0_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2104      	movs	r1, #4
 80009e0:	483b      	ldr	r0, [pc, #236]	@ (8000ad0 <set_timer.5+0x180>)
 80009e2:	f003 f811 	bl	8003a08 <HAL_GPIO_WritePin>
 80009e6:	e004      	b.n	80009f2 <set_timer.5+0xa2>
				 }
				 else
				 {
					 HAL_GPIO_WritePin(GPIOC, A0_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2104      	movs	r1, #4
 80009ec:	4838      	ldr	r0, [pc, #224]	@ (8000ad0 <set_timer.5+0x180>)
 80009ee:	f003 f80b 	bl	8003a08 <HAL_GPIO_WritePin>

				 }
				 if (Abit1 == (0))
 80009f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d106      	bne.n	8000a06 <set_timer.5+0xb6>
				 {
					 HAL_GPIO_WritePin(GPIOC, A1_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009fe:	4834      	ldr	r0, [pc, #208]	@ (8000ad0 <set_timer.5+0x180>)
 8000a00:	f003 f802 	bl	8003a08 <HAL_GPIO_WritePin>
 8000a04:	e005      	b.n	8000a12 <set_timer.5+0xc2>
				 }
				 else
				 {
					 HAL_GPIO_WritePin(GPIOC, A1_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a0c:	4830      	ldr	r0, [pc, #192]	@ (8000ad0 <set_timer.5+0x180>)
 8000a0e:	f002 fffb 	bl	8003a08 <HAL_GPIO_WritePin>

				 }
				 if (Abit2 == (0))
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d106      	bne.n	8000a26 <set_timer.5+0xd6>
				 {
					 HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a1e:	482c      	ldr	r0, [pc, #176]	@ (8000ad0 <set_timer.5+0x180>)
 8000a20:	f002 fff2 	bl	8003a08 <HAL_GPIO_WritePin>
 8000a24:	e005      	b.n	8000a32 <set_timer.5+0xe2>
				 }
				 else
				 {
					 HAL_GPIO_WritePin(GPIOC, A2_Pin, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a2c:	4828      	ldr	r0, [pc, #160]	@ (8000ad0 <set_timer.5+0x180>)
 8000a2e:	f002 ffeb 	bl	8003a08 <HAL_GPIO_WritePin>

				 }
				 if (Abit3 == (0))
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d106      	bne.n	8000a46 <set_timer.5+0xf6>
				 {
					 HAL_GPIO_WritePin(GPIOC, A3_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a3e:	4824      	ldr	r0, [pc, #144]	@ (8000ad0 <set_timer.5+0x180>)
 8000a40:	f002 ffe2 	bl	8003a08 <HAL_GPIO_WritePin>
 8000a44:	e005      	b.n	8000a52 <set_timer.5+0x102>
				 }
				 else
				 {
					 HAL_GPIO_WritePin(GPIOC, A3_Pin, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a4c:	4820      	ldr	r0, [pc, #128]	@ (8000ad0 <set_timer.5+0x180>)
 8000a4e:	f002 ffdb 	bl	8003a08 <HAL_GPIO_WritePin>

				 }


				 if (Bbit0 == (0))
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d106      	bne.n	8000a66 <set_timer.5+0x116>
				 {
					 HAL_GPIO_WritePin(GPIOB, B0_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a5e:	481d      	ldr	r0, [pc, #116]	@ (8000ad4 <set_timer.5+0x184>)
 8000a60:	f002 ffd2 	bl	8003a08 <HAL_GPIO_WritePin>
 8000a64:	e005      	b.n	8000a72 <set_timer.5+0x122>
				 }
				 else
				 {
					 HAL_GPIO_WritePin(GPIOC, B0_Pin, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a6c:	4818      	ldr	r0, [pc, #96]	@ (8000ad0 <set_timer.5+0x180>)
 8000a6e:	f002 ffcb 	bl	8003a08 <HAL_GPIO_WritePin>

				 }
				 if (Bbit1 == (0))
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d105      	bne.n	8000a84 <set_timer.5+0x134>
				 {
					 HAL_GPIO_WritePin(GPIOC, B1_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4814      	ldr	r0, [pc, #80]	@ (8000ad0 <set_timer.5+0x180>)
 8000a7e:	f002 ffc3 	bl	8003a08 <HAL_GPIO_WritePin>
 8000a82:	e004      	b.n	8000a8e <set_timer.5+0x13e>
				 }
				 else
				 {
					 HAL_GPIO_WritePin(GPIOC, B1_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2101      	movs	r1, #1
 8000a88:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <set_timer.5+0x180>)
 8000a8a:	f002 ffbd 	bl	8003a08 <HAL_GPIO_WritePin>

				 }
				 if (Bbit2 == (0))
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d105      	bne.n	8000aa0 <set_timer.5+0x150>
				 {
					 HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2108      	movs	r1, #8
 8000a98:	480d      	ldr	r0, [pc, #52]	@ (8000ad0 <set_timer.5+0x180>)
 8000a9a:	f002 ffb5 	bl	8003a08 <HAL_GPIO_WritePin>
 8000a9e:	e004      	b.n	8000aaa <set_timer.5+0x15a>
				 }
				 else
				 {
					 HAL_GPIO_WritePin(GPIOC, B2_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2108      	movs	r1, #8
 8000aa4:	480a      	ldr	r0, [pc, #40]	@ (8000ad0 <set_timer.5+0x180>)
 8000aa6:	f002 ffaf 	bl	8003a08 <HAL_GPIO_WritePin>

				 }
				 if (Bbit3 == (0))
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d105      	bne.n	8000abc <set_timer.5+0x16c>
				 {
					 HAL_GPIO_WritePin(GPIOC, B3_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	4806      	ldr	r0, [pc, #24]	@ (8000ad0 <set_timer.5+0x180>)
 8000ab6:	f002 ffa7 	bl	8003a08 <HAL_GPIO_WritePin>
				 {
					 HAL_GPIO_WritePin(GPIOC, B3_Pin, GPIO_PIN_SET);

				 }

		}
 8000aba:	e004      	b.n	8000ac6 <set_timer.5+0x176>
					 HAL_GPIO_WritePin(GPIOC, B3_Pin, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4803      	ldr	r0, [pc, #12]	@ (8000ad0 <set_timer.5+0x180>)
 8000ac2:	f002 ffa1 	bl	8003a08 <HAL_GPIO_WritePin>
		}
 8000ac6:	bf00      	nop
 8000ac8:	3730      	adds	r7, #48	@ 0x30
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <main>:
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b092      	sub	sp, #72	@ 0x48
 8000adc:	af00      	add	r7, sp, #0
int main(void)
 8000ade:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ae2:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t txd_msg_buffer[64] = {'h'};
 8000ae4:	2368      	movs	r3, #104	@ 0x68
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	223c      	movs	r2, #60	@ 0x3c
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f006 f8ef 	bl	8006cd4 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af6:	f001 ffe7 	bl	8002ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afa:	f001 f8af 	bl	8001c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afe:	f001 fb87 	bl	8002210 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b02:	f001 fb31 	bl	8002168 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b06:	f001 f909 	bl	8001d1c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000b0a:	f001 f9eb 	bl	8001ee4 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000b0e:	f001 fb55 	bl	80021bc <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8000b12:	f001 fadb 	bl	80020cc <MX_TIM5_Init>
  MX_TIM1_Init();
 8000b16:	f001 f953 	bl	8001dc0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000b1a:	f001 fa7d 	bl	8002018 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim3);
 8000b1e:	48b3      	ldr	r0, [pc, #716]	@ (8000dec <main+0x314>)
 8000b20:	f003 fc3c 	bl	800439c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim3);
 8000b24:	48b1      	ldr	r0, [pc, #708]	@ (8000dec <main+0x314>)
 8000b26:	f003 fc89 	bl	800443c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	48af      	ldr	r0, [pc, #700]	@ (8000dec <main+0x314>)
 8000b2e:	f003 feff 	bl	8004930 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Init(&htim1);
 8000b32:	48af      	ldr	r0, [pc, #700]	@ (8000df0 <main+0x318>)
 8000b34:	f003 fc32 	bl	800439c <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	48ad      	ldr	r0, [pc, #692]	@ (8000df0 <main+0x318>)
 8000b3c:	f003 fd8a 	bl	8004654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b40:	2104      	movs	r1, #4
 8000b42:	48ab      	ldr	r0, [pc, #684]	@ (8000df0 <main+0x318>)
 8000b44:	f003 fd86 	bl	8004654 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0;
 8000b48:	4baa      	ldr	r3, [pc, #680]	@ (8000df4 <main+0x31c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	635a      	str	r2, [r3, #52]	@ 0x34
  clock_hours = 0;
 8000b4e:	4baa      	ldr	r3, [pc, #680]	@ (8000df8 <main+0x320>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
  clock_mins = 0;
 8000b54:	4ba9      	ldr	r3, [pc, #676]	@ (8000dfc <main+0x324>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
  clock_secs = 0;
 8000b5a:	4ba9      	ldr	r3, [pc, #676]	@ (8000e00 <main+0x328>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start(&htim4);
 8000b60:	48a8      	ldr	r0, [pc, #672]	@ (8000e04 <main+0x32c>)
 8000b62:	f003 fc6b 	bl	800443c <HAL_TIM_Base_Start>
  TIM4->PSC = 16-1;
 8000b66:	4ba8      	ldr	r3, [pc, #672]	@ (8000e08 <main+0x330>)
 8000b68:	220f      	movs	r2, #15
 8000b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM4->ARR = 20000-1;
 8000b6c:	4ba6      	ldr	r3, [pc, #664]	@ (8000e08 <main+0x330>)
 8000b6e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000b72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sprintf((char*)txd_msg_buffer, "\r\nFIRST PIPELINE CHOICE FOR CONNECTION: ");
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	49a5      	ldr	r1, [pc, #660]	@ (8000e0c <main+0x334>)
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f006 f88b 	bl	8006c94 <siprintf>
  while (1)
  {
	  if (setup_mode) {
 8000b7e:	4ba4      	ldr	r3, [pc, #656]	@ (8000e10 <main+0x338>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 85a5 	beq.w	80016d2 <main+0xbfa>
		  rcv_intpt_flag = 00;
 8000b88:	4ba2      	ldr	r3, [pc, #648]	@ (8000e14 <main+0x33c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fb25 	bl	80001e0 <strlen>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	1d39      	adds	r1, r7, #4
 8000b9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba0:	489d      	ldr	r0, [pc, #628]	@ (8000e18 <main+0x340>)
 8000ba2:	f005 f871 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	499c      	ldr	r1, [pc, #624]	@ (8000e1c <main+0x344>)
 8000baa:	489b      	ldr	r0, [pc, #620]	@ (8000e18 <main+0x340>)
 8000bac:	f005 f8f7 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000bb0:	bf00      	nop
 8000bb2:	4b98      	ldr	r3, [pc, #608]	@ (8000e14 <main+0x33c>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0fb      	beq.n	8000bb2 <main+0xda>
		  connections[0] = (byte-'0');
 8000bba:	4b98      	ldr	r3, [pc, #608]	@ (8000e1c <main+0x344>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	3b30      	subs	r3, #48	@ 0x30
 8000bc0:	4a97      	ldr	r2, [pc, #604]	@ (8000e20 <main+0x348>)
 8000bc2:	6013      	str	r3, [r2, #0]
		  rcv_intpt_flag = 00;
 8000bc4:	4b93      	ldr	r3, [pc, #588]	@ (8000e14 <main+0x33c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]


		  sprintf((char*)txd_msg_buffer, "\r\nFIRST PIPELINE CHOICE FOR MOTOR PWM: ");
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4995      	ldr	r1, [pc, #596]	@ (8000e24 <main+0x34c>)
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f006 f860 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fb02 	bl	80001e0 <strlen>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	1d39      	adds	r1, r7, #4
 8000be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be6:	488c      	ldr	r0, [pc, #560]	@ (8000e18 <main+0x340>)
 8000be8:	f005 f84e 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000bec:	2201      	movs	r2, #1
 8000bee:	498b      	ldr	r1, [pc, #556]	@ (8000e1c <main+0x344>)
 8000bf0:	4889      	ldr	r0, [pc, #548]	@ (8000e18 <main+0x340>)
 8000bf2:	f005 f8d4 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000bf6:	bf00      	nop
 8000bf8:	4b86      	ldr	r3, [pc, #536]	@ (8000e14 <main+0x33c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d0fb      	beq.n	8000bf8 <main+0x120>
		  rcv_intpt_flag = 00;
 8000c00:	4b84      	ldr	r3, [pc, #528]	@ (8000e14 <main+0x33c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
		  pwms[0] += (byte-'0')*10;
 8000c06:	4b88      	ldr	r3, [pc, #544]	@ (8000e28 <main+0x350>)
 8000c08:	6819      	ldr	r1, [r3, #0]
 8000c0a:	4b84      	ldr	r3, [pc, #528]	@ (8000e1c <main+0x344>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000c12:	4613      	mov	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4413      	add	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	440b      	add	r3, r1
 8000c1c:	4a82      	ldr	r2, [pc, #520]	@ (8000e28 <main+0x350>)
 8000c1e:	6013      	str	r3, [r2, #0]
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000c20:	2201      	movs	r2, #1
 8000c22:	497e      	ldr	r1, [pc, #504]	@ (8000e1c <main+0x344>)
 8000c24:	487c      	ldr	r0, [pc, #496]	@ (8000e18 <main+0x340>)
 8000c26:	f005 f8ba 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000c2a:	bf00      	nop
 8000c2c:	4b79      	ldr	r3, [pc, #484]	@ (8000e14 <main+0x33c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0fb      	beq.n	8000c2c <main+0x154>
		  pwms[0] += (byte-'0');
 8000c34:	4b7c      	ldr	r3, [pc, #496]	@ (8000e28 <main+0x350>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b78      	ldr	r3, [pc, #480]	@ (8000e1c <main+0x344>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	3b30      	subs	r3, #48	@ 0x30
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a79      	ldr	r2, [pc, #484]	@ (8000e28 <main+0x350>)
 8000c42:	6013      	str	r3, [r2, #0]
		  rcv_intpt_flag = 00;
 8000c44:	4b73      	ldr	r3, [pc, #460]	@ (8000e14 <main+0x33c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]

		  sprintf((char*)txd_msg_buffer, "\r\nSECOND ZONE CHOICE FOR CONNECTION: ");
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4977      	ldr	r1, [pc, #476]	@ (8000e2c <main+0x354>)
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f006 f820 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fac2 	bl	80001e0 <strlen>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	1d39      	adds	r1, r7, #4
 8000c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c66:	486c      	ldr	r0, [pc, #432]	@ (8000e18 <main+0x340>)
 8000c68:	f005 f80e 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	496b      	ldr	r1, [pc, #428]	@ (8000e1c <main+0x344>)
 8000c70:	4869      	ldr	r0, [pc, #420]	@ (8000e18 <main+0x340>)
 8000c72:	f005 f894 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000c76:	bf00      	nop
 8000c78:	4b66      	ldr	r3, [pc, #408]	@ (8000e14 <main+0x33c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0fb      	beq.n	8000c78 <main+0x1a0>
		  connections[1] = (byte-'0');
 8000c80:	4b66      	ldr	r3, [pc, #408]	@ (8000e1c <main+0x344>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	3b30      	subs	r3, #48	@ 0x30
 8000c86:	4a66      	ldr	r2, [pc, #408]	@ (8000e20 <main+0x348>)
 8000c88:	6053      	str	r3, [r2, #4]
		  rcv_intpt_flag = 00;
 8000c8a:	4b62      	ldr	r3, [pc, #392]	@ (8000e14 <main+0x33c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]

		  sprintf((char*)txd_msg_buffer, "\r\nSECOND PIPELINE CHOICE FOR MOTOR PWM: ");
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4967      	ldr	r1, [pc, #412]	@ (8000e30 <main+0x358>)
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 fffd 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fa9f 	bl	80001e0 <strlen>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	1d39      	adds	r1, r7, #4
 8000ca8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cac:	485a      	ldr	r0, [pc, #360]	@ (8000e18 <main+0x340>)
 8000cae:	f004 ffeb 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4959      	ldr	r1, [pc, #356]	@ (8000e1c <main+0x344>)
 8000cb6:	4858      	ldr	r0, [pc, #352]	@ (8000e18 <main+0x340>)
 8000cb8:	f005 f871 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000cbc:	bf00      	nop
 8000cbe:	4b55      	ldr	r3, [pc, #340]	@ (8000e14 <main+0x33c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0fb      	beq.n	8000cbe <main+0x1e6>
		  rcv_intpt_flag = 00;
 8000cc6:	4b53      	ldr	r3, [pc, #332]	@ (8000e14 <main+0x33c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
		  pwms[1] += (byte-'0')*10;
 8000ccc:	4b56      	ldr	r3, [pc, #344]	@ (8000e28 <main+0x350>)
 8000cce:	6859      	ldr	r1, [r3, #4]
 8000cd0:	4b52      	ldr	r3, [pc, #328]	@ (8000e1c <main+0x344>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	440b      	add	r3, r1
 8000ce2:	4a51      	ldr	r2, [pc, #324]	@ (8000e28 <main+0x350>)
 8000ce4:	6053      	str	r3, [r2, #4]
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	494c      	ldr	r1, [pc, #304]	@ (8000e1c <main+0x344>)
 8000cea:	484b      	ldr	r0, [pc, #300]	@ (8000e18 <main+0x340>)
 8000cec:	f005 f857 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000cf0:	bf00      	nop
 8000cf2:	4b48      	ldr	r3, [pc, #288]	@ (8000e14 <main+0x33c>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0fb      	beq.n	8000cf2 <main+0x21a>
		  pwms[1] += (byte-'0');
 8000cfa:	4b4b      	ldr	r3, [pc, #300]	@ (8000e28 <main+0x350>)
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	4b47      	ldr	r3, [pc, #284]	@ (8000e1c <main+0x344>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3b30      	subs	r3, #48	@ 0x30
 8000d04:	4413      	add	r3, r2
 8000d06:	4a48      	ldr	r2, [pc, #288]	@ (8000e28 <main+0x350>)
 8000d08:	6053      	str	r3, [r2, #4]
		  rcv_intpt_flag = 00;
 8000d0a:	4b42      	ldr	r3, [pc, #264]	@ (8000e14 <main+0x33c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]

		  sprintf((char*)txd_msg_buffer, "\r\nTHIRD ZONE CHOICE FOR CONNECTION: ");
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	4948      	ldr	r1, [pc, #288]	@ (8000e34 <main+0x35c>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f005 ffbd 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fa5f 	bl	80001e0 <strlen>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	1d39      	adds	r1, r7, #4
 8000d28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2c:	483a      	ldr	r0, [pc, #232]	@ (8000e18 <main+0x340>)
 8000d2e:	f004 ffab 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000d32:	2201      	movs	r2, #1
 8000d34:	4939      	ldr	r1, [pc, #228]	@ (8000e1c <main+0x344>)
 8000d36:	4838      	ldr	r0, [pc, #224]	@ (8000e18 <main+0x340>)
 8000d38:	f005 f831 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000d3c:	bf00      	nop
 8000d3e:	4b35      	ldr	r3, [pc, #212]	@ (8000e14 <main+0x33c>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0fb      	beq.n	8000d3e <main+0x266>
		  connections[2] = (byte-'0');
 8000d46:	4b35      	ldr	r3, [pc, #212]	@ (8000e1c <main+0x344>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	3b30      	subs	r3, #48	@ 0x30
 8000d4c:	4a34      	ldr	r2, [pc, #208]	@ (8000e20 <main+0x348>)
 8000d4e:	6093      	str	r3, [r2, #8]
		  rcv_intpt_flag = 00;
 8000d50:	4b30      	ldr	r3, [pc, #192]	@ (8000e14 <main+0x33c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]

		  sprintf((char*)txd_msg_buffer, "\r\nTHIRD PIPELINE CHOICE FOR MOTOR PWM: ");
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	4937      	ldr	r1, [pc, #220]	@ (8000e38 <main+0x360>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f005 ff9a 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fa3c 	bl	80001e0 <strlen>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	1d39      	adds	r1, r7, #4
 8000d6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d72:	4829      	ldr	r0, [pc, #164]	@ (8000e18 <main+0x340>)
 8000d74:	f004 ff88 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4928      	ldr	r1, [pc, #160]	@ (8000e1c <main+0x344>)
 8000d7c:	4826      	ldr	r0, [pc, #152]	@ (8000e18 <main+0x340>)
 8000d7e:	f005 f80e 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000d82:	bf00      	nop
 8000d84:	4b23      	ldr	r3, [pc, #140]	@ (8000e14 <main+0x33c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0fb      	beq.n	8000d84 <main+0x2ac>
		  rcv_intpt_flag = 00;
 8000d8c:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <main+0x33c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
		  pwms[2] += (byte-'0')*10;
 8000d92:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <main+0x350>)
 8000d94:	6899      	ldr	r1, [r3, #8]
 8000d96:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <main+0x344>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	440b      	add	r3, r1
 8000da8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e28 <main+0x350>)
 8000daa:	6093      	str	r3, [r2, #8]
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000dac:	2201      	movs	r2, #1
 8000dae:	491b      	ldr	r1, [pc, #108]	@ (8000e1c <main+0x344>)
 8000db0:	4819      	ldr	r0, [pc, #100]	@ (8000e18 <main+0x340>)
 8000db2:	f004 fff4 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000db6:	bf00      	nop
 8000db8:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <main+0x33c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0fb      	beq.n	8000db8 <main+0x2e0>
		  pwms[2] += (byte-'0');
 8000dc0:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <main+0x350>)
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <main+0x344>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	3b30      	subs	r3, #48	@ 0x30
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a16      	ldr	r2, [pc, #88]	@ (8000e28 <main+0x350>)
 8000dce:	6093      	str	r3, [r2, #8]
		  rcv_intpt_flag = 00;
 8000dd0:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <main+0x33c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]

		  sprintf((char*)txd_msg_buffer, "\r\nFOURTH ZONE CHOICE FOR CONNECTION: ");
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4918      	ldr	r1, [pc, #96]	@ (8000e3c <main+0x364>)
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f005 ff5a 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff f9fc 	bl	80001e0 <strlen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	e029      	b.n	8000e40 <main+0x368>
 8000dec:	20000110 	.word	0x20000110
 8000df0:	200000c8 	.word	0x200000c8
 8000df4:	40010000 	.word	0x40010000
 8000df8:	200002c8 	.word	0x200002c8
 8000dfc:	200002c9 	.word	0x200002c9
 8000e00:	200002cc 	.word	0x200002cc
 8000e04:	20000158 	.word	0x20000158
 8000e08:	40000800 	.word	0x40000800
 8000e0c:	08007600 	.word	0x08007600
 8000e10:	20000000 	.word	0x20000000
 8000e14:	2000027e 	.word	0x2000027e
 8000e18:	20000230 	.word	0x20000230
 8000e1c:	2000027f 	.word	0x2000027f
 8000e20:	20000280 	.word	0x20000280
 8000e24:	0800762c 	.word	0x0800762c
 8000e28:	20000290 	.word	0x20000290
 8000e2c:	08007654 	.word	0x08007654
 8000e30:	0800767c 	.word	0x0800767c
 8000e34:	080076a8 	.word	0x080076a8
 8000e38:	080076d0 	.word	0x080076d0
 8000e3c:	080076f8 	.word	0x080076f8
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	1d39      	adds	r1, r7, #4
 8000e44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e48:	48ae      	ldr	r0, [pc, #696]	@ (8001104 <main+0x62c>)
 8000e4a:	f004 ff1d 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	49ad      	ldr	r1, [pc, #692]	@ (8001108 <main+0x630>)
 8000e52:	48ac      	ldr	r0, [pc, #688]	@ (8001104 <main+0x62c>)
 8000e54:	f004 ffa3 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000e58:	bf00      	nop
 8000e5a:	4bac      	ldr	r3, [pc, #688]	@ (800110c <main+0x634>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0fb      	beq.n	8000e5a <main+0x382>
		  connections[3] = (byte-'0');
 8000e62:	4ba9      	ldr	r3, [pc, #676]	@ (8001108 <main+0x630>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	3b30      	subs	r3, #48	@ 0x30
 8000e68:	4aa9      	ldr	r2, [pc, #676]	@ (8001110 <main+0x638>)
 8000e6a:	60d3      	str	r3, [r2, #12]
		  rcv_intpt_flag = 00;
 8000e6c:	4ba7      	ldr	r3, [pc, #668]	@ (800110c <main+0x634>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]

		  sprintf((char*)txd_msg_buffer, "\r\nFOURTH PIPELINE CHOICE FOR MOTOR PWM: ");
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	49a7      	ldr	r1, [pc, #668]	@ (8001114 <main+0x63c>)
 8000e76:	4618      	mov	r0, r3
 8000e78:	f005 ff0c 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff f9ae 	bl	80001e0 <strlen>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	1d39      	adds	r1, r7, #4
 8000e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e8e:	489d      	ldr	r0, [pc, #628]	@ (8001104 <main+0x62c>)
 8000e90:	f004 fefa 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000e94:	2201      	movs	r2, #1
 8000e96:	499c      	ldr	r1, [pc, #624]	@ (8001108 <main+0x630>)
 8000e98:	489a      	ldr	r0, [pc, #616]	@ (8001104 <main+0x62c>)
 8000e9a:	f004 ff80 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000e9e:	bf00      	nop
 8000ea0:	4b9a      	ldr	r3, [pc, #616]	@ (800110c <main+0x634>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0fb      	beq.n	8000ea0 <main+0x3c8>
		  rcv_intpt_flag = 00;
 8000ea8:	4b98      	ldr	r3, [pc, #608]	@ (800110c <main+0x634>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
		  pwms[3] += (byte-'0')*10;
 8000eae:	4b9a      	ldr	r3, [pc, #616]	@ (8001118 <main+0x640>)
 8000eb0:	68d9      	ldr	r1, [r3, #12]
 8000eb2:	4b95      	ldr	r3, [pc, #596]	@ (8001108 <main+0x630>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	440b      	add	r3, r1
 8000ec4:	4a94      	ldr	r2, [pc, #592]	@ (8001118 <main+0x640>)
 8000ec6:	60d3      	str	r3, [r2, #12]
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	498f      	ldr	r1, [pc, #572]	@ (8001108 <main+0x630>)
 8000ecc:	488d      	ldr	r0, [pc, #564]	@ (8001104 <main+0x62c>)
 8000ece:	f004 ff66 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000ed2:	bf00      	nop
 8000ed4:	4b8d      	ldr	r3, [pc, #564]	@ (800110c <main+0x634>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0fb      	beq.n	8000ed4 <main+0x3fc>
		  pwms[3] += (byte-'0');
 8000edc:	4b8e      	ldr	r3, [pc, #568]	@ (8001118 <main+0x640>)
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	4b89      	ldr	r3, [pc, #548]	@ (8001108 <main+0x630>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3b30      	subs	r3, #48	@ 0x30
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a8b      	ldr	r2, [pc, #556]	@ (8001118 <main+0x640>)
 8000eea:	60d3      	str	r3, [r2, #12]
		  rcv_intpt_flag = 00;
 8000eec:	4b87      	ldr	r3, [pc, #540]	@ (800110c <main+0x634>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]



		  // setup part b:
		  sprintf((char*)txd_msg_buffer, "\r\nINLET WALL CLOCK START TIME: ");
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4989      	ldr	r1, [pc, #548]	@ (800111c <main+0x644>)
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f005 fecc 	bl	8006c94 <siprintf>
		  rcv_intpt_flag = 00;
 8000efc:	4b83      	ldr	r3, [pc, #524]	@ (800110c <main+0x634>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff f96b 	bl	80001e0 <strlen>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	1d39      	adds	r1, r7, #4
 8000f10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f14:	487b      	ldr	r0, [pc, #492]	@ (8001104 <main+0x62c>)
 8000f16:	f004 feb7 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	497a      	ldr	r1, [pc, #488]	@ (8001108 <main+0x630>)
 8000f1e:	4879      	ldr	r0, [pc, #484]	@ (8001104 <main+0x62c>)
 8000f20:	f004 ff3d 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000f24:	bf00      	nop
 8000f26:	4b79      	ldr	r3, [pc, #484]	@ (800110c <main+0x634>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0fb      	beq.n	8000f26 <main+0x44e>
		  rcv_intpt_flag = 00;
 8000f2e:	4b77      	ldr	r3, [pc, #476]	@ (800110c <main+0x634>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
		  starts[0] += (byte-'0')*10;
 8000f34:	4b7a      	ldr	r3, [pc, #488]	@ (8001120 <main+0x648>)
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	4b73      	ldr	r3, [pc, #460]	@ (8001108 <main+0x630>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	440b      	add	r3, r1
 8000f4a:	4a75      	ldr	r2, [pc, #468]	@ (8001120 <main+0x648>)
 8000f4c:	6013      	str	r3, [r2, #0]
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	496d      	ldr	r1, [pc, #436]	@ (8001108 <main+0x630>)
 8000f52:	486c      	ldr	r0, [pc, #432]	@ (8001104 <main+0x62c>)
 8000f54:	f004 ff23 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000f58:	bf00      	nop
 8000f5a:	4b6c      	ldr	r3, [pc, #432]	@ (800110c <main+0x634>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0fb      	beq.n	8000f5a <main+0x482>
		  starts[0] += (byte-'0');
 8000f62:	4b6f      	ldr	r3, [pc, #444]	@ (8001120 <main+0x648>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4b68      	ldr	r3, [pc, #416]	@ (8001108 <main+0x630>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	3b30      	subs	r3, #48	@ 0x30
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4a6c      	ldr	r2, [pc, #432]	@ (8001120 <main+0x648>)
 8000f70:	6013      	str	r3, [r2, #0]
		  rcv_intpt_flag = 00;
 8000f72:	4b66      	ldr	r3, [pc, #408]	@ (800110c <main+0x634>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]

		  sprintf((char*)txd_msg_buffer, "\r\nINLET WALL CLOCK STOP TIME: ");
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	496a      	ldr	r1, [pc, #424]	@ (8001124 <main+0x64c>)
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f005 fe89 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff f92b 	bl	80001e0 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	1d39      	adds	r1, r7, #4
 8000f90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f94:	485b      	ldr	r0, [pc, #364]	@ (8001104 <main+0x62c>)
 8000f96:	f004 fe77 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	495a      	ldr	r1, [pc, #360]	@ (8001108 <main+0x630>)
 8000f9e:	4859      	ldr	r0, [pc, #356]	@ (8001104 <main+0x62c>)
 8000fa0:	f004 fefd 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000fa4:	bf00      	nop
 8000fa6:	4b59      	ldr	r3, [pc, #356]	@ (800110c <main+0x634>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0fb      	beq.n	8000fa6 <main+0x4ce>
		  rcv_intpt_flag = 00;
 8000fae:	4b57      	ldr	r3, [pc, #348]	@ (800110c <main+0x634>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
		  stops[0] += (byte-'0')*10;
 8000fb4:	4b5c      	ldr	r3, [pc, #368]	@ (8001128 <main+0x650>)
 8000fb6:	6819      	ldr	r1, [r3, #0]
 8000fb8:	4b53      	ldr	r3, [pc, #332]	@ (8001108 <main+0x630>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	440b      	add	r3, r1
 8000fca:	4a57      	ldr	r2, [pc, #348]	@ (8001128 <main+0x650>)
 8000fcc:	6013      	str	r3, [r2, #0]
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	494d      	ldr	r1, [pc, #308]	@ (8001108 <main+0x630>)
 8000fd2:	484c      	ldr	r0, [pc, #304]	@ (8001104 <main+0x62c>)
 8000fd4:	f004 fee3 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8000fd8:	bf00      	nop
 8000fda:	4b4c      	ldr	r3, [pc, #304]	@ (800110c <main+0x634>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0fb      	beq.n	8000fda <main+0x502>
		  stops[0] += (byte-'0');
 8000fe2:	4b51      	ldr	r3, [pc, #324]	@ (8001128 <main+0x650>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b48      	ldr	r3, [pc, #288]	@ (8001108 <main+0x630>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	3b30      	subs	r3, #48	@ 0x30
 8000fec:	4413      	add	r3, r2
 8000fee:	4a4e      	ldr	r2, [pc, #312]	@ (8001128 <main+0x650>)
 8000ff0:	6013      	str	r3, [r2, #0]
		  rcv_intpt_flag = 00;
 8000ff2:	4b46      	ldr	r3, [pc, #280]	@ (800110c <main+0x634>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]

		  sprintf((char*)txd_msg_buffer, "\r\nFIRST ZONE WALL CLOCK START TIME: ");
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	494c      	ldr	r1, [pc, #304]	@ (800112c <main+0x654>)
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f005 fe49 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f8eb 	bl	80001e0 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	b29a      	uxth	r2, r3
 800100e:	1d39      	adds	r1, r7, #4
 8001010:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001014:	483b      	ldr	r0, [pc, #236]	@ (8001104 <main+0x62c>)
 8001016:	f004 fe37 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 800101a:	2201      	movs	r2, #1
 800101c:	493a      	ldr	r1, [pc, #232]	@ (8001108 <main+0x630>)
 800101e:	4839      	ldr	r0, [pc, #228]	@ (8001104 <main+0x62c>)
 8001020:	f004 febd 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8001024:	bf00      	nop
 8001026:	4b39      	ldr	r3, [pc, #228]	@ (800110c <main+0x634>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0fb      	beq.n	8001026 <main+0x54e>
		  rcv_intpt_flag = 00;
 800102e:	4b37      	ldr	r3, [pc, #220]	@ (800110c <main+0x634>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
		  starts[1] += (byte-'0')*10;
 8001034:	4b3a      	ldr	r3, [pc, #232]	@ (8001120 <main+0x648>)
 8001036:	6859      	ldr	r1, [r3, #4]
 8001038:	4b33      	ldr	r3, [pc, #204]	@ (8001108 <main+0x630>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	440b      	add	r3, r1
 800104a:	4a35      	ldr	r2, [pc, #212]	@ (8001120 <main+0x648>)
 800104c:	6053      	str	r3, [r2, #4]
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 800104e:	2201      	movs	r2, #1
 8001050:	492d      	ldr	r1, [pc, #180]	@ (8001108 <main+0x630>)
 8001052:	482c      	ldr	r0, [pc, #176]	@ (8001104 <main+0x62c>)
 8001054:	f004 fea3 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 8001058:	bf00      	nop
 800105a:	4b2c      	ldr	r3, [pc, #176]	@ (800110c <main+0x634>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0fb      	beq.n	800105a <main+0x582>
		  starts[1] += (byte-'0');
 8001062:	4b2f      	ldr	r3, [pc, #188]	@ (8001120 <main+0x648>)
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	4b28      	ldr	r3, [pc, #160]	@ (8001108 <main+0x630>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	3b30      	subs	r3, #48	@ 0x30
 800106c:	4413      	add	r3, r2
 800106e:	4a2c      	ldr	r2, [pc, #176]	@ (8001120 <main+0x648>)
 8001070:	6053      	str	r3, [r2, #4]
		  rcv_intpt_flag = 00;
 8001072:	4b26      	ldr	r3, [pc, #152]	@ (800110c <main+0x634>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]

		  sprintf((char*)txd_msg_buffer, "\r\nFIRST ZONE WALL CLOCK STOP TIME: ");
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	492d      	ldr	r1, [pc, #180]	@ (8001130 <main+0x658>)
 800107c:	4618      	mov	r0, r3
 800107e:	f005 fe09 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f8ab 	bl	80001e0 <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	1d39      	adds	r1, r7, #4
 8001090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001094:	481b      	ldr	r0, [pc, #108]	@ (8001104 <main+0x62c>)
 8001096:	f004 fdf7 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 800109a:	2201      	movs	r2, #1
 800109c:	491a      	ldr	r1, [pc, #104]	@ (8001108 <main+0x630>)
 800109e:	4819      	ldr	r0, [pc, #100]	@ (8001104 <main+0x62c>)
 80010a0:	f004 fe7d 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 80010a4:	bf00      	nop
 80010a6:	4b19      	ldr	r3, [pc, #100]	@ (800110c <main+0x634>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0fb      	beq.n	80010a6 <main+0x5ce>
		  rcv_intpt_flag = 00;
 80010ae:	4b17      	ldr	r3, [pc, #92]	@ (800110c <main+0x634>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
		  stops[1] += (byte-'0')*10;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <main+0x650>)
 80010b6:	6859      	ldr	r1, [r3, #4]
 80010b8:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <main+0x630>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	440b      	add	r3, r1
 80010ca:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <main+0x650>)
 80010cc:	6053      	str	r3, [r2, #4]
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 80010ce:	2201      	movs	r2, #1
 80010d0:	490d      	ldr	r1, [pc, #52]	@ (8001108 <main+0x630>)
 80010d2:	480c      	ldr	r0, [pc, #48]	@ (8001104 <main+0x62c>)
 80010d4:	f004 fe63 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 80010d8:	bf00      	nop
 80010da:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <main+0x634>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0fb      	beq.n	80010da <main+0x602>
		  stops[1] += (byte-'0');
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <main+0x650>)
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <main+0x630>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	3b30      	subs	r3, #48	@ 0x30
 80010ec:	4413      	add	r3, r2
 80010ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001128 <main+0x650>)
 80010f0:	6053      	str	r3, [r2, #4]
		  rcv_intpt_flag = 00;
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <main+0x634>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]

		  sprintf((char*)txd_msg_buffer, "\r\nSECOND ZONE WALL CLOCK START TIME: ");
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	490e      	ldr	r1, [pc, #56]	@ (8001134 <main+0x65c>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f005 fdc9 	bl	8006c94 <siprintf>
 8001102:	e019      	b.n	8001138 <main+0x660>
 8001104:	20000230 	.word	0x20000230
 8001108:	2000027f 	.word	0x2000027f
 800110c:	2000027e 	.word	0x2000027e
 8001110:	20000280 	.word	0x20000280
 8001114:	08007720 	.word	0x08007720
 8001118:	20000290 	.word	0x20000290
 800111c:	0800774c 	.word	0x0800774c
 8001120:	200002a0 	.word	0x200002a0
 8001124:	0800776c 	.word	0x0800776c
 8001128:	200002b0 	.word	0x200002b0
 800112c:	0800778c 	.word	0x0800778c
 8001130:	080077b4 	.word	0x080077b4
 8001134:	080077d8 	.word	0x080077d8
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f850 	bl	80001e0 <strlen>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	1d39      	adds	r1, r7, #4
 8001146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114a:	48b6      	ldr	r0, [pc, #728]	@ (8001424 <main+0x94c>)
 800114c:	f004 fd9c 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8001150:	2201      	movs	r2, #1
 8001152:	49b5      	ldr	r1, [pc, #724]	@ (8001428 <main+0x950>)
 8001154:	48b3      	ldr	r0, [pc, #716]	@ (8001424 <main+0x94c>)
 8001156:	f004 fe22 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 800115a:	bf00      	nop
 800115c:	4bb3      	ldr	r3, [pc, #716]	@ (800142c <main+0x954>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0fb      	beq.n	800115c <main+0x684>
		  rcv_intpt_flag = 00;
 8001164:	4bb1      	ldr	r3, [pc, #708]	@ (800142c <main+0x954>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
		  starts[2] += (byte-'0')*10;
 800116a:	4bb1      	ldr	r3, [pc, #708]	@ (8001430 <main+0x958>)
 800116c:	6899      	ldr	r1, [r3, #8]
 800116e:	4bae      	ldr	r3, [pc, #696]	@ (8001428 <main+0x950>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	440b      	add	r3, r1
 8001180:	4aab      	ldr	r2, [pc, #684]	@ (8001430 <main+0x958>)
 8001182:	6093      	str	r3, [r2, #8]
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8001184:	2201      	movs	r2, #1
 8001186:	49a8      	ldr	r1, [pc, #672]	@ (8001428 <main+0x950>)
 8001188:	48a6      	ldr	r0, [pc, #664]	@ (8001424 <main+0x94c>)
 800118a:	f004 fe08 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 800118e:	bf00      	nop
 8001190:	4ba6      	ldr	r3, [pc, #664]	@ (800142c <main+0x954>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0fb      	beq.n	8001190 <main+0x6b8>
		  starts[2] += (byte-'0');
 8001198:	4ba5      	ldr	r3, [pc, #660]	@ (8001430 <main+0x958>)
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	4ba2      	ldr	r3, [pc, #648]	@ (8001428 <main+0x950>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	3b30      	subs	r3, #48	@ 0x30
 80011a2:	4413      	add	r3, r2
 80011a4:	4aa2      	ldr	r2, [pc, #648]	@ (8001430 <main+0x958>)
 80011a6:	6093      	str	r3, [r2, #8]
		  rcv_intpt_flag = 00;
 80011a8:	4ba0      	ldr	r3, [pc, #640]	@ (800142c <main+0x954>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]

		  sprintf((char*)txd_msg_buffer, "\r\nSECOND ZONE WALL CLOCK STOP TIME: ");
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	49a0      	ldr	r1, [pc, #640]	@ (8001434 <main+0x95c>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f005 fd6e 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f810 	bl	80001e0 <strlen>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	1d39      	adds	r1, r7, #4
 80011c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ca:	4896      	ldr	r0, [pc, #600]	@ (8001424 <main+0x94c>)
 80011cc:	f004 fd5c 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 80011d0:	2201      	movs	r2, #1
 80011d2:	4995      	ldr	r1, [pc, #596]	@ (8001428 <main+0x950>)
 80011d4:	4893      	ldr	r0, [pc, #588]	@ (8001424 <main+0x94c>)
 80011d6:	f004 fde2 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 80011da:	bf00      	nop
 80011dc:	4b93      	ldr	r3, [pc, #588]	@ (800142c <main+0x954>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0fb      	beq.n	80011dc <main+0x704>
		  rcv_intpt_flag = 00;
 80011e4:	4b91      	ldr	r3, [pc, #580]	@ (800142c <main+0x954>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
		  stops[2] += (byte-'0')*10;
 80011ea:	4b93      	ldr	r3, [pc, #588]	@ (8001438 <main+0x960>)
 80011ec:	6899      	ldr	r1, [r3, #8]
 80011ee:	4b8e      	ldr	r3, [pc, #568]	@ (8001428 <main+0x950>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	440b      	add	r3, r1
 8001200:	4a8d      	ldr	r2, [pc, #564]	@ (8001438 <main+0x960>)
 8001202:	6093      	str	r3, [r2, #8]
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	4988      	ldr	r1, [pc, #544]	@ (8001428 <main+0x950>)
 8001208:	4886      	ldr	r0, [pc, #536]	@ (8001424 <main+0x94c>)
 800120a:	f004 fdc8 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 800120e:	bf00      	nop
 8001210:	4b86      	ldr	r3, [pc, #536]	@ (800142c <main+0x954>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0fb      	beq.n	8001210 <main+0x738>
		  stops[2] += (byte-'0');
 8001218:	4b87      	ldr	r3, [pc, #540]	@ (8001438 <main+0x960>)
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	4b82      	ldr	r3, [pc, #520]	@ (8001428 <main+0x950>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	3b30      	subs	r3, #48	@ 0x30
 8001222:	4413      	add	r3, r2
 8001224:	4a84      	ldr	r2, [pc, #528]	@ (8001438 <main+0x960>)
 8001226:	6093      	str	r3, [r2, #8]
		  rcv_intpt_flag = 00;
 8001228:	4b80      	ldr	r3, [pc, #512]	@ (800142c <main+0x954>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]

		  sprintf((char*)txd_msg_buffer, "\r\nTHIRD ZONE WALL CLOCK START TIME: ");
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4982      	ldr	r1, [pc, #520]	@ (800143c <main+0x964>)
 8001232:	4618      	mov	r0, r3
 8001234:	f005 fd2e 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4618      	mov	r0, r3
 800123c:	f7fe ffd0 	bl	80001e0 <strlen>
 8001240:	4603      	mov	r3, r0
 8001242:	b29a      	uxth	r2, r3
 8001244:	1d39      	adds	r1, r7, #4
 8001246:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124a:	4876      	ldr	r0, [pc, #472]	@ (8001424 <main+0x94c>)
 800124c:	f004 fd1c 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	4975      	ldr	r1, [pc, #468]	@ (8001428 <main+0x950>)
 8001254:	4873      	ldr	r0, [pc, #460]	@ (8001424 <main+0x94c>)
 8001256:	f004 fda2 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 800125a:	bf00      	nop
 800125c:	4b73      	ldr	r3, [pc, #460]	@ (800142c <main+0x954>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0fb      	beq.n	800125c <main+0x784>
		  rcv_intpt_flag = 00;
 8001264:	4b71      	ldr	r3, [pc, #452]	@ (800142c <main+0x954>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
		  starts[3] += (byte-'0')*10;
 800126a:	4b71      	ldr	r3, [pc, #452]	@ (8001430 <main+0x958>)
 800126c:	68d9      	ldr	r1, [r3, #12]
 800126e:	4b6e      	ldr	r3, [pc, #440]	@ (8001428 <main+0x950>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	440b      	add	r3, r1
 8001280:	4a6b      	ldr	r2, [pc, #428]	@ (8001430 <main+0x958>)
 8001282:	60d3      	str	r3, [r2, #12]
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8001284:	2201      	movs	r2, #1
 8001286:	4968      	ldr	r1, [pc, #416]	@ (8001428 <main+0x950>)
 8001288:	4866      	ldr	r0, [pc, #408]	@ (8001424 <main+0x94c>)
 800128a:	f004 fd88 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 800128e:	bf00      	nop
 8001290:	4b66      	ldr	r3, [pc, #408]	@ (800142c <main+0x954>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0fb      	beq.n	8001290 <main+0x7b8>
		  starts[3] += (byte-'0');
 8001298:	4b65      	ldr	r3, [pc, #404]	@ (8001430 <main+0x958>)
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	4b62      	ldr	r3, [pc, #392]	@ (8001428 <main+0x950>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	3b30      	subs	r3, #48	@ 0x30
 80012a2:	4413      	add	r3, r2
 80012a4:	4a62      	ldr	r2, [pc, #392]	@ (8001430 <main+0x958>)
 80012a6:	60d3      	str	r3, [r2, #12]
		  rcv_intpt_flag = 00;
 80012a8:	4b60      	ldr	r3, [pc, #384]	@ (800142c <main+0x954>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]

		  sprintf((char*)txd_msg_buffer, "\r\nTHIRD ZONE WALL CLOCK STOP TIME: ");
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4963      	ldr	r1, [pc, #396]	@ (8001440 <main+0x968>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 fcee 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7fe ff90 	bl	80001e0 <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	1d39      	adds	r1, r7, #4
 80012c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ca:	4856      	ldr	r0, [pc, #344]	@ (8001424 <main+0x94c>)
 80012cc:	f004 fcdc 	bl	8005c88 <HAL_UART_Transmit>
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 80012d0:	2201      	movs	r2, #1
 80012d2:	4955      	ldr	r1, [pc, #340]	@ (8001428 <main+0x950>)
 80012d4:	4853      	ldr	r0, [pc, #332]	@ (8001424 <main+0x94c>)
 80012d6:	f004 fd62 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 80012da:	bf00      	nop
 80012dc:	4b53      	ldr	r3, [pc, #332]	@ (800142c <main+0x954>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0fb      	beq.n	80012dc <main+0x804>
		  rcv_intpt_flag = 00;
 80012e4:	4b51      	ldr	r3, [pc, #324]	@ (800142c <main+0x954>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
		  stops[3] += (byte-'0')*10;
 80012ea:	4b53      	ldr	r3, [pc, #332]	@ (8001438 <main+0x960>)
 80012ec:	68d9      	ldr	r1, [r3, #12]
 80012ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001428 <main+0x950>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	440b      	add	r3, r1
 8001300:	4a4d      	ldr	r2, [pc, #308]	@ (8001438 <main+0x960>)
 8001302:	60d3      	str	r3, [r2, #12]
		  HAL_UART_Receive_IT(&huart6, &byte, 1);
 8001304:	2201      	movs	r2, #1
 8001306:	4948      	ldr	r1, [pc, #288]	@ (8001428 <main+0x950>)
 8001308:	4846      	ldr	r0, [pc, #280]	@ (8001424 <main+0x94c>)
 800130a:	f004 fd48 	bl	8005d9e <HAL_UART_Receive_IT>
		  while(rcv_intpt_flag == 00) {};
 800130e:	bf00      	nop
 8001310:	4b46      	ldr	r3, [pc, #280]	@ (800142c <main+0x954>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0fb      	beq.n	8001310 <main+0x838>
		  stops[3] += (byte-'0');
 8001318:	4b47      	ldr	r3, [pc, #284]	@ (8001438 <main+0x960>)
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	4b42      	ldr	r3, [pc, #264]	@ (8001428 <main+0x950>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	3b30      	subs	r3, #48	@ 0x30
 8001322:	4413      	add	r3, r2
 8001324:	4a44      	ldr	r2, [pc, #272]	@ (8001438 <main+0x960>)
 8001326:	60d3      	str	r3, [r2, #12]
		  rcv_intpt_flag = 00;
 8001328:	4b40      	ldr	r3, [pc, #256]	@ (800142c <main+0x954>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]

		  setup_mode = 0;
 800132e:	4b45      	ldr	r3, [pc, #276]	@ (8001444 <main+0x96c>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]

		  sprintf((char*)txd_msg_buffer, "\r\nSETUP MODE COMPLETE!");
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4944      	ldr	r1, [pc, #272]	@ (8001448 <main+0x970>)
 8001338:	4618      	mov	r0, r3
 800133a:	f005 fcab 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4618      	mov	r0, r3
 8001342:	f7fe ff4d 	bl	80001e0 <strlen>
 8001346:	4603      	mov	r3, r0
 8001348:	b29a      	uxth	r2, r3
 800134a:	1d39      	adds	r1, r7, #4
 800134c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001350:	4834      	ldr	r0, [pc, #208]	@ (8001424 <main+0x94c>)
 8001352:	f004 fc99 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nPARAMETERS: ");
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	493c      	ldr	r1, [pc, #240]	@ (800144c <main+0x974>)
 800135a:	4618      	mov	r0, r3
 800135c:	f005 fc9a 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4618      	mov	r0, r3
 8001364:	f7fe ff3c 	bl	80001e0 <strlen>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	1d39      	adds	r1, r7, #4
 800136e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001372:	482c      	ldr	r0, [pc, #176]	@ (8001424 <main+0x94c>)
 8001374:	f004 fc88 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nCONNECTION 1: %d", connections[0]);
 8001378:	4b35      	ldr	r3, [pc, #212]	@ (8001450 <main+0x978>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4935      	ldr	r1, [pc, #212]	@ (8001454 <main+0x97c>)
 8001380:	4618      	mov	r0, r3
 8001382:	f005 fc87 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4618      	mov	r0, r3
 800138a:	f7fe ff29 	bl	80001e0 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	b29a      	uxth	r2, r3
 8001392:	1d39      	adds	r1, r7, #4
 8001394:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001398:	4822      	ldr	r0, [pc, #136]	@ (8001424 <main+0x94c>)
 800139a:	f004 fc75 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nPWM 1: %d", pwms[0]);
 800139e:	4b2e      	ldr	r3, [pc, #184]	@ (8001458 <main+0x980>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	492d      	ldr	r1, [pc, #180]	@ (800145c <main+0x984>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f005 fc74 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7fe ff16 	bl	80001e0 <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	1d39      	adds	r1, r7, #4
 80013ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013be:	4819      	ldr	r0, [pc, #100]	@ (8001424 <main+0x94c>)
 80013c0:	f004 fc62 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nCONNECTION 2: %d", connections[1]);
 80013c4:	4b22      	ldr	r3, [pc, #136]	@ (8001450 <main+0x978>)
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4925      	ldr	r1, [pc, #148]	@ (8001460 <main+0x988>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f005 fc61 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7fe ff03 	bl	80001e0 <strlen>
 80013da:	4603      	mov	r3, r0
 80013dc:	b29a      	uxth	r2, r3
 80013de:	1d39      	adds	r1, r7, #4
 80013e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e4:	480f      	ldr	r0, [pc, #60]	@ (8001424 <main+0x94c>)
 80013e6:	f004 fc4f 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nPWM 2: %d", pwms[1]);
 80013ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <main+0x980>)
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	491c      	ldr	r1, [pc, #112]	@ (8001464 <main+0x98c>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 fc4e 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7fe fef0 	bl	80001e0 <strlen>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	1d39      	adds	r1, r7, #4
 8001406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140a:	4806      	ldr	r0, [pc, #24]	@ (8001424 <main+0x94c>)
 800140c:	f004 fc3c 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nCONNECTION 3: %d", connections[2]);
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <main+0x978>)
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	4914      	ldr	r1, [pc, #80]	@ (8001468 <main+0x990>)
 8001418:	4618      	mov	r0, r3
 800141a:	f005 fc3b 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	e024      	b.n	800146c <main+0x994>
 8001422:	bf00      	nop
 8001424:	20000230 	.word	0x20000230
 8001428:	2000027f 	.word	0x2000027f
 800142c:	2000027e 	.word	0x2000027e
 8001430:	200002a0 	.word	0x200002a0
 8001434:	08007800 	.word	0x08007800
 8001438:	200002b0 	.word	0x200002b0
 800143c:	08007828 	.word	0x08007828
 8001440:	08007850 	.word	0x08007850
 8001444:	20000000 	.word	0x20000000
 8001448:	08007874 	.word	0x08007874
 800144c:	0800788c 	.word	0x0800788c
 8001450:	20000280 	.word	0x20000280
 8001454:	0800789c 	.word	0x0800789c
 8001458:	20000290 	.word	0x20000290
 800145c:	080078b0 	.word	0x080078b0
 8001460:	080078bc 	.word	0x080078bc
 8001464:	080078d0 	.word	0x080078d0
 8001468:	080078dc 	.word	0x080078dc
 800146c:	4618      	mov	r0, r3
 800146e:	f7fe feb7 	bl	80001e0 <strlen>
 8001472:	4603      	mov	r3, r0
 8001474:	b29a      	uxth	r2, r3
 8001476:	1d39      	adds	r1, r7, #4
 8001478:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800147c:	48bf      	ldr	r0, [pc, #764]	@ (800177c <main+0xca4>)
 800147e:	f004 fc03 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nPWM 3: %d", pwms[2]);
 8001482:	4bbf      	ldr	r3, [pc, #764]	@ (8001780 <main+0xca8>)
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	49be      	ldr	r1, [pc, #760]	@ (8001784 <main+0xcac>)
 800148a:	4618      	mov	r0, r3
 800148c:	f005 fc02 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe fea4 	bl	80001e0 <strlen>
 8001498:	4603      	mov	r3, r0
 800149a:	b29a      	uxth	r2, r3
 800149c:	1d39      	adds	r1, r7, #4
 800149e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014a2:	48b6      	ldr	r0, [pc, #728]	@ (800177c <main+0xca4>)
 80014a4:	f004 fbf0 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nCONNECTION 4: %d", connections[3]);
 80014a8:	4bb7      	ldr	r3, [pc, #732]	@ (8001788 <main+0xcb0>)
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	49b7      	ldr	r1, [pc, #732]	@ (800178c <main+0xcb4>)
 80014b0:	4618      	mov	r0, r3
 80014b2:	f005 fbef 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe fe91 	bl	80001e0 <strlen>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	1d39      	adds	r1, r7, #4
 80014c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c8:	48ac      	ldr	r0, [pc, #688]	@ (800177c <main+0xca4>)
 80014ca:	f004 fbdd 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nPWM 4: %d", pwms[3]);
 80014ce:	4bac      	ldr	r3, [pc, #688]	@ (8001780 <main+0xca8>)
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	49ae      	ldr	r1, [pc, #696]	@ (8001790 <main+0xcb8>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f005 fbdc 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe fe7e 	bl	80001e0 <strlen>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	1d39      	adds	r1, r7, #4
 80014ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ee:	48a3      	ldr	r0, [pc, #652]	@ (800177c <main+0xca4>)
 80014f0:	f004 fbca 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nSTART INLET: %d", starts[0]);
 80014f4:	4ba7      	ldr	r3, [pc, #668]	@ (8001794 <main+0xcbc>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	49a7      	ldr	r1, [pc, #668]	@ (8001798 <main+0xcc0>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f005 fbc9 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe fe6b 	bl	80001e0 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	b29a      	uxth	r2, r3
 800150e:	1d39      	adds	r1, r7, #4
 8001510:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001514:	4899      	ldr	r0, [pc, #612]	@ (800177c <main+0xca4>)
 8001516:	f004 fbb7 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nSTOP INLET: %d", stops[0]);
 800151a:	4ba0      	ldr	r3, [pc, #640]	@ (800179c <main+0xcc4>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	499f      	ldr	r1, [pc, #636]	@ (80017a0 <main+0xcc8>)
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fbb6 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fe58 	bl	80001e0 <strlen>
 8001530:	4603      	mov	r3, r0
 8001532:	b29a      	uxth	r2, r3
 8001534:	1d39      	adds	r1, r7, #4
 8001536:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800153a:	4890      	ldr	r0, [pc, #576]	@ (800177c <main+0xca4>)
 800153c:	f004 fba4 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nSTART ZONE 1: %d", starts[1]);
 8001540:	4b94      	ldr	r3, [pc, #592]	@ (8001794 <main+0xcbc>)
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4997      	ldr	r1, [pc, #604]	@ (80017a4 <main+0xccc>)
 8001548:	4618      	mov	r0, r3
 800154a:	f005 fba3 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe fe45 	bl	80001e0 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	1d39      	adds	r1, r7, #4
 800155c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001560:	4886      	ldr	r0, [pc, #536]	@ (800177c <main+0xca4>)
 8001562:	f004 fb91 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nSTOP ZONE 1 %d", stops[1]);
 8001566:	4b8d      	ldr	r3, [pc, #564]	@ (800179c <main+0xcc4>)
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	498e      	ldr	r1, [pc, #568]	@ (80017a8 <main+0xcd0>)
 800156e:	4618      	mov	r0, r3
 8001570:	f005 fb90 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe fe32 	bl	80001e0 <strlen>
 800157c:	4603      	mov	r3, r0
 800157e:	b29a      	uxth	r2, r3
 8001580:	1d39      	adds	r1, r7, #4
 8001582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001586:	487d      	ldr	r0, [pc, #500]	@ (800177c <main+0xca4>)
 8001588:	f004 fb7e 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nSTART ZONE 2: %d", starts[2]);
 800158c:	4b81      	ldr	r3, [pc, #516]	@ (8001794 <main+0xcbc>)
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	4986      	ldr	r1, [pc, #536]	@ (80017ac <main+0xcd4>)
 8001594:	4618      	mov	r0, r3
 8001596:	f005 fb7d 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fe1f 	bl	80001e0 <strlen>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	1d39      	adds	r1, r7, #4
 80015a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ac:	4873      	ldr	r0, [pc, #460]	@ (800177c <main+0xca4>)
 80015ae:	f004 fb6b 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nSTOP ZONE 2: %d", stops[2]);
 80015b2:	4b7a      	ldr	r3, [pc, #488]	@ (800179c <main+0xcc4>)
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	497d      	ldr	r1, [pc, #500]	@ (80017b0 <main+0xcd8>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f005 fb6a 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe0c 	bl	80001e0 <strlen>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	1d39      	adds	r1, r7, #4
 80015ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d2:	486a      	ldr	r0, [pc, #424]	@ (800177c <main+0xca4>)
 80015d4:	f004 fb58 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nSTART ZONE 3: %d", starts[3]);
 80015d8:	4b6e      	ldr	r3, [pc, #440]	@ (8001794 <main+0xcbc>)
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4975      	ldr	r1, [pc, #468]	@ (80017b4 <main+0xcdc>)
 80015e0:	4618      	mov	r0, r3
 80015e2:	f005 fb57 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe fdf9 	bl	80001e0 <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	1d39      	adds	r1, r7, #4
 80015f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f8:	4860      	ldr	r0, [pc, #384]	@ (800177c <main+0xca4>)
 80015fa:	f004 fb45 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nSTOP ZONE 3: %d", stops[3]);
 80015fe:	4b67      	ldr	r3, [pc, #412]	@ (800179c <main+0xcc4>)
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	496c      	ldr	r1, [pc, #432]	@ (80017b8 <main+0xce0>)
 8001606:	4618      	mov	r0, r3
 8001608:	f005 fb44 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fde6 	bl	80001e0 <strlen>
 8001614:	4603      	mov	r3, r0
 8001616:	b29a      	uxth	r2, r3
 8001618:	1d39      	adds	r1, r7, #4
 800161a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161e:	4857      	ldr	r0, [pc, #348]	@ (800177c <main+0xca4>)
 8001620:	f004 fb32 	bl	8005c88 <HAL_UART_Transmit>

		  sprintf((char*)txd_msg_buffer, "\r\nPRESS BLUE PUSHBUTTON TO CONTINUE");
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4965      	ldr	r1, [pc, #404]	@ (80017bc <main+0xce4>)
 8001628:	4618      	mov	r0, r3
 800162a:	f005 fb33 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fdd5 	bl	80001e0 <strlen>
 8001636:	4603      	mov	r3, r0
 8001638:	b29a      	uxth	r2, r3
 800163a:	1d39      	adds	r1, r7, #4
 800163c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001640:	484e      	ldr	r0, [pc, #312]	@ (800177c <main+0xca4>)
 8001642:	f004 fb21 	bl	8005c88 <HAL_UART_Transmit>


		  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0); // Set priority for EXTI lines 10-15
 8001646:	2200      	movs	r2, #0
 8001648:	2102      	movs	r1, #2
 800164a:	2028      	movs	r0, #40	@ 0x28
 800164c:	f001 ff8f 	bl	800356e <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001650:	2028      	movs	r0, #40	@ 0x28
 8001652:	f001 ffa8 	bl	80035a6 <HAL_NVIC_EnableIRQ>

		  while (!button_pushed) {
 8001656:	e011      	b.n	800167c <main+0xba4>
			  HAL_GPIO_WritePin(GPIOC, GRN_Pin, GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	2140      	movs	r1, #64	@ 0x40
 800165c:	4858      	ldr	r0, [pc, #352]	@ (80017c0 <main+0xce8>)
 800165e:	f002 f9d3 	bl	8003a08 <HAL_GPIO_WritePin>

			  HAL_Delay(500);
 8001662:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001666:	f001 faa1 	bl	8002bac <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOC, GRN_Pin, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	2140      	movs	r1, #64	@ 0x40
 800166e:	4854      	ldr	r0, [pc, #336]	@ (80017c0 <main+0xce8>)
 8001670:	f002 f9ca 	bl	8003a08 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 8001674:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001678:	f001 fa98 	bl	8002bac <HAL_Delay>
		  while (!button_pushed) {
 800167c:	4b51      	ldr	r3, [pc, #324]	@ (80017c4 <main+0xcec>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0e9      	beq.n	8001658 <main+0xb80>

		  }

		  change_pipe();
 8001684:	f7ff f8dc 	bl	8000840 <change_pipe>

		  HAL_TIM_Base_Start_IT(&htim5);
 8001688:	484f      	ldr	r0, [pc, #316]	@ (80017c8 <main+0xcf0>)
 800168a:	f002 ff31 	bl	80044f0 <HAL_TIM_Base_Start_IT>
		  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800168e:	2100      	movs	r1, #0
 8001690:	484e      	ldr	r0, [pc, #312]	@ (80017cc <main+0xcf4>)
 8001692:	f002 ffdf 	bl	8004654 <HAL_TIM_PWM_Start>

		  reset_outputs();
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	469c      	mov	ip, r3
 800169a:	f000 f95b 	bl	8001954 <reset_outputs.7>

		  sprintf((char*)txd_msg_buffer, "\r\nHOURS | MINS | ZONE | MOTOR SPEED | MOTOR RPM | RESERVOIR DEPTH");
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	494b      	ldr	r1, [pc, #300]	@ (80017d0 <main+0xcf8>)
 80016a2:	4618      	mov	r0, r3
 80016a4:	f005 faf6 	bl	8006c94 <siprintf>
		  HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fd98 	bl	80001e0 <strlen>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	1d39      	adds	r1, r7, #4
 80016b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ba:	4830      	ldr	r0, [pc, #192]	@ (800177c <main+0xca4>)
 80016bc:	f004 fae4 	bl	8005c88 <HAL_UART_Transmit>
		  read_depth();
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	469c      	mov	ip, r3
 80016c4:	f000 f8cc 	bl	8001860 <read_depth.3>
		  print_diagnostics();
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	469c      	mov	ip, r3
 80016cc:	f000 fa64 	bl	8001b98 <print_diagnostics.6>
 80016d0:	e098      	b.n	8001804 <main+0xd2c>

	  }
	  else {

		  //ok we have all of our settings. Now we must start the inlet
		 set_led(connections[active_zone]);
 80016d2:	4b40      	ldr	r3, [pc, #256]	@ (80017d4 <main+0xcfc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001788 <main+0xcb0>)
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	1d3a      	adds	r2, r7, #4
 80016de:	4694      	mov	ip, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f9ff 	bl	8001ae4 <set_led.0>
		 set_servo(connections[active_zone]);
 80016e6:	4b3b      	ldr	r3, [pc, #236]	@ (80017d4 <main+0xcfc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a27      	ldr	r2, [pc, #156]	@ (8001788 <main+0xcb0>)
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f0:	1d3a      	adds	r2, r7, #4
 80016f2:	4694      	mov	ip, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f9c5 	bl	8001a84 <set_servo.1>
		 set_motor(pwms[active_zone], active_zone != 0);
 80016fa:	4b36      	ldr	r3, [pc, #216]	@ (80017d4 <main+0xcfc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a20      	ldr	r2, [pc, #128]	@ (8001780 <main+0xca8>)
 8001700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b33      	ldr	r3, [pc, #204]	@ (80017d4 <main+0xcfc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	bf14      	ite	ne
 800170e:	2301      	movne	r3, #1
 8001710:	2300      	moveq	r3, #0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	4619      	mov	r1, r3
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	469c      	mov	ip, r3
 800171a:	4610      	mov	r0, r2
 800171c:	f000 f93c 	bl	8001998 <set_motor.2>
		 //keep checking for hour change
		 if (active_zone != -1) {
 8001720:	4b2c      	ldr	r3, [pc, #176]	@ (80017d4 <main+0xcfc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d056      	beq.n	80017d8 <main+0xd00>
			 set_led(connections[active_zone]);
 800172a:	4b2a      	ldr	r3, [pc, #168]	@ (80017d4 <main+0xcfc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a16      	ldr	r2, [pc, #88]	@ (8001788 <main+0xcb0>)
 8001730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001734:	1d3a      	adds	r2, r7, #4
 8001736:	4694      	mov	ip, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f9d3 	bl	8001ae4 <set_led.0>
			 set_servo(connections[active_zone]);
 800173e:	4b25      	ldr	r3, [pc, #148]	@ (80017d4 <main+0xcfc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a11      	ldr	r2, [pc, #68]	@ (8001788 <main+0xcb0>)
 8001744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001748:	1d3a      	adds	r2, r7, #4
 800174a:	4694      	mov	ip, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f999 	bl	8001a84 <set_servo.1>
			 set_motor(pwms[active_zone], active_zone!=0);
 8001752:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <main+0xcfc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <main+0xca8>)
 8001758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <main+0xcfc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf14      	ite	ne
 8001766:	2301      	movne	r3, #1
 8001768:	2300      	moveq	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	4619      	mov	r1, r3
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	469c      	mov	ip, r3
 8001772:	4610      	mov	r0, r2
 8001774:	f000 f910 	bl	8001998 <set_motor.2>
 8001778:	e032      	b.n	80017e0 <main+0xd08>
 800177a:	bf00      	nop
 800177c:	20000230 	.word	0x20000230
 8001780:	20000290 	.word	0x20000290
 8001784:	080078f0 	.word	0x080078f0
 8001788:	20000280 	.word	0x20000280
 800178c:	080078fc 	.word	0x080078fc
 8001790:	08007910 	.word	0x08007910
 8001794:	200002a0 	.word	0x200002a0
 8001798:	0800791c 	.word	0x0800791c
 800179c:	200002b0 	.word	0x200002b0
 80017a0:	08007930 	.word	0x08007930
 80017a4:	08007944 	.word	0x08007944
 80017a8:	08007958 	.word	0x08007958
 80017ac:	0800796c 	.word	0x0800796c
 80017b0:	08007980 	.word	0x08007980
 80017b4:	08007994 	.word	0x08007994
 80017b8:	080079a8 	.word	0x080079a8
 80017bc:	080079bc 	.word	0x080079bc
 80017c0:	40020800 	.word	0x40020800
 80017c4:	200002c0 	.word	0x200002c0
 80017c8:	200001a0 	.word	0x200001a0
 80017cc:	20000158 	.word	0x20000158
 80017d0:	080079e0 	.word	0x080079e0
 80017d4:	200002d4 	.word	0x200002d4
		 } else {
			 reset_outputs();
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	469c      	mov	ip, r3
 80017dc:	f000 f8ba 	bl	8001954 <reset_outputs.7>
		 }
		 read_depth();
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	469c      	mov	ip, r3
 80017e4:	f000 f83c 	bl	8001860 <read_depth.3>
		 while (!wall_clock_hr_update_flag) {}
 80017e8:	bf00      	nop
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <main+0xd44>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0fb      	beq.n	80017ea <main+0xd12>

		 change_pipe();
 80017f2:	f7ff f825 	bl	8000840 <change_pipe>
		 print_diagnostics();
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	469c      	mov	ip, r3
 80017fa:	f000 f9cd 	bl	8001b98 <print_diagnostics.6>

		 wall_clock_hr_update_flag = 0;
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <main+0xd44>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
		}

	  if (clock_hours >= 24) {
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <main+0xd48>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b17      	cmp	r3, #23
 800180c:	f67f a9b7 	bls.w	8000b7e <main+0xa6>
		  reset_outputs();
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	469c      	mov	ip, r3
 8001814:	f000 f89e 	bl	8001954 <reset_outputs.7>
		  while (1) {}
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <main+0xd40>
 800181c:	200002d0 	.word	0x200002d0
 8001820:	200002c8 	.word	0x200002c8

08001824 <HCSR04_TRIG_PULSE.4>:
	void HCSR04_TRIG_PULSE(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	f8c7 c004 	str.w	ip, [r7, #4]
				HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_SET);
 800182e:	2201      	movs	r2, #1
 8001830:	2102      	movs	r1, #2
 8001832:	480a      	ldr	r0, [pc, #40]	@ (800185c <HCSR04_TRIG_PULSE.4+0x38>)
 8001834:	f002 f8e8 	bl	8003a08 <HAL_GPIO_WritePin>
				for (int j=0; j!=15; j++) {};
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	e002      	b.n	8001844 <HCSR04_TRIG_PULSE.4+0x20>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3301      	adds	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	d1f9      	bne.n	800183e <HCSR04_TRIG_PULSE.4+0x1a>
				HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	2102      	movs	r1, #2
 800184e:	4803      	ldr	r0, [pc, #12]	@ (800185c <HCSR04_TRIG_PULSE.4+0x38>)
 8001850:	f002 f8da 	bl	8003a08 <HAL_GPIO_WritePin>
			}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40020400 	.word	0x40020400

08001860 <read_depth.3>:
	void read_depth(void) {
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4664      	mov	r4, ip
 8001868:	f8c7 c004 	str.w	ip, [r7, #4]
			hcsr04_Rx_flag = 0;
 800186c:	4b2f      	ldr	r3, [pc, #188]	@ (800192c <read_depth.3+0xcc>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
			 first_edge = 0;
 8001872:	4b2f      	ldr	r3, [pc, #188]	@ (8001930 <read_depth.3+0xd0>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
			 time_edge1 = 0;
 8001878:	4b2e      	ldr	r3, [pc, #184]	@ (8001934 <read_depth.3+0xd4>)
 800187a:	2200      	movs	r2, #0
 800187c:	801a      	strh	r2, [r3, #0]
			 time_edge2 = 0;
 800187e:	4b2e      	ldr	r3, [pc, #184]	@ (8001938 <read_depth.3+0xd8>)
 8001880:	2200      	movs	r2, #0
 8001882:	801a      	strh	r2, [r3, #0]
			 time_diff = 0;
 8001884:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <read_depth.3+0xdc>)
 8001886:	2200      	movs	r2, #0
 8001888:	801a      	strh	r2, [r3, #0]
			 distance = 0;
 800188a:	4b2d      	ldr	r3, [pc, #180]	@ (8001940 <read_depth.3+0xe0>)
 800188c:	2200      	movs	r2, #0
 800188e:	801a      	strh	r2, [r3, #0]
			 HCSR04_TRIG_PULSE();
 8001890:	46a4      	mov	ip, r4
 8001892:	f7ff ffc7 	bl	8001824 <HCSR04_TRIG_PULSE.4>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001896:	2201      	movs	r2, #1
 8001898:	2110      	movs	r1, #16
 800189a:	482a      	ldr	r0, [pc, #168]	@ (8001944 <read_depth.3+0xe4>)
 800189c:	f002 f8b4 	bl	8003a08 <HAL_GPIO_WritePin>
			 while(hcsr04_Rx_flag == 0){
 80018a0:	bf00      	nop
 80018a2:	4b22      	ldr	r3, [pc, #136]	@ (800192c <read_depth.3+0xcc>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0fa      	beq.n	80018a2 <read_depth.3+0x42>
			 time_diff = time_edge2 - time_edge1;
 80018ac:	4b22      	ldr	r3, [pc, #136]	@ (8001938 <read_depth.3+0xd8>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <read_depth.3+0xd4>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <read_depth.3+0xdc>)
 80018be:	801a      	strh	r2, [r3, #0]
			 depth = 100 - time_diff/58 * 5;
 80018c0:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <read_depth.3+0xdc>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	4a20      	ldr	r2, [pc, #128]	@ (8001948 <read_depth.3+0xe8>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	4613      	mov	r3, r2
 80018d2:	079b      	lsls	r3, r3, #30
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	3364      	adds	r3, #100	@ 0x64
 80018dc:	4a1b      	ldr	r2, [pc, #108]	@ (800194c <read_depth.3+0xec>)
 80018de:	6013      	str	r3, [r2, #0]
			 if (depth < 0) {
 80018e0:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <read_depth.3+0xec>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	da01      	bge.n	80018ec <read_depth.3+0x8c>
				 emergency_mode();
 80018e8:	f7fe ffea 	bl	80008c0 <emergency_mode>
			 set_timer((int)(depth/10), depth%10);
 80018ec:	4b17      	ldr	r3, [pc, #92]	@ (800194c <read_depth.3+0xec>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a17      	ldr	r2, [pc, #92]	@ (8001950 <read_depth.3+0xf0>)
 80018f2:	fb82 1203 	smull	r1, r2, r2, r3
 80018f6:	1092      	asrs	r2, r2, #2
 80018f8:	17db      	asrs	r3, r3, #31
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	b2d8      	uxtb	r0, r3
 80018fe:	4b13      	ldr	r3, [pc, #76]	@ (800194c <read_depth.3+0xec>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <read_depth.3+0xf0>)
 8001904:	fb83 1302 	smull	r1, r3, r3, r2
 8001908:	1099      	asrs	r1, r3, #2
 800190a:	17d3      	asrs	r3, r2, #31
 800190c:	1ac9      	subs	r1, r1, r3
 800190e:	460b      	mov	r3, r1
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	1ad1      	subs	r1, r2, r3
 8001918:	b2cb      	uxtb	r3, r1
 800191a:	46a4      	mov	ip, r4
 800191c:	4619      	mov	r1, r3
 800191e:	f7ff f817 	bl	8000950 <set_timer.5>
		}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	20000278 	.word	0x20000278
 8001930:	20000279 	.word	0x20000279
 8001934:	2000027a 	.word	0x2000027a
 8001938:	2000027c 	.word	0x2000027c
 800193c:	200002de 	.word	0x200002de
 8001940:	200002e0 	.word	0x200002e0
 8001944:	40020400 	.word	0x40020400
 8001948:	8d3dcb09 	.word	0x8d3dcb09
 800194c:	20000004 	.word	0x20000004
 8001950:	66666667 	.word	0x66666667

08001954 <reset_outputs.7>:
	void reset_outputs() {
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	f8c7 c004 	str.w	ip, [r7, #4]
		TIM1->CCR2 = 0;
 800195e:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <reset_outputs.7+0x3c>)
 8001960:	2200      	movs	r2, #0
 8001962:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR1 = 0;
 8001964:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <reset_outputs.7+0x3c>)
 8001966:	2200      	movs	r2, #0
 8001968:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOC, GRN_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2140      	movs	r1, #64	@ 0x40
 800196e:	4809      	ldr	r0, [pc, #36]	@ (8001994 <reset_outputs.7+0x40>)
 8001970:	f002 f84a 	bl	8003a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, RED_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	2120      	movs	r1, #32
 8001978:	4806      	ldr	r0, [pc, #24]	@ (8001994 <reset_outputs.7+0x40>)
 800197a:	f002 f845 	bl	8003a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, BLU_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	2180      	movs	r1, #128	@ 0x80
 8001982:	4804      	ldr	r0, [pc, #16]	@ (8001994 <reset_outputs.7+0x40>)
 8001984:	f002 f840 	bl	8003a08 <HAL_GPIO_WritePin>
	}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40010000 	.word	0x40010000
 8001994:	40020800 	.word	0x40020800

08001998 <set_motor.2>:
	void set_motor(uint8_t percent, int forward) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	f8c7 c004 	str.w	ip, [r7, #4]
		rpm_mins = 1;
 80019a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a68 <set_motor.2+0xd0>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	801a      	strh	r2, [r3, #0]
		rpm_tick_count = 0;
 80019ae:	4b2f      	ldr	r3, [pc, #188]	@ (8001a6c <set_motor.2+0xd4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
		if (percent == 0) manual_control = 1;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <set_motor.2+0x2a>
 80019ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001a70 <set_motor.2+0xd8>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	e002      	b.n	80019c8 <set_motor.2+0x30>
		else manual_control = 0;
 80019c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a70 <set_motor.2+0xd8>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
		if (manual_control) {
 80019c8:	4b29      	ldr	r3, [pc, #164]	@ (8001a70 <set_motor.2+0xd8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d022      	beq.n	8001a16 <set_motor.2+0x7e>
			ADC_Select_CH(1);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7fe fdd5 	bl	8000580 <ADC_Select_CH>
			HAL_ADC_Start(&hadc1);
 80019d6:	4827      	ldr	r0, [pc, #156]	@ (8001a74 <set_motor.2+0xdc>)
 80019d8:	f001 f950 	bl	8002c7c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1000);
 80019dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019e0:	4824      	ldr	r0, [pc, #144]	@ (8001a74 <set_motor.2+0xdc>)
 80019e2:	f001 fa32 	bl	8002e4a <HAL_ADC_PollForConversion>
			ADC_CH9 = HAL_ADC_GetValue(&hadc1);
 80019e6:	4823      	ldr	r0, [pc, #140]	@ (8001a74 <set_motor.2+0xdc>)
 80019e8:	f001 faba 	bl	8002f60 <HAL_ADC_GetValue>
 80019ec:	4603      	mov	r3, r0
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <set_motor.2+0xe0>)
 80019f2:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop(&hadc1);
 80019f4:	481f      	ldr	r0, [pc, #124]	@ (8001a74 <set_motor.2+0xdc>)
 80019f6:	f001 f9f5 	bl	8002de4 <HAL_ADC_Stop>
			percent = ADC_CH9 * 100 / 255;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <set_motor.2+0xe0>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	2364      	movs	r3, #100	@ 0x64
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	4a1d      	ldr	r2, [pc, #116]	@ (8001a7c <set_motor.2+0xe4>)
 8001a08:	fb82 1203 	smull	r1, r2, r2, r3
 8001a0c:	441a      	add	r2, r3
 8001a0e:	11d2      	asrs	r2, r2, #7
 8001a10:	17db      	asrs	r3, r3, #31
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	73fb      	strb	r3, [r7, #15]
		if (forward) {
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d010      	beq.n	8001a3e <set_motor.2+0xa6>
			TIM1->CCR2 = 0;
 8001a1c:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <set_motor.2+0xe8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM1->CCR1 = percent ? (uint32_t)(2000*percent/100) - 1 : 0;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <set_motor.2+0x9e>
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	3b01      	subs	r3, #1
 8001a34:	e000      	b.n	8001a38 <set_motor.2+0xa0>
 8001a36:	2300      	movs	r3, #0
 8001a38:	4a11      	ldr	r2, [pc, #68]	@ (8001a80 <set_motor.2+0xe8>)
 8001a3a:	6353      	str	r3, [r2, #52]	@ 0x34
	}
 8001a3c:	e00f      	b.n	8001a5e <set_motor.2+0xc6>
			TIM1->CCR1 = 0;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <set_motor.2+0xe8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = percent ? (uint32_t)(2000*percent/100) - 1 : 0;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <set_motor.2+0xc0>
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	3b01      	subs	r3, #1
 8001a56:	e000      	b.n	8001a5a <set_motor.2+0xc2>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	4a09      	ldr	r2, [pc, #36]	@ (8001a80 <set_motor.2+0xe8>)
 8001a5c:	6393      	str	r3, [r2, #56]	@ 0x38
	}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200002ca 	.word	0x200002ca
 8001a6c:	200002c4 	.word	0x200002c4
 8001a70:	200002d8 	.word	0x200002d8
 8001a74:	20000080 	.word	0x20000080
 8001a78:	200002dc 	.word	0x200002dc
 8001a7c:	80808081 	.word	0x80808081
 8001a80:	40010000 	.word	0x40010000

08001a84 <set_servo.1>:
	void set_servo(int pipe) {
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	f8c7 c000 	str.w	ip, [r7]
		switch(pipe){
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d81e      	bhi.n	8001ad4 <set_servo.1+0x50>
 8001a96:	a201      	add	r2, pc, #4	@ (adr r2, 8001a9c <set_servo.1+0x18>)
 8001a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9c:	08001aad 	.word	0x08001aad
 8001aa0:	08001ab7 	.word	0x08001ab7
 8001aa4:	08001ac1 	.word	0x08001ac1
 8001aa8:	08001acb 	.word	0x08001acb
				TIM4->CCR1 = 500;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <set_servo.1+0x5c>)
 8001aae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ab2:	635a      	str	r2, [r3, #52]	@ 0x34
				break;
 8001ab4:	e00e      	b.n	8001ad4 <set_servo.1+0x50>
				TIM4->CCR1 = 1167;
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <set_servo.1+0x5c>)
 8001ab8:	f240 428f 	movw	r2, #1167	@ 0x48f
 8001abc:	635a      	str	r2, [r3, #52]	@ 0x34
				break;
 8001abe:	e009      	b.n	8001ad4 <set_servo.1+0x50>
				TIM4->CCR1 = 1833;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	@ (8001ae0 <set_servo.1+0x5c>)
 8001ac2:	f240 7229 	movw	r2, #1833	@ 0x729
 8001ac6:	635a      	str	r2, [r3, #52]	@ 0x34
				break;
 8001ac8:	e004      	b.n	8001ad4 <set_servo.1+0x50>
				TIM4->CCR1 = 2500;
 8001aca:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <set_servo.1+0x5c>)
 8001acc:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001ad0:	635a      	str	r2, [r3, #52]	@ 0x34
				break;
 8001ad2:	bf00      	nop
	}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	40000800 	.word	0x40000800

08001ae4 <set_led.0>:
	void set_led(int pipe) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	f8c7 c000 	str.w	ip, [r7]
		switch(pipe) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d84a      	bhi.n	8001b8c <set_led.0+0xa8>
 8001af6:	a201      	add	r2, pc, #4	@ (adr r2, 8001afc <set_led.0+0x18>)
 8001af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afc:	08001b0d 	.word	0x08001b0d
 8001b00:	08001b2d 	.word	0x08001b2d
 8001b04:	08001b4d 	.word	0x08001b4d
 8001b08:	08001b6d 	.word	0x08001b6d
		 		 HAL_GPIO_WritePin(GPIOC, GRN_Pin, GPIO_PIN_RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2140      	movs	r1, #64	@ 0x40
 8001b10:	4820      	ldr	r0, [pc, #128]	@ (8001b94 <set_led.0+0xb0>)
 8001b12:	f001 ff79 	bl	8003a08 <HAL_GPIO_WritePin>
		 		 HAL_GPIO_WritePin(GPIOC, RED_Pin, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	2120      	movs	r1, #32
 8001b1a:	481e      	ldr	r0, [pc, #120]	@ (8001b94 <set_led.0+0xb0>)
 8001b1c:	f001 ff74 	bl	8003a08 <HAL_GPIO_WritePin>
		 		 HAL_GPIO_WritePin(GPIOC, BLU_Pin, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	2180      	movs	r1, #128	@ 0x80
 8001b24:	481b      	ldr	r0, [pc, #108]	@ (8001b94 <set_led.0+0xb0>)
 8001b26:	f001 ff6f 	bl	8003a08 <HAL_GPIO_WritePin>
		 		 break;
 8001b2a:	e02f      	b.n	8001b8c <set_led.0+0xa8>
		 		 HAL_GPIO_WritePin(GPIOC, RED_Pin, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2120      	movs	r1, #32
 8001b30:	4818      	ldr	r0, [pc, #96]	@ (8001b94 <set_led.0+0xb0>)
 8001b32:	f001 ff69 	bl	8003a08 <HAL_GPIO_WritePin>
		 		 HAL_GPIO_WritePin(GPIOC, GRN_Pin, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2140      	movs	r1, #64	@ 0x40
 8001b3a:	4816      	ldr	r0, [pc, #88]	@ (8001b94 <set_led.0+0xb0>)
 8001b3c:	f001 ff64 	bl	8003a08 <HAL_GPIO_WritePin>
		 		 HAL_GPIO_WritePin(GPIOC, BLU_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2180      	movs	r1, #128	@ 0x80
 8001b44:	4813      	ldr	r0, [pc, #76]	@ (8001b94 <set_led.0+0xb0>)
 8001b46:	f001 ff5f 	bl	8003a08 <HAL_GPIO_WritePin>
		 		 break;
 8001b4a:	e01f      	b.n	8001b8c <set_led.0+0xa8>
		 		HAL_GPIO_WritePin(GPIOC, GRN_Pin, GPIO_PIN_SET);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2140      	movs	r1, #64	@ 0x40
 8001b50:	4810      	ldr	r0, [pc, #64]	@ (8001b94 <set_led.0+0xb0>)
 8001b52:	f001 ff59 	bl	8003a08 <HAL_GPIO_WritePin>
		 		HAL_GPIO_WritePin(GPIOC, RED_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2120      	movs	r1, #32
 8001b5a:	480e      	ldr	r0, [pc, #56]	@ (8001b94 <set_led.0+0xb0>)
 8001b5c:	f001 ff54 	bl	8003a08 <HAL_GPIO_WritePin>
		 		HAL_GPIO_WritePin(GPIOC, GRN_Pin, GPIO_PIN_SET);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2140      	movs	r1, #64	@ 0x40
 8001b64:	480b      	ldr	r0, [pc, #44]	@ (8001b94 <set_led.0+0xb0>)
 8001b66:	f001 ff4f 	bl	8003a08 <HAL_GPIO_WritePin>
		 		break;
 8001b6a:	e00f      	b.n	8001b8c <set_led.0+0xa8>
		 		HAL_GPIO_WritePin(GPIOC, GRN_Pin, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2140      	movs	r1, #64	@ 0x40
 8001b70:	4808      	ldr	r0, [pc, #32]	@ (8001b94 <set_led.0+0xb0>)
 8001b72:	f001 ff49 	bl	8003a08 <HAL_GPIO_WritePin>
		 		HAL_GPIO_WritePin(GPIOC, RED_Pin, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2120      	movs	r1, #32
 8001b7a:	4806      	ldr	r0, [pc, #24]	@ (8001b94 <set_led.0+0xb0>)
 8001b7c:	f001 ff44 	bl	8003a08 <HAL_GPIO_WritePin>
		 		HAL_GPIO_WritePin(GPIOC, BLU_Pin, GPIO_PIN_SET);
 8001b80:	2201      	movs	r2, #1
 8001b82:	2180      	movs	r1, #128	@ 0x80
 8001b84:	4803      	ldr	r0, [pc, #12]	@ (8001b94 <set_led.0+0xb0>)
 8001b86:	f001 ff3f 	bl	8003a08 <HAL_GPIO_WritePin>
	}
 8001b8a:	e7ff      	b.n	8001b8c <set_led.0+0xa8>
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40020800 	.word	0x40020800

08001b98 <print_diagnostics.6>:
	void print_diagnostics(void) {
 8001b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af04      	add	r7, sp, #16
 8001b9e:	4664      	mov	r4, ip
 8001ba0:	f8c7 c004 	str.w	ip, [r7, #4]
		sprintf((char*)txd_msg_buffer, "\r\n%d, %d, %d, %d, %d, %d", clock_hours,
 8001ba4:	4625      	mov	r5, r4
 8001ba6:	4b23      	ldr	r3, [pc, #140]	@ (8001c34 <print_diagnostics.6+0x9c>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	461e      	mov	r6, r3
 8001bae:	4b22      	ldr	r3, [pc, #136]	@ (8001c38 <print_diagnostics.6+0xa0>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	469c      	mov	ip, r3
 8001bb6:	4b21      	ldr	r3, [pc, #132]	@ (8001c3c <print_diagnostics.6+0xa4>)
 8001bb8:	6818      	ldr	r0, [r3, #0]
				clock_mins, active_zone, active_zone != -1 ? (pwms[active_zone] ?
 8001bba:	4b20      	ldr	r3, [pc, #128]	@ (8001c3c <print_diagnostics.6+0xa4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
		sprintf((char*)txd_msg_buffer, "\r\n%d, %d, %d, %d, %d, %d", clock_hours,
 8001bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc2:	d00d      	beq.n	8001be0 <print_diagnostics.6+0x48>
				clock_mins, active_zone, active_zone != -1 ? (pwms[active_zone] ?
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <print_diagnostics.6+0xa4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c40 <print_diagnostics.6+0xa8>)
 8001bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				pwms[0] : ADC_CH9) : 0,
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <print_diagnostics.6+0x40>
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <print_diagnostics.6+0xa8>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	e004      	b.n	8001be2 <print_diagnostics.6+0x4a>
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <print_diagnostics.6+0xac>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	e000      	b.n	8001be2 <print_diagnostics.6+0x4a>
		sprintf((char*)txd_msg_buffer, "\r\n%d, %d, %d, %d, %d, %d", clock_hours,
 8001be0:	2200      	movs	r2, #0
				rpm_tick_count*12/rpm_mins, depth);
 8001be2:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <print_diagnostics.6+0xb0>)
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	460b      	mov	r3, r1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	440b      	add	r3, r1
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4619      	mov	r1, r3
		sprintf((char*)txd_msg_buffer, "\r\n%d, %d, %d, %d, %d, %d", clock_hours,
 8001bf0:	4b16      	ldr	r3, [pc, #88]	@ (8001c4c <print_diagnostics.6+0xb4>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	fb91 f3f3 	sdiv	r3, r1, r3
 8001bfa:	4915      	ldr	r1, [pc, #84]	@ (8001c50 <print_diagnostics.6+0xb8>)
 8001bfc:	6809      	ldr	r1, [r1, #0]
 8001bfe:	9103      	str	r1, [sp, #12]
 8001c00:	9302      	str	r3, [sp, #8]
 8001c02:	9201      	str	r2, [sp, #4]
 8001c04:	9000      	str	r0, [sp, #0]
 8001c06:	4663      	mov	r3, ip
 8001c08:	4632      	mov	r2, r6
 8001c0a:	4912      	ldr	r1, [pc, #72]	@ (8001c54 <print_diagnostics.6+0xbc>)
 8001c0c:	4628      	mov	r0, r5
 8001c0e:	f005 f841 	bl	8006c94 <siprintf>
		HAL_UART_Transmit(&huart6, txd_msg_buffer, strlen((char*)txd_msg_buffer), 1000);
 8001c12:	4625      	mov	r5, r4
 8001c14:	4623      	mov	r3, r4
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fae2 	bl	80001e0 <strlen>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c24:	4629      	mov	r1, r5
 8001c26:	480c      	ldr	r0, [pc, #48]	@ (8001c58 <print_diagnostics.6+0xc0>)
 8001c28:	f004 f82e 	bl	8005c88 <HAL_UART_Transmit>
	}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c34:	200002c8 	.word	0x200002c8
 8001c38:	200002c9 	.word	0x200002c9
 8001c3c:	200002d4 	.word	0x200002d4
 8001c40:	20000290 	.word	0x20000290
 8001c44:	200002dc 	.word	0x200002dc
 8001c48:	200002c4 	.word	0x200002c4
 8001c4c:	200002ca 	.word	0x200002ca
 8001c50:	20000004 	.word	0x20000004
 8001c54:	08007a24 	.word	0x08007a24
 8001c58:	20000230 	.word	0x20000230

08001c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b094      	sub	sp, #80	@ 0x50
 8001c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c62:	f107 0320 	add.w	r3, r7, #32
 8001c66:	2230      	movs	r2, #48	@ 0x30
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f005 f832 	bl	8006cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	4b23      	ldr	r3, [pc, #140]	@ (8001d14 <SystemClock_Config+0xb8>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c88:	4a22      	ldr	r2, [pc, #136]	@ (8001d14 <SystemClock_Config+0xb8>)
 8001c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c90:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <SystemClock_Config+0xb8>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d18 <SystemClock_Config+0xbc>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d18 <SystemClock_Config+0xbc>)
 8001caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b19      	ldr	r3, [pc, #100]	@ (8001d18 <SystemClock_Config+0xbc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc4:	2310      	movs	r3, #16
 8001cc6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ccc:	f107 0320 	add.w	r3, r7, #32
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 fecb 	bl	8003a6c <HAL_RCC_OscConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001cdc:	f000 fc0a 	bl	80024f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f002 f92e 	bl	8003f5c <HAL_RCC_ClockConfig>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d06:	f000 fbf5 	bl	80024f4 <Error_Handler>
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	3750      	adds	r7, #80	@ 0x50
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40007000 	.word	0x40007000

08001d1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d22:	463b      	mov	r3, r7
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d2e:	4b21      	ldr	r3, [pc, #132]	@ (8001db4 <MX_ADC1_Init+0x98>)
 8001d30:	4a21      	ldr	r2, [pc, #132]	@ (8001db8 <MX_ADC1_Init+0x9c>)
 8001d32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d34:	4b1f      	ldr	r3, [pc, #124]	@ (8001db4 <MX_ADC1_Init+0x98>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001db4 <MX_ADC1_Init+0x98>)
 8001d3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d42:	4b1c      	ldr	r3, [pc, #112]	@ (8001db4 <MX_ADC1_Init+0x98>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d48:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <MX_ADC1_Init+0x98>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d4e:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <MX_ADC1_Init+0x98>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d56:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <MX_ADC1_Init+0x98>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d5c:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <MX_ADC1_Init+0x98>)
 8001d5e:	4a17      	ldr	r2, [pc, #92]	@ (8001dbc <MX_ADC1_Init+0xa0>)
 8001d60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d62:	4b14      	ldr	r3, [pc, #80]	@ (8001db4 <MX_ADC1_Init+0x98>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d68:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <MX_ADC1_Init+0x98>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <MX_ADC1_Init+0x98>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d76:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <MX_ADC1_Init+0x98>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d7c:	480d      	ldr	r0, [pc, #52]	@ (8001db4 <MX_ADC1_Init+0x98>)
 8001d7e:	f000 ff39 	bl	8002bf4 <HAL_ADC_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d88:	f000 fbb4 	bl	80024f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d90:	2301      	movs	r3, #1
 8001d92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001d94:	2301      	movs	r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d98:	463b      	mov	r3, r7
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	@ (8001db4 <MX_ADC1_Init+0x98>)
 8001d9e:	f001 f8ed 	bl	8002f7c <HAL_ADC_ConfigChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001da8:	f000 fba4 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000080 	.word	0x20000080
 8001db8:	40012000 	.word	0x40012000
 8001dbc:	0f000001 	.word	0x0f000001

08001dc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b092      	sub	sp, #72	@ 0x48
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
 8001de0:	615a      	str	r2, [r3, #20]
 8001de2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2220      	movs	r2, #32
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f004 ff72 	bl	8006cd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001df0:	4b3a      	ldr	r3, [pc, #232]	@ (8001edc <MX_TIM1_Init+0x11c>)
 8001df2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ee0 <MX_TIM1_Init+0x120>)
 8001df4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001df6:	4b39      	ldr	r3, [pc, #228]	@ (8001edc <MX_TIM1_Init+0x11c>)
 8001df8:	220f      	movs	r2, #15
 8001dfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfc:	4b37      	ldr	r3, [pc, #220]	@ (8001edc <MX_TIM1_Init+0x11c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8001e02:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <MX_TIM1_Init+0x11c>)
 8001e04:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001e08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0a:	4b34      	ldr	r3, [pc, #208]	@ (8001edc <MX_TIM1_Init+0x11c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e10:	4b32      	ldr	r3, [pc, #200]	@ (8001edc <MX_TIM1_Init+0x11c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e16:	4b31      	ldr	r3, [pc, #196]	@ (8001edc <MX_TIM1_Init+0x11c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e1c:	482f      	ldr	r0, [pc, #188]	@ (8001edc <MX_TIM1_Init+0x11c>)
 8001e1e:	f002 fbc9 	bl	80045b4 <HAL_TIM_PWM_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001e28:	f000 fb64 	bl	80024f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e34:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4828      	ldr	r0, [pc, #160]	@ (8001edc <MX_TIM1_Init+0x11c>)
 8001e3c:	f003 fe00 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001e46:	f000 fb55 	bl	80024f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e4a:	2360      	movs	r3, #96	@ 0x60
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1200-1;
 8001e4e:	f240 43af 	movw	r3, #1199	@ 0x4af
 8001e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4619      	mov	r1, r3
 8001e70:	481a      	ldr	r0, [pc, #104]	@ (8001edc <MX_TIM1_Init+0x11c>)
 8001e72:	f003 f803 	bl	8004e7c <HAL_TIM_PWM_ConfigChannel>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001e7c:	f000 fb3a 	bl	80024f4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e88:	2204      	movs	r2, #4
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4813      	ldr	r0, [pc, #76]	@ (8001edc <MX_TIM1_Init+0x11c>)
 8001e8e:	f002 fff5 	bl	8004e7c <HAL_TIM_PWM_ConfigChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001e98:	f000 fb2c 	bl	80024f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4807      	ldr	r0, [pc, #28]	@ (8001edc <MX_TIM1_Init+0x11c>)
 8001ec0:	f003 fe2c 	bl	8005b1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001eca:	f000 fb13 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ece:	4803      	ldr	r0, [pc, #12]	@ (8001edc <MX_TIM1_Init+0x11c>)
 8001ed0:	f000 fc28 	bl	8002724 <HAL_TIM_MspPostInit>

}
 8001ed4:	bf00      	nop
 8001ed6:	3748      	adds	r7, #72	@ 0x48
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	200000c8 	.word	0x200000c8
 8001ee0:	40010000 	.word	0x40010000

08001ee4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b092      	sub	sp, #72	@ 0x48
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
 8001f10:	611a      	str	r2, [r3, #16]
 8001f12:	615a      	str	r2, [r3, #20]
 8001f14:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f22:	4b3b      	ldr	r3, [pc, #236]	@ (8002010 <MX_TIM3_Init+0x12c>)
 8001f24:	4a3b      	ldr	r2, [pc, #236]	@ (8002014 <MX_TIM3_Init+0x130>)
 8001f26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001f28:	4b39      	ldr	r3, [pc, #228]	@ (8002010 <MX_TIM3_Init+0x12c>)
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2e:	4b38      	ldr	r3, [pc, #224]	@ (8002010 <MX_TIM3_Init+0x12c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65536-1;
 8001f34:	4b36      	ldr	r3, [pc, #216]	@ (8002010 <MX_TIM3_Init+0x12c>)
 8001f36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3c:	4b34      	ldr	r3, [pc, #208]	@ (8002010 <MX_TIM3_Init+0x12c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f42:	4b33      	ldr	r3, [pc, #204]	@ (8002010 <MX_TIM3_Init+0x12c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f48:	4831      	ldr	r0, [pc, #196]	@ (8002010 <MX_TIM3_Init+0x12c>)
 8001f4a:	f002 fa27 	bl	800439c <HAL_TIM_Base_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001f54:	f000 face 	bl	80024f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f62:	4619      	mov	r1, r3
 8001f64:	482a      	ldr	r0, [pc, #168]	@ (8002010 <MX_TIM3_Init+0x12c>)
 8001f66:	f003 f84b 	bl	8005000 <HAL_TIM_ConfigClockSource>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001f70:	f000 fac0 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f74:	4826      	ldr	r0, [pc, #152]	@ (8002010 <MX_TIM3_Init+0x12c>)
 8001f76:	f002 fb1d 	bl	80045b4 <HAL_TIM_PWM_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001f80:	f000 fab8 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001f84:	4822      	ldr	r0, [pc, #136]	@ (8002010 <MX_TIM3_Init+0x12c>)
 8001f86:	f002 fc79 	bl	800487c <HAL_TIM_IC_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f90:	f000 fab0 	bl	80024f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	633b      	str	r3, [r7, #48]	@ 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	481b      	ldr	r0, [pc, #108]	@ (8002010 <MX_TIM3_Init+0x12c>)
 8001fa4:	f003 fd4c 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8001fae:	f000 faa1 	bl	80024f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb2:	2360      	movs	r3, #96	@ 0x60
 8001fb4:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4811      	ldr	r0, [pc, #68]	@ (8002010 <MX_TIM3_Init+0x12c>)
 8001fcc:	f002 ff56 	bl	8004e7c <HAL_TIM_PWM_ConfigChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8001fd6:	f000 fa8d 	bl	80024f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001fda:	230a      	movs	r3, #10
 8001fdc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	2204      	movs	r2, #4
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4807      	ldr	r0, [pc, #28]	@ (8002010 <MX_TIM3_Init+0x12c>)
 8001ff2:	f002 fea7 	bl	8004d44 <HAL_TIM_IC_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8001ffc:	f000 fa7a 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002000:	4803      	ldr	r0, [pc, #12]	@ (8002010 <MX_TIM3_Init+0x12c>)
 8002002:	f000 fb8f 	bl	8002724 <HAL_TIM_MspPostInit>

}
 8002006:	bf00      	nop
 8002008:	3748      	adds	r7, #72	@ 0x48
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000110 	.word	0x20000110
 8002014:	40000400 	.word	0x40000400

08002018 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	@ 0x28
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201e:	f107 0320 	add.w	r3, r7, #32
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
 8002034:	611a      	str	r2, [r3, #16]
 8002036:	615a      	str	r2, [r3, #20]
 8002038:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800203a:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <MX_TIM4_Init+0xac>)
 800203c:	4a22      	ldr	r2, [pc, #136]	@ (80020c8 <MX_TIM4_Init+0xb0>)
 800203e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8002040:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <MX_TIM4_Init+0xac>)
 8002042:	220f      	movs	r2, #15
 8002044:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002046:	4b1f      	ldr	r3, [pc, #124]	@ (80020c4 <MX_TIM4_Init+0xac>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 800204c:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <MX_TIM4_Init+0xac>)
 800204e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002052:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002054:	4b1b      	ldr	r3, [pc, #108]	@ (80020c4 <MX_TIM4_Init+0xac>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205a:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <MX_TIM4_Init+0xac>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002060:	4818      	ldr	r0, [pc, #96]	@ (80020c4 <MX_TIM4_Init+0xac>)
 8002062:	f002 faa7 	bl	80045b4 <HAL_TIM_PWM_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800206c:	f000 fa42 	bl	80024f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002078:	f107 0320 	add.w	r3, r7, #32
 800207c:	4619      	mov	r1, r3
 800207e:	4811      	ldr	r0, [pc, #68]	@ (80020c4 <MX_TIM4_Init+0xac>)
 8002080:	f003 fcde 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800208a:	f000 fa33 	bl	80024f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800208e:	2360      	movs	r3, #96	@ 0x60
 8002090:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8002092:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8002096:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2200      	movs	r2, #0
 80020a4:	4619      	mov	r1, r3
 80020a6:	4807      	ldr	r0, [pc, #28]	@ (80020c4 <MX_TIM4_Init+0xac>)
 80020a8:	f002 fee8 	bl	8004e7c <HAL_TIM_PWM_ConfigChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80020b2:	f000 fa1f 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020b6:	4803      	ldr	r0, [pc, #12]	@ (80020c4 <MX_TIM4_Init+0xac>)
 80020b8:	f000 fb34 	bl	8002724 <HAL_TIM_MspPostInit>

}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	@ 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000158 	.word	0x20000158
 80020c8:	40000800 	.word	0x40000800

080020cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e0:	463b      	mov	r3, r7
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002160 <MX_TIM5_Init+0x94>)
 80020ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002164 <MX_TIM5_Init+0x98>)
 80020ec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 53-1;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <MX_TIM5_Init+0x94>)
 80020f0:	2234      	movs	r2, #52	@ 0x34
 80020f2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002160 <MX_TIM5_Init+0x94>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60000-1;
 80020fa:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <MX_TIM5_Init+0x94>)
 80020fc:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002100:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002102:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <MX_TIM5_Init+0x94>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002108:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <MX_TIM5_Init+0x94>)
 800210a:	2280      	movs	r2, #128	@ 0x80
 800210c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800210e:	4814      	ldr	r0, [pc, #80]	@ (8002160 <MX_TIM5_Init+0x94>)
 8002110:	f002 f944 	bl	800439c <HAL_TIM_Base_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800211a:	f000 f9eb 	bl	80024f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800211e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002122:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002124:	f107 0308 	add.w	r3, r7, #8
 8002128:	4619      	mov	r1, r3
 800212a:	480d      	ldr	r0, [pc, #52]	@ (8002160 <MX_TIM5_Init+0x94>)
 800212c:	f002 ff68 	bl	8005000 <HAL_TIM_ConfigClockSource>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002136:	f000 f9dd 	bl	80024f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002142:	463b      	mov	r3, r7
 8002144:	4619      	mov	r1, r3
 8002146:	4806      	ldr	r0, [pc, #24]	@ (8002160 <MX_TIM5_Init+0x94>)
 8002148:	f003 fc7a 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002152:	f000 f9cf 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200001a0 	.word	0x200001a0
 8002164:	40000c00 	.word	0x40000c00

08002168 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800216c:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 800216e:	4a12      	ldr	r2, [pc, #72]	@ (80021b8 <MX_USART2_UART_Init+0x50>)
 8002170:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002172:	4b10      	ldr	r3, [pc, #64]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 8002174:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002178:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002180:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 8002182:	2200      	movs	r2, #0
 8002184:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002186:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800218c:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 800218e:	220c      	movs	r2, #12
 8002190:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002192:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002198:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 800219a:	2200      	movs	r2, #0
 800219c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800219e:	4805      	ldr	r0, [pc, #20]	@ (80021b4 <MX_USART2_UART_Init+0x4c>)
 80021a0:	f003 fd22 	bl	8005be8 <HAL_UART_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021aa:	f000 f9a3 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200001e8 	.word	0x200001e8
 80021b8:	40004400 	.word	0x40004400

080021bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <MX_USART6_UART_Init+0x4c>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	@ (800220c <MX_USART6_UART_Init+0x50>)
 80021c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <MX_USART6_UART_Init+0x4c>)
 80021c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80021cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <MX_USART6_UART_Init+0x4c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <MX_USART6_UART_Init+0x4c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021da:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <MX_USART6_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021e0:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <MX_USART6_UART_Init+0x4c>)
 80021e2:	220c      	movs	r2, #12
 80021e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e6:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <MX_USART6_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <MX_USART6_UART_Init+0x4c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021f2:	4805      	ldr	r0, [pc, #20]	@ (8002208 <MX_USART6_UART_Init+0x4c>)
 80021f4:	f003 fcf8 	bl	8005be8 <HAL_UART_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80021fe:	f000 f979 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000230 	.word	0x20000230
 800220c:	40011400 	.word	0x40011400

08002210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	@ 0x28
 8002214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
 8002224:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	4b4d      	ldr	r3, [pc, #308]	@ (8002360 <MX_GPIO_Init+0x150>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	4a4c      	ldr	r2, [pc, #304]	@ (8002360 <MX_GPIO_Init+0x150>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	6313      	str	r3, [r2, #48]	@ 0x30
 8002236:	4b4a      	ldr	r3, [pc, #296]	@ (8002360 <MX_GPIO_Init+0x150>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b46      	ldr	r3, [pc, #280]	@ (8002360 <MX_GPIO_Init+0x150>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	4a45      	ldr	r2, [pc, #276]	@ (8002360 <MX_GPIO_Init+0x150>)
 800224c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002250:	6313      	str	r3, [r2, #48]	@ 0x30
 8002252:	4b43      	ldr	r3, [pc, #268]	@ (8002360 <MX_GPIO_Init+0x150>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	4b3f      	ldr	r3, [pc, #252]	@ (8002360 <MX_GPIO_Init+0x150>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	4a3e      	ldr	r2, [pc, #248]	@ (8002360 <MX_GPIO_Init+0x150>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6313      	str	r3, [r2, #48]	@ 0x30
 800226e:	4b3c      	ldr	r3, [pc, #240]	@ (8002360 <MX_GPIO_Init+0x150>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	4b38      	ldr	r3, [pc, #224]	@ (8002360 <MX_GPIO_Init+0x150>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	4a37      	ldr	r2, [pc, #220]	@ (8002360 <MX_GPIO_Init+0x150>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	6313      	str	r3, [r2, #48]	@ 0x30
 800228a:	4b35      	ldr	r3, [pc, #212]	@ (8002360 <MX_GPIO_Init+0x150>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, B1_Pin|B3_Pin|A0_Pin|B2_Pin
 8002296:	2200      	movs	r2, #0
 8002298:	f641 41ff 	movw	r1, #7423	@ 0x1cff
 800229c:	4831      	ldr	r0, [pc, #196]	@ (8002364 <MX_GPIO_Init+0x154>)
 800229e:	f001 fbb3 	bl	8003a08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|RED_Pin|GRN_Pin|BLU_Pin
                          |A3_Pin|A2_Pin|A1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2120      	movs	r1, #32
 80022a6:	4830      	ldr	r0, [pc, #192]	@ (8002368 <MX_GPIO_Init+0x158>)
 80022a8:	f001 fbae 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HCSR04_TRIG_Pin|GPIO_PIN_4|B0_Pin, GPIO_PIN_RESET);
 80022ac:	2200      	movs	r2, #0
 80022ae:	f44f 7189 	mov.w	r1, #274	@ 0x112
 80022b2:	482e      	ldr	r0, [pc, #184]	@ (800236c <MX_GPIO_Init+0x15c>)
 80022b4:	f001 fba8 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80022b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80022c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4619      	mov	r1, r3
 80022ce:	4825      	ldr	r0, [pc, #148]	@ (8002364 <MX_GPIO_Init+0x154>)
 80022d0:	f001 fa16 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B3_Pin A0_Pin B2_Pin
                           PC4 RED_Pin GRN_Pin BLU_Pin
                           A3_Pin A2_Pin A1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B3_Pin|A0_Pin|B2_Pin
 80022d4:	f641 43ff 	movw	r3, #7423	@ 0x1cff
 80022d8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|RED_Pin|GRN_Pin|BLU_Pin
                          |A3_Pin|A2_Pin|A1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022da:	2301      	movs	r3, #1
 80022dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	481d      	ldr	r0, [pc, #116]	@ (8002364 <MX_GPIO_Init+0x154>)
 80022ee:	f001 fa07 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_Pin */
  GPIO_InitStruct.Pin = RPM_Pin;
 80022f2:	2310      	movs	r3, #16
 80022f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_GPIO_Port, &GPIO_InitStruct);
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4619      	mov	r1, r3
 8002306:	4818      	ldr	r0, [pc, #96]	@ (8002368 <MX_GPIO_Init+0x158>)
 8002308:	f001 f9fa 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800230c:	2320      	movs	r3, #32
 800230e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002310:	2301      	movs	r3, #1
 8002312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	4619      	mov	r1, r3
 8002322:	4811      	ldr	r0, [pc, #68]	@ (8002368 <MX_GPIO_Init+0x158>)
 8002324:	f001 f9ec 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : HCSR04_TRIG_Pin PB4 B0_Pin */
  GPIO_InitStruct.Pin = HCSR04_TRIG_Pin|GPIO_PIN_4|B0_Pin;
 8002328:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800232c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232e:	2301      	movs	r3, #1
 8002330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4619      	mov	r1, r3
 8002340:	480a      	ldr	r0, [pc, #40]	@ (800236c <MX_GPIO_Init+0x15c>)
 8002342:	f001 f9dd 	bl	8003700 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	200a      	movs	r0, #10
 800234c:	f001 f90f 	bl	800356e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002350:	200a      	movs	r0, #10
 8002352:	f001 f928 	bl	80035a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002356:	bf00      	nop
 8002358:	3728      	adds	r7, #40	@ 0x28
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40020800 	.word	0x40020800
 8002368:	40020000 	.word	0x40020000
 800236c:	40020400 	.word	0x40020400

08002370 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a15      	ldr	r2, [pc, #84]	@ (80023d4 <HAL_TIM_IC_CaptureCallback+0x64>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d123      	bne.n	80023ca <HAL_TIM_IC_CaptureCallback+0x5a>
	{
		if (htim->Channel == 2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7f1b      	ldrb	r3, [r3, #28]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d11f      	bne.n	80023ca <HAL_TIM_IC_CaptureCallback+0x5a>
		{
			if (first_edge == 0)
 800238a:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <HAL_TIM_IC_CaptureCallback+0x68>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10b      	bne.n	80023ac <HAL_TIM_IC_CaptureCallback+0x3c>
			{
				time_edge1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002394:	2104      	movs	r1, #4
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f002 fefa 	bl	8005190 <HAL_TIM_ReadCapturedValue>
 800239c:	4603      	mov	r3, r0
 800239e:	b29a      	uxth	r2, r3
 80023a0:	4b0e      	ldr	r3, [pc, #56]	@ (80023dc <HAL_TIM_IC_CaptureCallback+0x6c>)
 80023a2:	801a      	strh	r2, [r3, #0]
				first_edge = 1;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <HAL_TIM_IC_CaptureCallback+0x68>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
				hcsr04_Rx_flag = 1;
			}
		}
	}
}
 80023aa:	e00e      	b.n	80023ca <HAL_TIM_IC_CaptureCallback+0x5a>
				time_edge2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80023ac:	2104      	movs	r1, #4
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f002 feee 	bl	8005190 <HAL_TIM_ReadCapturedValue>
 80023b4:	4603      	mov	r3, r0
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	4b09      	ldr	r3, [pc, #36]	@ (80023e0 <HAL_TIM_IC_CaptureCallback+0x70>)
 80023ba:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2200      	movs	r2, #0
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24
				hcsr04_Rx_flag = 1;
 80023c4:	4b07      	ldr	r3, [pc, #28]	@ (80023e4 <HAL_TIM_IC_CaptureCallback+0x74>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40000400 	.word	0x40000400
 80023d8:	20000279 	.word	0x20000279
 80023dc:	2000027a 	.word	0x2000027a
 80023e0:	2000027c 	.word	0x2000027c
 80023e4:	20000278 	.word	0x20000278

080023e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6) {
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a07      	ldr	r2, [pc, #28]	@ (8002414 <HAL_UART_RxCpltCallback+0x2c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d108      	bne.n	800240c <HAL_UART_RxCpltCallback+0x24>

		HAL_UART_Transmit(&huart6, &byte, 1, 100);
 80023fa:	2364      	movs	r3, #100	@ 0x64
 80023fc:	2201      	movs	r2, #1
 80023fe:	4906      	ldr	r1, [pc, #24]	@ (8002418 <HAL_UART_RxCpltCallback+0x30>)
 8002400:	4806      	ldr	r0, [pc, #24]	@ (800241c <HAL_UART_RxCpltCallback+0x34>)
 8002402:	f003 fc41 	bl	8005c88 <HAL_UART_Transmit>
		rcv_intpt_flag = 1;
 8002406:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <HAL_UART_RxCpltCallback+0x38>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
	}
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40011400 	.word	0x40011400
 8002418:	2000027f 	.word	0x2000027f
 800241c:	20000230 	.word	0x20000230
 8002420:	2000027e 	.word	0x2000027e

08002424 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin); // Call the HAL interrupt handler
 8002428:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800242c:	f001 fb06 	bl	8003a3c <HAL_GPIO_EXTI_IRQHandler>
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == BLUE_BUTTON_Pin) // Check if it is the BLUE_BUTTON
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002444:	d102      	bne.n	800244c <HAL_GPIO_EXTI_Callback+0x18>
    {
        // Handle button press
        button_pushed = 1;
 8002446:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin == RPM_Pin) {
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	2b10      	cmp	r3, #16
 8002450:	d108      	bne.n	8002464 <HAL_GPIO_EXTI_Callback+0x30>
    	if (button_pushed) rpm_tick_count += 1;
 8002452:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d004      	beq.n	8002464 <HAL_GPIO_EXTI_Callback+0x30>
 800245a:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_GPIO_EXTI_Callback+0x40>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	4a04      	ldr	r2, [pc, #16]	@ (8002474 <HAL_GPIO_EXTI_Callback+0x40>)
 8002462:	6013      	str	r3, [r2, #0]
    }
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	200002c0 	.word	0x200002c0
 8002474:	200002c4 	.word	0x200002c4

08002478 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM5) {
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a15      	ldr	r2, [pc, #84]	@ (80024dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d122      	bne.n	80024d0 <HAL_TIM_PeriodElapsedCallback+0x58>
		clock_mins += 1;
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002496:	701a      	strb	r2, [r3, #0]
		rpm_mins += 1;
 8002498:	4b12      	ldr	r3, [pc, #72]	@ (80024e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29b      	uxth	r3, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80024a4:	801a      	strh	r2, [r3, #0]
		clock_secs = 0;
 80024a6:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
		if ((clock_mins == 60 )) {
 80024ac:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b3c      	cmp	r3, #60	@ 0x3c
 80024b4:	d10c      	bne.n	80024d0 <HAL_TIM_PeriodElapsedCallback+0x58>
				clock_hours += 1;
 80024b6:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <HAL_TIM_PeriodElapsedCallback+0x74>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <HAL_TIM_PeriodElapsedCallback+0x74>)
 80024c2:	701a      	strb	r2, [r3, #0]
				clock_mins = 0;
 80024c4:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
				wall_clock_hr_update_flag = 1;
 80024ca:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
		}
	}
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40000c00 	.word	0x40000c00
 80024e0:	200002c9 	.word	0x200002c9
 80024e4:	200002ca 	.word	0x200002ca
 80024e8:	200002cc 	.word	0x200002cc
 80024ec:	200002c8 	.word	0x200002c8
 80024f0:	200002d0 	.word	0x200002d0

080024f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f8:	b672      	cpsid	i
}
 80024fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <Error_Handler+0x8>

08002500 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	4b10      	ldr	r3, [pc, #64]	@ (800254c <HAL_MspInit+0x4c>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250e:	4a0f      	ldr	r2, [pc, #60]	@ (800254c <HAL_MspInit+0x4c>)
 8002510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002514:	6453      	str	r3, [r2, #68]	@ 0x44
 8002516:	4b0d      	ldr	r3, [pc, #52]	@ (800254c <HAL_MspInit+0x4c>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	4b09      	ldr	r3, [pc, #36]	@ (800254c <HAL_MspInit+0x4c>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	4a08      	ldr	r2, [pc, #32]	@ (800254c <HAL_MspInit+0x4c>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002530:	6413      	str	r3, [r2, #64]	@ 0x40
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_MspInit+0x4c>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800253e:	2007      	movs	r0, #7
 8002540:	f001 f80a 	bl	8003558 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800

08002550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	@ 0x28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a17      	ldr	r2, [pc, #92]	@ (80025cc <HAL_ADC_MspInit+0x7c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d127      	bne.n	80025c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	4b16      	ldr	r3, [pc, #88]	@ (80025d0 <HAL_ADC_MspInit+0x80>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	4a15      	ldr	r2, [pc, #84]	@ (80025d0 <HAL_ADC_MspInit+0x80>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002580:	6453      	str	r3, [r2, #68]	@ 0x44
 8002582:	4b13      	ldr	r3, [pc, #76]	@ (80025d0 <HAL_ADC_MspInit+0x80>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b0f      	ldr	r3, [pc, #60]	@ (80025d0 <HAL_ADC_MspInit+0x80>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	4a0e      	ldr	r2, [pc, #56]	@ (80025d0 <HAL_ADC_MspInit+0x80>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6313      	str	r3, [r2, #48]	@ 0x30
 800259e:	4b0c      	ldr	r3, [pc, #48]	@ (80025d0 <HAL_ADC_MspInit+0x80>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025aa:	2302      	movs	r3, #2
 80025ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ae:	2303      	movs	r3, #3
 80025b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4619      	mov	r1, r3
 80025bc:	4805      	ldr	r0, [pc, #20]	@ (80025d4 <HAL_ADC_MspInit+0x84>)
 80025be:	f001 f89f 	bl	8003700 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80025c2:	bf00      	nop
 80025c4:	3728      	adds	r7, #40	@ 0x28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40012000 	.word	0x40012000
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020000 	.word	0x40020000

080025d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a15      	ldr	r2, [pc, #84]	@ (800263c <HAL_TIM_PWM_MspInit+0x64>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10e      	bne.n	8002608 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b14      	ldr	r3, [pc, #80]	@ (8002640 <HAL_TIM_PWM_MspInit+0x68>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	4a13      	ldr	r2, [pc, #76]	@ (8002640 <HAL_TIM_PWM_MspInit+0x68>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025fa:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <HAL_TIM_PWM_MspInit+0x68>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002606:	e012      	b.n	800262e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0d      	ldr	r2, [pc, #52]	@ (8002644 <HAL_TIM_PWM_MspInit+0x6c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d10d      	bne.n	800262e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_TIM_PWM_MspInit+0x68>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	4a09      	ldr	r2, [pc, #36]	@ (8002640 <HAL_TIM_PWM_MspInit+0x68>)
 800261c:	f043 0304 	orr.w	r3, r3, #4
 8002620:	6413      	str	r3, [r2, #64]	@ 0x40
 8002622:	4b07      	ldr	r3, [pc, #28]	@ (8002640 <HAL_TIM_PWM_MspInit+0x68>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40010000 	.word	0x40010000
 8002640:	40023800 	.word	0x40023800
 8002644:	40000800 	.word	0x40000800

08002648 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	@ 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a2b      	ldr	r2, [pc, #172]	@ (8002714 <HAL_TIM_Base_MspInit+0xcc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d134      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	4b2a      	ldr	r3, [pc, #168]	@ (8002718 <HAL_TIM_Base_MspInit+0xd0>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	4a29      	ldr	r2, [pc, #164]	@ (8002718 <HAL_TIM_Base_MspInit+0xd0>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	6413      	str	r3, [r2, #64]	@ 0x40
 800267a:	4b27      	ldr	r3, [pc, #156]	@ (8002718 <HAL_TIM_Base_MspInit+0xd0>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <HAL_TIM_Base_MspInit+0xd0>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a22      	ldr	r2, [pc, #136]	@ (8002718 <HAL_TIM_Base_MspInit+0xd0>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HAL_TIM_Base_MspInit+0xd0>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026a2:	2320      	movs	r3, #32
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026b2:	2302      	movs	r3, #2
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4817      	ldr	r0, [pc, #92]	@ (800271c <HAL_TIM_Base_MspInit+0xd4>)
 80026be:	f001 f81f 	bl	8003700 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	201d      	movs	r0, #29
 80026c8:	f000 ff51 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026cc:	201d      	movs	r0, #29
 80026ce:	f000 ff6a 	bl	80035a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80026d2:	e01a      	b.n	800270a <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM5)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a11      	ldr	r2, [pc, #68]	@ (8002720 <HAL_TIM_Base_MspInit+0xd8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d115      	bne.n	800270a <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002718 <HAL_TIM_Base_MspInit+0xd0>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002718 <HAL_TIM_Base_MspInit+0xd0>)
 80026e8:	f043 0308 	orr.w	r3, r3, #8
 80026ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <HAL_TIM_Base_MspInit+0xd0>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	2032      	movs	r0, #50	@ 0x32
 8002700:	f000 ff35 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002704:	2032      	movs	r0, #50	@ 0x32
 8002706:	f000 ff4e 	bl	80035a6 <HAL_NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3728      	adds	r7, #40	@ 0x28
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40000400 	.word	0x40000400
 8002718:	40023800 	.word	0x40023800
 800271c:	40020400 	.word	0x40020400
 8002720:	40000c00 	.word	0x40000c00

08002724 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	@ 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a36      	ldr	r2, [pc, #216]	@ (800281c <HAL_TIM_MspPostInit+0xf8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d11f      	bne.n	8002786 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	4b35      	ldr	r3, [pc, #212]	@ (8002820 <HAL_TIM_MspPostInit+0xfc>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	4a34      	ldr	r2, [pc, #208]	@ (8002820 <HAL_TIM_MspPostInit+0xfc>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6313      	str	r3, [r2, #48]	@ 0x30
 8002756:	4b32      	ldr	r3, [pc, #200]	@ (8002820 <HAL_TIM_MspPostInit+0xfc>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = DC_BWD_Pin|DC_FWD_Pin;
 8002762:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002770:	2300      	movs	r3, #0
 8002772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002774:	2301      	movs	r3, #1
 8002776:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4619      	mov	r1, r3
 800277e:	4829      	ldr	r0, [pc, #164]	@ (8002824 <HAL_TIM_MspPostInit+0x100>)
 8002780:	f000 ffbe 	bl	8003700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002784:	e046      	b.n	8002814 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a27      	ldr	r2, [pc, #156]	@ (8002828 <HAL_TIM_MspPostInit+0x104>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d11e      	bne.n	80027ce <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	4b22      	ldr	r3, [pc, #136]	@ (8002820 <HAL_TIM_MspPostInit+0xfc>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	4a21      	ldr	r2, [pc, #132]	@ (8002820 <HAL_TIM_MspPostInit+0xfc>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002820 <HAL_TIM_MspPostInit+0xfc>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027ac:	2340      	movs	r3, #64	@ 0x40
 80027ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027bc:	2302      	movs	r3, #2
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	4619      	mov	r1, r3
 80027c6:	4817      	ldr	r0, [pc, #92]	@ (8002824 <HAL_TIM_MspPostInit+0x100>)
 80027c8:	f000 ff9a 	bl	8003700 <HAL_GPIO_Init>
}
 80027cc:	e022      	b.n	8002814 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a16      	ldr	r2, [pc, #88]	@ (800282c <HAL_TIM_MspPostInit+0x108>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d11d      	bne.n	8002814 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <HAL_TIM_MspPostInit+0xfc>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002820 <HAL_TIM_MspPostInit+0xfc>)
 80027e2:	f043 0302 	orr.w	r3, r3, #2
 80027e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002820 <HAL_TIM_MspPostInit+0xfc>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_Pin;
 80027f4:	2340      	movs	r3, #64	@ 0x40
 80027f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002804:	2302      	movs	r3, #2
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	4619      	mov	r1, r3
 800280e:	4808      	ldr	r0, [pc, #32]	@ (8002830 <HAL_TIM_MspPostInit+0x10c>)
 8002810:	f000 ff76 	bl	8003700 <HAL_GPIO_Init>
}
 8002814:	bf00      	nop
 8002816:	3728      	adds	r7, #40	@ 0x28
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40010000 	.word	0x40010000
 8002820:	40023800 	.word	0x40023800
 8002824:	40020000 	.word	0x40020000
 8002828:	40000400 	.word	0x40000400
 800282c:	40000800 	.word	0x40000800
 8002830:	40020400 	.word	0x40020400

08002834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08c      	sub	sp, #48	@ 0x30
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a36      	ldr	r2, [pc, #216]	@ (800292c <HAL_UART_MspInit+0xf8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d12c      	bne.n	80028b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	4b35      	ldr	r3, [pc, #212]	@ (8002930 <HAL_UART_MspInit+0xfc>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	4a34      	ldr	r2, [pc, #208]	@ (8002930 <HAL_UART_MspInit+0xfc>)
 8002860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002864:	6413      	str	r3, [r2, #64]	@ 0x40
 8002866:	4b32      	ldr	r3, [pc, #200]	@ (8002930 <HAL_UART_MspInit+0xfc>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	4b2e      	ldr	r3, [pc, #184]	@ (8002930 <HAL_UART_MspInit+0xfc>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	4a2d      	ldr	r2, [pc, #180]	@ (8002930 <HAL_UART_MspInit+0xfc>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6313      	str	r3, [r2, #48]	@ 0x30
 8002882:	4b2b      	ldr	r3, [pc, #172]	@ (8002930 <HAL_UART_MspInit+0xfc>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800288e:	230c      	movs	r3, #12
 8002890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800289e:	2307      	movs	r3, #7
 80028a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 031c 	add.w	r3, r7, #28
 80028a6:	4619      	mov	r1, r3
 80028a8:	4822      	ldr	r0, [pc, #136]	@ (8002934 <HAL_UART_MspInit+0x100>)
 80028aa:	f000 ff29 	bl	8003700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028ae:	e039      	b.n	8002924 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a20      	ldr	r2, [pc, #128]	@ (8002938 <HAL_UART_MspInit+0x104>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d134      	bne.n	8002924 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	4b1c      	ldr	r3, [pc, #112]	@ (8002930 <HAL_UART_MspInit+0xfc>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002930 <HAL_UART_MspInit+0xfc>)
 80028c4:	f043 0320 	orr.w	r3, r3, #32
 80028c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ca:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <HAL_UART_MspInit+0xfc>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	4b15      	ldr	r3, [pc, #84]	@ (8002930 <HAL_UART_MspInit+0xfc>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	4a14      	ldr	r2, [pc, #80]	@ (8002930 <HAL_UART_MspInit+0xfc>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e6:	4b12      	ldr	r3, [pc, #72]	@ (8002930 <HAL_UART_MspInit+0xfc>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80028f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002904:	2308      	movs	r3, #8
 8002906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	4619      	mov	r1, r3
 800290e:	4809      	ldr	r0, [pc, #36]	@ (8002934 <HAL_UART_MspInit+0x100>)
 8002910:	f000 fef6 	bl	8003700 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002914:	2200      	movs	r2, #0
 8002916:	2100      	movs	r1, #0
 8002918:	2047      	movs	r0, #71	@ 0x47
 800291a:	f000 fe28 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800291e:	2047      	movs	r0, #71	@ 0x47
 8002920:	f000 fe41 	bl	80035a6 <HAL_NVIC_EnableIRQ>
}
 8002924:	bf00      	nop
 8002926:	3730      	adds	r7, #48	@ 0x30
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40004400 	.word	0x40004400
 8002930:	40023800 	.word	0x40023800
 8002934:	40020000 	.word	0x40020000
 8002938:	40011400 	.word	0x40011400

0800293c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <NMI_Handler+0x4>

08002944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002948:	bf00      	nop
 800294a:	e7fd      	b.n	8002948 <HardFault_Handler+0x4>

0800294c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002950:	bf00      	nop
 8002952:	e7fd      	b.n	8002950 <MemManage_Handler+0x4>

08002954 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <BusFault_Handler+0x4>

0800295c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <UsageFault_Handler+0x4>

08002964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002992:	f000 f8eb 	bl	8002b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}

0800299a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_Pin);
 800299e:	2010      	movs	r0, #16
 80029a0:	f001 f84c 	bl	8003a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029ac:	4802      	ldr	r0, [pc, #8]	@ (80029b8 <TIM3_IRQHandler+0x10>)
 80029ae:	f002 f8d9 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000110 	.word	0x20000110

080029bc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80029c0:	4802      	ldr	r0, [pc, #8]	@ (80029cc <TIM5_IRQHandler+0x10>)
 80029c2:	f002 f8cf 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200001a0 	.word	0x200001a0

080029d0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80029d4:	4802      	ldr	r0, [pc, #8]	@ (80029e0 <USART6_IRQHandler+0x10>)
 80029d6:	f003 fa07 	bl	8005de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000230 	.word	0x20000230

080029e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ec:	4a14      	ldr	r2, [pc, #80]	@ (8002a40 <_sbrk+0x5c>)
 80029ee:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <_sbrk+0x60>)
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f8:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <_sbrk+0x64>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	@ (8002a4c <_sbrk+0x68>)
 8002a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a06:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d207      	bcs.n	8002a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a14:	f004 f966 	bl	8006ce4 <__errno>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e009      	b.n	8002a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a24:	4b08      	ldr	r3, [pc, #32]	@ (8002a48 <_sbrk+0x64>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	@ (8002a48 <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	4a05      	ldr	r2, [pc, #20]	@ (8002a48 <_sbrk+0x64>)
 8002a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20018000 	.word	0x20018000
 8002a44:	00000400 	.word	0x00000400
 8002a48:	200002e4 	.word	0x200002e4
 8002a4c:	20000438 	.word	0x20000438

08002a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a54:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <SystemInit+0x20>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5a:	4a05      	ldr	r2, [pc, #20]	@ (8002a70 <SystemInit+0x20>)
 8002a5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002aac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a78:	f7ff ffea 	bl	8002a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a7c:	480c      	ldr	r0, [pc, #48]	@ (8002ab0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a7e:	490d      	ldr	r1, [pc, #52]	@ (8002ab4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a80:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a84:	e002      	b.n	8002a8c <LoopCopyDataInit>

08002a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8a:	3304      	adds	r3, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a90:	d3f9      	bcc.n	8002a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a92:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a94:	4c0a      	ldr	r4, [pc, #40]	@ (8002ac0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a98:	e001      	b.n	8002a9e <LoopFillZerobss>

08002a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a9c:	3204      	adds	r2, #4

08002a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa0:	d3fb      	bcc.n	8002a9a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002aa2:	f004 f925 	bl	8006cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aa6:	f7fe f817 	bl	8000ad8 <main>
  bx  lr    
 8002aaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002aac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002ab8:	08007a9c 	.word	0x08007a9c
  ldr r2, =_sbss
 8002abc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002ac0:	20000434 	.word	0x20000434

08002ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac4:	e7fe      	b.n	8002ac4 <ADC_IRQHandler>
	...

08002ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002acc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <HAL_Init+0x40>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b08 <HAL_Init+0x40>)
 8002ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <HAL_Init+0x40>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0a      	ldr	r2, [pc, #40]	@ (8002b08 <HAL_Init+0x40>)
 8002ade:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae4:	4b08      	ldr	r3, [pc, #32]	@ (8002b08 <HAL_Init+0x40>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a07      	ldr	r2, [pc, #28]	@ (8002b08 <HAL_Init+0x40>)
 8002aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af0:	2003      	movs	r0, #3
 8002af2:	f000 fd31 	bl	8003558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af6:	2000      	movs	r0, #0
 8002af8:	f000 f808 	bl	8002b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002afc:	f7ff fd00 	bl	8002500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023c00 	.word	0x40023c00

08002b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b14:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <HAL_InitTick+0x54>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <HAL_InitTick+0x58>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fd49 	bl	80035c2 <HAL_SYSTICK_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e00e      	b.n	8002b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b0f      	cmp	r3, #15
 8002b3e:	d80a      	bhi.n	8002b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b40:	2200      	movs	r2, #0
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	f000 fd11 	bl	800356e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b4c:	4a06      	ldr	r2, [pc, #24]	@ (8002b68 <HAL_InitTick+0x5c>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000008 	.word	0x20000008
 8002b64:	20000010 	.word	0x20000010
 8002b68:	2000000c 	.word	0x2000000c

08002b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b70:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_IncTick+0x20>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <HAL_IncTick+0x24>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a04      	ldr	r2, [pc, #16]	@ (8002b90 <HAL_IncTick+0x24>)
 8002b7e:	6013      	str	r3, [r2, #0]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000010 	.word	0x20000010
 8002b90:	200002e8 	.word	0x200002e8

08002b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return uwTick;
 8002b98:	4b03      	ldr	r3, [pc, #12]	@ (8002ba8 <HAL_GetTick+0x14>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	200002e8 	.word	0x200002e8

08002bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb4:	f7ff ffee 	bl	8002b94 <HAL_GetTick>
 8002bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d005      	beq.n	8002bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <HAL_Delay+0x44>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4413      	add	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bd2:	bf00      	nop
 8002bd4:	f7ff ffde 	bl	8002b94 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d8f7      	bhi.n	8002bd4 <HAL_Delay+0x28>
  {
  }
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000010 	.word	0x20000010

08002bf4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e033      	b.n	8002c72 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fc9c 	bl	8002550 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d118      	bne.n	8002c64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c3a:	f023 0302 	bic.w	r3, r3, #2
 8002c3e:	f043 0202 	orr.w	r2, r3, #2
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 faba 	bl	80031c0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	f023 0303 	bic.w	r3, r3, #3
 8002c5a:	f043 0201 	orr.w	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c62:	e001      	b.n	8002c68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_Start+0x1a>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e097      	b.n	8002dc6 <HAL_ADC_Start+0x14a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d018      	beq.n	8002cde <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cbc:	4b45      	ldr	r3, [pc, #276]	@ (8002dd4 <HAL_ADC_Start+0x158>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a45      	ldr	r2, [pc, #276]	@ (8002dd8 <HAL_ADC_Start+0x15c>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0c9a      	lsrs	r2, r3, #18
 8002cc8:	4613      	mov	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002cd0:	e002      	b.n	8002cd8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f9      	bne.n	8002cd2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d15f      	bne.n	8002dac <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d16:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d2a:	d106      	bne.n	8002d3a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d30:	f023 0206 	bic.w	r2, r3, #6
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d38:	e002      	b.n	8002d40 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d48:	4b24      	ldr	r3, [pc, #144]	@ (8002ddc <HAL_ADC_Start+0x160>)
 8002d4a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002d54:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10f      	bne.n	8002d82 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d129      	bne.n	8002dc4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	e020      	b.n	8002dc4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a16      	ldr	r2, [pc, #88]	@ (8002de0 <HAL_ADC_Start+0x164>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d11b      	bne.n	8002dc4 <HAL_ADC_Start+0x148>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d114      	bne.n	8002dc4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	e00b      	b.n	8002dc4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db0:	f043 0210 	orr.w	r2, r3, #16
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbc:	f043 0201 	orr.w	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000008 	.word	0x20000008
 8002dd8:	431bde83 	.word	0x431bde83
 8002ddc:	40012300 	.word	0x40012300
 8002de0:	40012000 	.word	0x40012000

08002de4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_Stop+0x16>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e021      	b.n	8002e3e <HAL_ADC_Stop+0x5a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e66:	d113      	bne.n	8002e90 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e76:	d10b      	bne.n	8002e90 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e063      	b.n	8002f58 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e90:	f7ff fe80 	bl	8002b94 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e96:	e021      	b.n	8002edc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d01d      	beq.n	8002edc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_ADC_PollForConversion+0x6c>
 8002ea6:	f7ff fe75 	bl	8002b94 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d212      	bcs.n	8002edc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d00b      	beq.n	8002edc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e03d      	b.n	8002f58 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d1d6      	bne.n	8002e98 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f06f 0212 	mvn.w	r2, #18
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d123      	bne.n	8002f56 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11f      	bne.n	8002f56 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d006      	beq.n	8002f32 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d111      	bne.n	8002f56 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x1c>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e105      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x228>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b09      	cmp	r3, #9
 8002fa6:	d925      	bls.n	8002ff4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68d9      	ldr	r1, [r3, #12]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	3b1e      	subs	r3, #30
 8002fbe:	2207      	movs	r2, #7
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43da      	mvns	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	400a      	ands	r2, r1
 8002fcc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68d9      	ldr	r1, [r3, #12]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4403      	add	r3, r0
 8002fe6:	3b1e      	subs	r3, #30
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	e022      	b.n	800303a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6919      	ldr	r1, [r3, #16]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	4613      	mov	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	2207      	movs	r2, #7
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43da      	mvns	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	400a      	ands	r2, r1
 8003016:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6919      	ldr	r1, [r3, #16]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	4618      	mov	r0, r3
 800302a:	4603      	mov	r3, r0
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4403      	add	r3, r0
 8003030:	409a      	lsls	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b06      	cmp	r3, #6
 8003040:	d824      	bhi.n	800308c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	3b05      	subs	r3, #5
 8003054:	221f      	movs	r2, #31
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	400a      	ands	r2, r1
 8003062:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	4618      	mov	r0, r3
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	3b05      	subs	r3, #5
 800307e:	fa00 f203 	lsl.w	r2, r0, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	635a      	str	r2, [r3, #52]	@ 0x34
 800308a:	e04c      	b.n	8003126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b0c      	cmp	r3, #12
 8003092:	d824      	bhi.n	80030de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	3b23      	subs	r3, #35	@ 0x23
 80030a6:	221f      	movs	r2, #31
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43da      	mvns	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	400a      	ands	r2, r1
 80030b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	4618      	mov	r0, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	3b23      	subs	r3, #35	@ 0x23
 80030d0:	fa00 f203 	lsl.w	r2, r0, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	631a      	str	r2, [r3, #48]	@ 0x30
 80030dc:	e023      	b.n	8003126 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	3b41      	subs	r3, #65	@ 0x41
 80030f0:	221f      	movs	r2, #31
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43da      	mvns	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	400a      	ands	r2, r1
 80030fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	4618      	mov	r0, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	3b41      	subs	r3, #65	@ 0x41
 800311a:	fa00 f203 	lsl.w	r2, r0, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003126:	4b22      	ldr	r3, [pc, #136]	@ (80031b0 <HAL_ADC_ConfigChannel+0x234>)
 8003128:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a21      	ldr	r2, [pc, #132]	@ (80031b4 <HAL_ADC_ConfigChannel+0x238>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d109      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x1cc>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b12      	cmp	r3, #18
 800313a:	d105      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a19      	ldr	r2, [pc, #100]	@ (80031b4 <HAL_ADC_ConfigChannel+0x238>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d123      	bne.n	800319a <HAL_ADC_ConfigChannel+0x21e>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b10      	cmp	r3, #16
 8003158:	d003      	beq.n	8003162 <HAL_ADC_ConfigChannel+0x1e6>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b11      	cmp	r3, #17
 8003160:	d11b      	bne.n	800319a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b10      	cmp	r3, #16
 8003174:	d111      	bne.n	800319a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003176:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <HAL_ADC_ConfigChannel+0x23c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a10      	ldr	r2, [pc, #64]	@ (80031bc <HAL_ADC_ConfigChannel+0x240>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	0c9a      	lsrs	r2, r3, #18
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800318c:	e002      	b.n	8003194 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	3b01      	subs	r3, #1
 8003192:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f9      	bne.n	800318e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	40012300 	.word	0x40012300
 80031b4:	40012000 	.word	0x40012000
 80031b8:	20000008 	.word	0x20000008
 80031bc:	431bde83 	.word	0x431bde83

080031c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031c8:	4b79      	ldr	r3, [pc, #484]	@ (80033b0 <ADC_Init+0x1f0>)
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	021a      	lsls	r2, r3, #8
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003218:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800323a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6899      	ldr	r1, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003252:	4a58      	ldr	r2, [pc, #352]	@ (80033b4 <ADC_Init+0x1f4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d022      	beq.n	800329e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003266:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6899      	ldr	r1, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003288:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6899      	ldr	r1, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	e00f      	b.n	80032be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80032bc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0202 	bic.w	r2, r2, #2
 80032cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6899      	ldr	r1, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7e1b      	ldrb	r3, [r3, #24]
 80032d8:	005a      	lsls	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01b      	beq.n	8003324 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032fa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800330a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6859      	ldr	r1, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	3b01      	subs	r3, #1
 8003318:	035a      	lsls	r2, r3, #13
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	e007      	b.n	8003334 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003332:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003342:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	3b01      	subs	r3, #1
 8003350:	051a      	lsls	r2, r3, #20
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6899      	ldr	r1, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003376:	025a      	lsls	r2, r3, #9
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800338e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6899      	ldr	r1, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	029a      	lsls	r2, r3, #10
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	609a      	str	r2, [r3, #8]
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40012300 	.word	0x40012300
 80033b4:	0f000001 	.word	0x0f000001

080033b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c8:	4b0c      	ldr	r3, [pc, #48]	@ (80033fc <__NVIC_SetPriorityGrouping+0x44>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033d4:	4013      	ands	r3, r2
 80033d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ea:	4a04      	ldr	r2, [pc, #16]	@ (80033fc <__NVIC_SetPriorityGrouping+0x44>)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	60d3      	str	r3, [r2, #12]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003404:	4b04      	ldr	r3, [pc, #16]	@ (8003418 <__NVIC_GetPriorityGrouping+0x18>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	0a1b      	lsrs	r3, r3, #8
 800340a:	f003 0307 	and.w	r3, r3, #7
}
 800340e:	4618      	mov	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	2b00      	cmp	r3, #0
 800342c:	db0b      	blt.n	8003446 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	f003 021f 	and.w	r2, r3, #31
 8003434:	4907      	ldr	r1, [pc, #28]	@ (8003454 <__NVIC_EnableIRQ+0x38>)
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	2001      	movs	r0, #1
 800343e:	fa00 f202 	lsl.w	r2, r0, r2
 8003442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	e000e100 	.word	0xe000e100

08003458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	6039      	str	r1, [r7, #0]
 8003462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003468:	2b00      	cmp	r3, #0
 800346a:	db0a      	blt.n	8003482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	b2da      	uxtb	r2, r3
 8003470:	490c      	ldr	r1, [pc, #48]	@ (80034a4 <__NVIC_SetPriority+0x4c>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	0112      	lsls	r2, r2, #4
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	440b      	add	r3, r1
 800347c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003480:	e00a      	b.n	8003498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4908      	ldr	r1, [pc, #32]	@ (80034a8 <__NVIC_SetPriority+0x50>)
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	3b04      	subs	r3, #4
 8003490:	0112      	lsls	r2, r2, #4
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	440b      	add	r3, r1
 8003496:	761a      	strb	r2, [r3, #24]
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	e000e100 	.word	0xe000e100
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b089      	sub	sp, #36	@ 0x24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f1c3 0307 	rsb	r3, r3, #7
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	bf28      	it	cs
 80034ca:	2304      	movcs	r3, #4
 80034cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3304      	adds	r3, #4
 80034d2:	2b06      	cmp	r3, #6
 80034d4:	d902      	bls.n	80034dc <NVIC_EncodePriority+0x30>
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3b03      	subs	r3, #3
 80034da:	e000      	b.n	80034de <NVIC_EncodePriority+0x32>
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	f04f 32ff 	mov.w	r2, #4294967295
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43da      	mvns	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	401a      	ands	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f4:	f04f 31ff 	mov.w	r1, #4294967295
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	43d9      	mvns	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	4313      	orrs	r3, r2
         );
}
 8003506:	4618      	mov	r0, r3
 8003508:	3724      	adds	r7, #36	@ 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003524:	d301      	bcc.n	800352a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003526:	2301      	movs	r3, #1
 8003528:	e00f      	b.n	800354a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800352a:	4a0a      	ldr	r2, [pc, #40]	@ (8003554 <SysTick_Config+0x40>)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3b01      	subs	r3, #1
 8003530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003532:	210f      	movs	r1, #15
 8003534:	f04f 30ff 	mov.w	r0, #4294967295
 8003538:	f7ff ff8e 	bl	8003458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800353c:	4b05      	ldr	r3, [pc, #20]	@ (8003554 <SysTick_Config+0x40>)
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003542:	4b04      	ldr	r3, [pc, #16]	@ (8003554 <SysTick_Config+0x40>)
 8003544:	2207      	movs	r2, #7
 8003546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	e000e010 	.word	0xe000e010

08003558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ff29 	bl	80033b8 <__NVIC_SetPriorityGrouping>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800356e:	b580      	push	{r7, lr}
 8003570:	b086      	sub	sp, #24
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003580:	f7ff ff3e 	bl	8003400 <__NVIC_GetPriorityGrouping>
 8003584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	6978      	ldr	r0, [r7, #20]
 800358c:	f7ff ff8e 	bl	80034ac <NVIC_EncodePriority>
 8003590:	4602      	mov	r2, r0
 8003592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003596:	4611      	mov	r1, r2
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff ff5d 	bl	8003458 <__NVIC_SetPriority>
}
 800359e:	bf00      	nop
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	4603      	mov	r3, r0
 80035ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff ff31 	bl	800341c <__NVIC_EnableIRQ>
}
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff ffa2 	bl	8003514 <SysTick_Config>
 80035d0:	4603      	mov	r3, r0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035e8:	f7ff fad4 	bl	8002b94 <HAL_GetTick>
 80035ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d008      	beq.n	800360c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2280      	movs	r2, #128	@ 0x80
 80035fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e052      	b.n	80036b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0216 	bic.w	r2, r2, #22
 800361a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800362a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <HAL_DMA_Abort+0x62>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0208 	bic.w	r2, r2, #8
 800364a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800365c:	e013      	b.n	8003686 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800365e:	f7ff fa99 	bl	8002b94 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b05      	cmp	r3, #5
 800366a:	d90c      	bls.n	8003686 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2203      	movs	r2, #3
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e015      	b.n	80036b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e4      	bne.n	800365e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003698:	223f      	movs	r2, #63	@ 0x3f
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d004      	beq.n	80036d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2280      	movs	r2, #128	@ 0x80
 80036d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e00c      	b.n	80036f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2205      	movs	r2, #5
 80036dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0201 	bic.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	@ 0x24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	e159      	b.n	80039d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800371c:	2201      	movs	r2, #1
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	429a      	cmp	r2, r3
 8003736:	f040 8148 	bne.w	80039ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d005      	beq.n	8003752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800374e:	2b02      	cmp	r3, #2
 8003750:	d130      	bne.n	80037b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	2203      	movs	r2, #3
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003788:	2201      	movs	r2, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 0201 	and.w	r2, r3, #1
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d017      	beq.n	80037f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	2203      	movs	r2, #3
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d123      	bne.n	8003844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	08da      	lsrs	r2, r3, #3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3208      	adds	r2, #8
 8003804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	220f      	movs	r2, #15
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	08da      	lsrs	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3208      	adds	r2, #8
 800383e:	69b9      	ldr	r1, [r7, #24]
 8003840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	2203      	movs	r2, #3
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0203 	and.w	r2, r3, #3
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80a2 	beq.w	80039ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	4b57      	ldr	r3, [pc, #348]	@ (80039e8 <HAL_GPIO_Init+0x2e8>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	4a56      	ldr	r2, [pc, #344]	@ (80039e8 <HAL_GPIO_Init+0x2e8>)
 8003890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003894:	6453      	str	r3, [r2, #68]	@ 0x44
 8003896:	4b54      	ldr	r3, [pc, #336]	@ (80039e8 <HAL_GPIO_Init+0x2e8>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038a2:	4a52      	ldr	r2, [pc, #328]	@ (80039ec <HAL_GPIO_Init+0x2ec>)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	089b      	lsrs	r3, r3, #2
 80038a8:	3302      	adds	r3, #2
 80038aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	220f      	movs	r2, #15
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a49      	ldr	r2, [pc, #292]	@ (80039f0 <HAL_GPIO_Init+0x2f0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d019      	beq.n	8003902 <HAL_GPIO_Init+0x202>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a48      	ldr	r2, [pc, #288]	@ (80039f4 <HAL_GPIO_Init+0x2f4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_GPIO_Init+0x1fe>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a47      	ldr	r2, [pc, #284]	@ (80039f8 <HAL_GPIO_Init+0x2f8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00d      	beq.n	80038fa <HAL_GPIO_Init+0x1fa>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a46      	ldr	r2, [pc, #280]	@ (80039fc <HAL_GPIO_Init+0x2fc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <HAL_GPIO_Init+0x1f6>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a45      	ldr	r2, [pc, #276]	@ (8003a00 <HAL_GPIO_Init+0x300>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <HAL_GPIO_Init+0x1f2>
 80038ee:	2304      	movs	r3, #4
 80038f0:	e008      	b.n	8003904 <HAL_GPIO_Init+0x204>
 80038f2:	2307      	movs	r3, #7
 80038f4:	e006      	b.n	8003904 <HAL_GPIO_Init+0x204>
 80038f6:	2303      	movs	r3, #3
 80038f8:	e004      	b.n	8003904 <HAL_GPIO_Init+0x204>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e002      	b.n	8003904 <HAL_GPIO_Init+0x204>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_GPIO_Init+0x204>
 8003902:	2300      	movs	r3, #0
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	f002 0203 	and.w	r2, r2, #3
 800390a:	0092      	lsls	r2, r2, #2
 800390c:	4093      	lsls	r3, r2
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003914:	4935      	ldr	r1, [pc, #212]	@ (80039ec <HAL_GPIO_Init+0x2ec>)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	3302      	adds	r3, #2
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003922:	4b38      	ldr	r3, [pc, #224]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003946:	4a2f      	ldr	r2, [pc, #188]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800394c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003970:	4a24      	ldr	r2, [pc, #144]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003976:	4b23      	ldr	r3, [pc, #140]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800399a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039a0:	4b18      	ldr	r3, [pc, #96]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3301      	adds	r3, #1
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b0f      	cmp	r3, #15
 80039d4:	f67f aea2 	bls.w	800371c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	3724      	adds	r7, #36	@ 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40013800 	.word	0x40013800
 80039f0:	40020000 	.word	0x40020000
 80039f4:	40020400 	.word	0x40020400
 80039f8:	40020800 	.word	0x40020800
 80039fc:	40020c00 	.word	0x40020c00
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40013c00 	.word	0x40013c00

08003a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]
 8003a14:	4613      	mov	r3, r2
 8003a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a18:	787b      	ldrb	r3, [r7, #1]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a24:	e003      	b.n	8003a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a26:	887b      	ldrh	r3, [r7, #2]
 8003a28:	041a      	lsls	r2, r3, #16
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	619a      	str	r2, [r3, #24]
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a46:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a52:	4a05      	ldr	r2, [pc, #20]	@ (8003a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe fcea 	bl	8002434 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40013c00 	.word	0x40013c00

08003a6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e267      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d075      	beq.n	8003b76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a8a:	4b88      	ldr	r3, [pc, #544]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d00c      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a96:	4b85      	ldr	r3, [pc, #532]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d112      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aa2:	4b82      	ldr	r3, [pc, #520]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aae:	d10b      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab0:	4b7e      	ldr	r3, [pc, #504]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d05b      	beq.n	8003b74 <HAL_RCC_OscConfig+0x108>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d157      	bne.n	8003b74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e242      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad0:	d106      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x74>
 8003ad2:	4b76      	ldr	r3, [pc, #472]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a75      	ldr	r2, [pc, #468]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e01d      	b.n	8003b1c <HAL_RCC_OscConfig+0xb0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x98>
 8003aea:	4b70      	ldr	r3, [pc, #448]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a6f      	ldr	r2, [pc, #444]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	4b6d      	ldr	r3, [pc, #436]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a6c      	ldr	r2, [pc, #432]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	e00b      	b.n	8003b1c <HAL_RCC_OscConfig+0xb0>
 8003b04:	4b69      	ldr	r3, [pc, #420]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a68      	ldr	r2, [pc, #416]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4b66      	ldr	r3, [pc, #408]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a65      	ldr	r2, [pc, #404]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d013      	beq.n	8003b4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7ff f836 	bl	8002b94 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7ff f832 	bl	8002b94 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	@ 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e207      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0xc0>
 8003b4a:	e014      	b.n	8003b76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7ff f822 	bl	8002b94 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7ff f81e 	bl	8002b94 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	@ 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e1f3      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b66:	4b51      	ldr	r3, [pc, #324]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0xe8>
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d063      	beq.n	8003c4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b82:	4b4a      	ldr	r3, [pc, #296]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 030c 	and.w	r3, r3, #12
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00b      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b8e:	4b47      	ldr	r3, [pc, #284]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d11c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b9a:	4b44      	ldr	r3, [pc, #272]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d116      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba6:	4b41      	ldr	r3, [pc, #260]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_RCC_OscConfig+0x152>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d001      	beq.n	8003bbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e1c7      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4937      	ldr	r1, [pc, #220]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd2:	e03a      	b.n	8003c4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d020      	beq.n	8003c1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bdc:	4b34      	ldr	r3, [pc, #208]	@ (8003cb0 <HAL_RCC_OscConfig+0x244>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be2:	f7fe ffd7 	bl	8002b94 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bea:	f7fe ffd3 	bl	8002b94 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e1a8      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c08:	4b28      	ldr	r3, [pc, #160]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	4925      	ldr	r1, [pc, #148]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	600b      	str	r3, [r1, #0]
 8003c1c:	e015      	b.n	8003c4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c1e:	4b24      	ldr	r3, [pc, #144]	@ (8003cb0 <HAL_RCC_OscConfig+0x244>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fe ffb6 	bl	8002b94 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2c:	f7fe ffb2 	bl	8002b94 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e187      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d036      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d016      	beq.n	8003c8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c5e:	4b15      	ldr	r3, [pc, #84]	@ (8003cb4 <HAL_RCC_OscConfig+0x248>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c64:	f7fe ff96 	bl	8002b94 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6c:	f7fe ff92 	bl	8002b94 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e167      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x200>
 8003c8a:	e01b      	b.n	8003cc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c8c:	4b09      	ldr	r3, [pc, #36]	@ (8003cb4 <HAL_RCC_OscConfig+0x248>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c92:	f7fe ff7f 	bl	8002b94 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c98:	e00e      	b.n	8003cb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9a:	f7fe ff7b 	bl	8002b94 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d907      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e150      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	42470000 	.word	0x42470000
 8003cb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb8:	4b88      	ldr	r3, [pc, #544]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1ea      	bne.n	8003c9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8097 	beq.w	8003e00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd6:	4b81      	ldr	r3, [pc, #516]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10f      	bne.n	8003d02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	4b7d      	ldr	r3, [pc, #500]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	4a7c      	ldr	r2, [pc, #496]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cf2:	4b7a      	ldr	r3, [pc, #488]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d02:	4b77      	ldr	r3, [pc, #476]	@ (8003ee0 <HAL_RCC_OscConfig+0x474>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d118      	bne.n	8003d40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0e:	4b74      	ldr	r3, [pc, #464]	@ (8003ee0 <HAL_RCC_OscConfig+0x474>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a73      	ldr	r2, [pc, #460]	@ (8003ee0 <HAL_RCC_OscConfig+0x474>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1a:	f7fe ff3b 	bl	8002b94 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d22:	f7fe ff37 	bl	8002b94 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e10c      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d34:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee0 <HAL_RCC_OscConfig+0x474>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d106      	bne.n	8003d56 <HAL_RCC_OscConfig+0x2ea>
 8003d48:	4b64      	ldr	r3, [pc, #400]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	4a63      	ldr	r2, [pc, #396]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d54:	e01c      	b.n	8003d90 <HAL_RCC_OscConfig+0x324>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b05      	cmp	r3, #5
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x30c>
 8003d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d62:	4a5e      	ldr	r2, [pc, #376]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d64:	f043 0304 	orr.w	r3, r3, #4
 8003d68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6e:	4a5b      	ldr	r2, [pc, #364]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d76:	e00b      	b.n	8003d90 <HAL_RCC_OscConfig+0x324>
 8003d78:	4b58      	ldr	r3, [pc, #352]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7c:	4a57      	ldr	r2, [pc, #348]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d84:	4b55      	ldr	r3, [pc, #340]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d88:	4a54      	ldr	r2, [pc, #336]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d8a:	f023 0304 	bic.w	r3, r3, #4
 8003d8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d015      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7fe fefc 	bl	8002b94 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da0:	f7fe fef8 	bl	8002b94 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e0cb      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db6:	4b49      	ldr	r3, [pc, #292]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0ee      	beq.n	8003da0 <HAL_RCC_OscConfig+0x334>
 8003dc2:	e014      	b.n	8003dee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc4:	f7fe fee6 	bl	8002b94 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dca:	e00a      	b.n	8003de2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dcc:	f7fe fee2 	bl	8002b94 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e0b5      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de2:	4b3e      	ldr	r3, [pc, #248]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1ee      	bne.n	8003dcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d105      	bne.n	8003e00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df4:	4b39      	ldr	r3, [pc, #228]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	4a38      	ldr	r2, [pc, #224]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003dfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 80a1 	beq.w	8003f4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e0a:	4b34      	ldr	r3, [pc, #208]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d05c      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d141      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1e:	4b31      	ldr	r3, [pc, #196]	@ (8003ee4 <HAL_RCC_OscConfig+0x478>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fe feb6 	bl	8002b94 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2c:	f7fe feb2 	bl	8002b94 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e087      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3e:	4b27      	ldr	r3, [pc, #156]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69da      	ldr	r2, [r3, #28]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	019b      	lsls	r3, r3, #6
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	085b      	lsrs	r3, r3, #1
 8003e62:	3b01      	subs	r3, #1
 8003e64:	041b      	lsls	r3, r3, #16
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6c:	061b      	lsls	r3, r3, #24
 8003e6e:	491b      	ldr	r1, [pc, #108]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee4 <HAL_RCC_OscConfig+0x478>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7a:	f7fe fe8b 	bl	8002b94 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e82:	f7fe fe87 	bl	8002b94 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e05c      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e94:	4b11      	ldr	r3, [pc, #68]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x416>
 8003ea0:	e054      	b.n	8003f4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea2:	4b10      	ldr	r3, [pc, #64]	@ (8003ee4 <HAL_RCC_OscConfig+0x478>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fe fe74 	bl	8002b94 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fe fe70 	bl	8002b94 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e045      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec2:	4b06      	ldr	r3, [pc, #24]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x444>
 8003ece:	e03d      	b.n	8003f4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d107      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e038      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40007000 	.word	0x40007000
 8003ee4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <HAL_RCC_OscConfig+0x4ec>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d028      	beq.n	8003f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d121      	bne.n	8003f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d11a      	bne.n	8003f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f18:	4013      	ands	r3, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d111      	bne.n	8003f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2e:	085b      	lsrs	r3, r3, #1
 8003f30:	3b01      	subs	r3, #1
 8003f32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d107      	bne.n	8003f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40023800 	.word	0x40023800

08003f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0cc      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f70:	4b68      	ldr	r3, [pc, #416]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d90c      	bls.n	8003f98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7e:	4b65      	ldr	r3, [pc, #404]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b63      	ldr	r3, [pc, #396]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0b8      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d020      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb0:	4b59      	ldr	r3, [pc, #356]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4a58      	ldr	r2, [pc, #352]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc8:	4b53      	ldr	r3, [pc, #332]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4a52      	ldr	r2, [pc, #328]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd4:	4b50      	ldr	r3, [pc, #320]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	494d      	ldr	r1, [pc, #308]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d044      	beq.n	800407c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d107      	bne.n	800400a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffa:	4b47      	ldr	r3, [pc, #284]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d119      	bne.n	800403a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e07f      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d003      	beq.n	800401a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004016:	2b03      	cmp	r3, #3
 8004018:	d107      	bne.n	800402a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401a:	4b3f      	ldr	r3, [pc, #252]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d109      	bne.n	800403a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e06f      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402a:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e067      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800403a:	4b37      	ldr	r3, [pc, #220]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f023 0203 	bic.w	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4934      	ldr	r1, [pc, #208]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	4313      	orrs	r3, r2
 800404a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800404c:	f7fe fda2 	bl	8002b94 <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004052:	e00a      	b.n	800406a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004054:	f7fe fd9e 	bl	8002b94 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e04f      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406a:	4b2b      	ldr	r3, [pc, #172]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 020c 	and.w	r2, r3, #12
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	429a      	cmp	r2, r3
 800407a:	d1eb      	bne.n	8004054 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800407c:	4b25      	ldr	r3, [pc, #148]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d20c      	bcs.n	80040a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b22      	ldr	r3, [pc, #136]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b20      	ldr	r3, [pc, #128]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e032      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b0:	4b19      	ldr	r3, [pc, #100]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4916      	ldr	r1, [pc, #88]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ce:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	490e      	ldr	r1, [pc, #56]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040e2:	f000 f821 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 80040e6:	4602      	mov	r2, r0
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	490a      	ldr	r1, [pc, #40]	@ (800411c <HAL_RCC_ClockConfig+0x1c0>)
 80040f4:	5ccb      	ldrb	r3, [r1, r3]
 80040f6:	fa22 f303 	lsr.w	r3, r2, r3
 80040fa:	4a09      	ldr	r2, [pc, #36]	@ (8004120 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040fe:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fd02 	bl	8002b0c <HAL_InitTick>

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40023c00 	.word	0x40023c00
 8004118:	40023800 	.word	0x40023800
 800411c:	08007a40 	.word	0x08007a40
 8004120:	20000008 	.word	0x20000008
 8004124:	2000000c 	.word	0x2000000c

08004128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800412c:	b094      	sub	sp, #80	@ 0x50
 800412e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004140:	4b79      	ldr	r3, [pc, #484]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x200>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	2b08      	cmp	r3, #8
 800414a:	d00d      	beq.n	8004168 <HAL_RCC_GetSysClockFreq+0x40>
 800414c:	2b08      	cmp	r3, #8
 800414e:	f200 80e1 	bhi.w	8004314 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_RCC_GetSysClockFreq+0x34>
 8004156:	2b04      	cmp	r3, #4
 8004158:	d003      	beq.n	8004162 <HAL_RCC_GetSysClockFreq+0x3a>
 800415a:	e0db      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800415c:	4b73      	ldr	r3, [pc, #460]	@ (800432c <HAL_RCC_GetSysClockFreq+0x204>)
 800415e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004160:	e0db      	b.n	800431a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004162:	4b73      	ldr	r3, [pc, #460]	@ (8004330 <HAL_RCC_GetSysClockFreq+0x208>)
 8004164:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004166:	e0d8      	b.n	800431a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004168:	4b6f      	ldr	r3, [pc, #444]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x200>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004170:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004172:	4b6d      	ldr	r3, [pc, #436]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x200>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d063      	beq.n	8004246 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417e:	4b6a      	ldr	r3, [pc, #424]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x200>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	099b      	lsrs	r3, r3, #6
 8004184:	2200      	movs	r2, #0
 8004186:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004188:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800418a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004190:	633b      	str	r3, [r7, #48]	@ 0x30
 8004192:	2300      	movs	r3, #0
 8004194:	637b      	str	r3, [r7, #52]	@ 0x34
 8004196:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800419a:	4622      	mov	r2, r4
 800419c:	462b      	mov	r3, r5
 800419e:	f04f 0000 	mov.w	r0, #0
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	0159      	lsls	r1, r3, #5
 80041a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ac:	0150      	lsls	r0, r2, #5
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4621      	mov	r1, r4
 80041b4:	1a51      	subs	r1, r2, r1
 80041b6:	6139      	str	r1, [r7, #16]
 80041b8:	4629      	mov	r1, r5
 80041ba:	eb63 0301 	sbc.w	r3, r3, r1
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041cc:	4659      	mov	r1, fp
 80041ce:	018b      	lsls	r3, r1, #6
 80041d0:	4651      	mov	r1, sl
 80041d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041d6:	4651      	mov	r1, sl
 80041d8:	018a      	lsls	r2, r1, #6
 80041da:	4651      	mov	r1, sl
 80041dc:	ebb2 0801 	subs.w	r8, r2, r1
 80041e0:	4659      	mov	r1, fp
 80041e2:	eb63 0901 	sbc.w	r9, r3, r1
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041fa:	4690      	mov	r8, r2
 80041fc:	4699      	mov	r9, r3
 80041fe:	4623      	mov	r3, r4
 8004200:	eb18 0303 	adds.w	r3, r8, r3
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	462b      	mov	r3, r5
 8004208:	eb49 0303 	adc.w	r3, r9, r3
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800421a:	4629      	mov	r1, r5
 800421c:	024b      	lsls	r3, r1, #9
 800421e:	4621      	mov	r1, r4
 8004220:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004224:	4621      	mov	r1, r4
 8004226:	024a      	lsls	r2, r1, #9
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800422e:	2200      	movs	r2, #0
 8004230:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004232:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004234:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004238:	f7fc f82a 	bl	8000290 <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4613      	mov	r3, r2
 8004242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004244:	e058      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004246:	4b38      	ldr	r3, [pc, #224]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x200>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	099b      	lsrs	r3, r3, #6
 800424c:	2200      	movs	r2, #0
 800424e:	4618      	mov	r0, r3
 8004250:	4611      	mov	r1, r2
 8004252:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004256:	623b      	str	r3, [r7, #32]
 8004258:	2300      	movs	r3, #0
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
 800425c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	f04f 0000 	mov.w	r0, #0
 8004268:	f04f 0100 	mov.w	r1, #0
 800426c:	0159      	lsls	r1, r3, #5
 800426e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004272:	0150      	lsls	r0, r2, #5
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4641      	mov	r1, r8
 800427a:	ebb2 0a01 	subs.w	sl, r2, r1
 800427e:	4649      	mov	r1, r9
 8004280:	eb63 0b01 	sbc.w	fp, r3, r1
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004290:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004294:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004298:	ebb2 040a 	subs.w	r4, r2, sl
 800429c:	eb63 050b 	sbc.w	r5, r3, fp
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	00eb      	lsls	r3, r5, #3
 80042aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ae:	00e2      	lsls	r2, r4, #3
 80042b0:	4614      	mov	r4, r2
 80042b2:	461d      	mov	r5, r3
 80042b4:	4643      	mov	r3, r8
 80042b6:	18e3      	adds	r3, r4, r3
 80042b8:	603b      	str	r3, [r7, #0]
 80042ba:	464b      	mov	r3, r9
 80042bc:	eb45 0303 	adc.w	r3, r5, r3
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ce:	4629      	mov	r1, r5
 80042d0:	028b      	lsls	r3, r1, #10
 80042d2:	4621      	mov	r1, r4
 80042d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042d8:	4621      	mov	r1, r4
 80042da:	028a      	lsls	r2, r1, #10
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042e2:	2200      	movs	r2, #0
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	61fa      	str	r2, [r7, #28]
 80042e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ec:	f7fb ffd0 	bl	8000290 <__aeabi_uldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4613      	mov	r3, r2
 80042f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x200>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	0c1b      	lsrs	r3, r3, #16
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	3301      	adds	r3, #1
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004308:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800430a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004312:	e002      	b.n	800431a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004314:	4b05      	ldr	r3, [pc, #20]	@ (800432c <HAL_RCC_GetSysClockFreq+0x204>)
 8004316:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800431a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800431c:	4618      	mov	r0, r3
 800431e:	3750      	adds	r7, #80	@ 0x50
 8004320:	46bd      	mov	sp, r7
 8004322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800
 800432c:	00f42400 	.word	0x00f42400
 8004330:	007a1200 	.word	0x007a1200

08004334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004338:	4b03      	ldr	r3, [pc, #12]	@ (8004348 <HAL_RCC_GetHCLKFreq+0x14>)
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000008 	.word	0x20000008

0800434c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004350:	f7ff fff0 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 8004354:	4602      	mov	r2, r0
 8004356:	4b05      	ldr	r3, [pc, #20]	@ (800436c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	0a9b      	lsrs	r3, r3, #10
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	4903      	ldr	r1, [pc, #12]	@ (8004370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004362:	5ccb      	ldrb	r3, [r1, r3]
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004368:	4618      	mov	r0, r3
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40023800 	.word	0x40023800
 8004370:	08007a50 	.word	0x08007a50

08004374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004378:	f7ff ffdc 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 800437c:	4602      	mov	r2, r0
 800437e:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	0b5b      	lsrs	r3, r3, #13
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	4903      	ldr	r1, [pc, #12]	@ (8004398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800438a:	5ccb      	ldrb	r3, [r1, r3]
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004390:	4618      	mov	r0, r3
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40023800 	.word	0x40023800
 8004398:	08007a50 	.word	0x08007a50

0800439c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e041      	b.n	8004432 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fe f940 	bl	8002648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3304      	adds	r3, #4
 80043d8:	4619      	mov	r1, r3
 80043da:	4610      	mov	r0, r2
 80043dc:	f000 ff3a 	bl	8005254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b01      	cmp	r3, #1
 800444e:	d001      	beq.n	8004454 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e03c      	b.n	80044ce <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1e      	ldr	r2, [pc, #120]	@ (80044dc <HAL_TIM_Base_Start+0xa0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d018      	beq.n	8004498 <HAL_TIM_Base_Start+0x5c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800446e:	d013      	beq.n	8004498 <HAL_TIM_Base_Start+0x5c>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1a      	ldr	r2, [pc, #104]	@ (80044e0 <HAL_TIM_Base_Start+0xa4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00e      	beq.n	8004498 <HAL_TIM_Base_Start+0x5c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a19      	ldr	r2, [pc, #100]	@ (80044e4 <HAL_TIM_Base_Start+0xa8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d009      	beq.n	8004498 <HAL_TIM_Base_Start+0x5c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a17      	ldr	r2, [pc, #92]	@ (80044e8 <HAL_TIM_Base_Start+0xac>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_TIM_Base_Start+0x5c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a16      	ldr	r2, [pc, #88]	@ (80044ec <HAL_TIM_Base_Start+0xb0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d111      	bne.n	80044bc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b06      	cmp	r3, #6
 80044a8:	d010      	beq.n	80044cc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ba:	e007      	b.n	80044cc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40010000 	.word	0x40010000
 80044e0:	40000400 	.word	0x40000400
 80044e4:	40000800 	.word	0x40000800
 80044e8:	40000c00 	.word	0x40000c00
 80044ec:	40014000 	.word	0x40014000

080044f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b01      	cmp	r3, #1
 8004502:	d001      	beq.n	8004508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e044      	b.n	8004592 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1e      	ldr	r2, [pc, #120]	@ (80045a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d018      	beq.n	800455c <HAL_TIM_Base_Start_IT+0x6c>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004532:	d013      	beq.n	800455c <HAL_TIM_Base_Start_IT+0x6c>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1a      	ldr	r2, [pc, #104]	@ (80045a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00e      	beq.n	800455c <HAL_TIM_Base_Start_IT+0x6c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a19      	ldr	r2, [pc, #100]	@ (80045a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d009      	beq.n	800455c <HAL_TIM_Base_Start_IT+0x6c>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a17      	ldr	r2, [pc, #92]	@ (80045ac <HAL_TIM_Base_Start_IT+0xbc>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d004      	beq.n	800455c <HAL_TIM_Base_Start_IT+0x6c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a16      	ldr	r2, [pc, #88]	@ (80045b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d111      	bne.n	8004580 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b06      	cmp	r3, #6
 800456c:	d010      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0201 	orr.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457e:	e007      	b.n	8004590 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40010000 	.word	0x40010000
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800
 80045ac:	40000c00 	.word	0x40000c00
 80045b0:	40014000 	.word	0x40014000

080045b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e041      	b.n	800464a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fd fffc 	bl	80025d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f000 fe2e 	bl	8005254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d109      	bne.n	8004678 <HAL_TIM_PWM_Start+0x24>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	bf14      	ite	ne
 8004670:	2301      	movne	r3, #1
 8004672:	2300      	moveq	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e022      	b.n	80046be <HAL_TIM_PWM_Start+0x6a>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b04      	cmp	r3, #4
 800467c:	d109      	bne.n	8004692 <HAL_TIM_PWM_Start+0x3e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	bf14      	ite	ne
 800468a:	2301      	movne	r3, #1
 800468c:	2300      	moveq	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	e015      	b.n	80046be <HAL_TIM_PWM_Start+0x6a>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b08      	cmp	r3, #8
 8004696:	d109      	bne.n	80046ac <HAL_TIM_PWM_Start+0x58>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	bf14      	ite	ne
 80046a4:	2301      	movne	r3, #1
 80046a6:	2300      	moveq	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	e008      	b.n	80046be <HAL_TIM_PWM_Start+0x6a>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	bf14      	ite	ne
 80046b8:	2301      	movne	r3, #1
 80046ba:	2300      	moveq	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e068      	b.n	8004798 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d104      	bne.n	80046d6 <HAL_TIM_PWM_Start+0x82>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046d4:	e013      	b.n	80046fe <HAL_TIM_PWM_Start+0xaa>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d104      	bne.n	80046e6 <HAL_TIM_PWM_Start+0x92>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e4:	e00b      	b.n	80046fe <HAL_TIM_PWM_Start+0xaa>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d104      	bne.n	80046f6 <HAL_TIM_PWM_Start+0xa2>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f4:	e003      	b.n	80046fe <HAL_TIM_PWM_Start+0xaa>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2201      	movs	r2, #1
 8004704:	6839      	ldr	r1, [r7, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f001 f974 	bl	80059f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a23      	ldr	r2, [pc, #140]	@ (80047a0 <HAL_TIM_PWM_Start+0x14c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d107      	bne.n	8004726 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004724:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1d      	ldr	r2, [pc, #116]	@ (80047a0 <HAL_TIM_PWM_Start+0x14c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d018      	beq.n	8004762 <HAL_TIM_PWM_Start+0x10e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004738:	d013      	beq.n	8004762 <HAL_TIM_PWM_Start+0x10e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a19      	ldr	r2, [pc, #100]	@ (80047a4 <HAL_TIM_PWM_Start+0x150>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_TIM_PWM_Start+0x10e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a17      	ldr	r2, [pc, #92]	@ (80047a8 <HAL_TIM_PWM_Start+0x154>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d009      	beq.n	8004762 <HAL_TIM_PWM_Start+0x10e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a16      	ldr	r2, [pc, #88]	@ (80047ac <HAL_TIM_PWM_Start+0x158>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_TIM_PWM_Start+0x10e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a14      	ldr	r2, [pc, #80]	@ (80047b0 <HAL_TIM_PWM_Start+0x15c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d111      	bne.n	8004786 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b06      	cmp	r3, #6
 8004772:	d010      	beq.n	8004796 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004784:	e007      	b.n	8004796 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0201 	orr.w	r2, r2, #1
 8004794:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40010000 	.word	0x40010000
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800
 80047ac:	40000c00 	.word	0x40000c00
 80047b0:	40014000 	.word	0x40014000

080047b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2200      	movs	r2, #0
 80047c4:	6839      	ldr	r1, [r7, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f001 f914 	bl	80059f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a29      	ldr	r2, [pc, #164]	@ (8004878 <HAL_TIM_PWM_Stop+0xc4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d117      	bne.n	8004806 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6a1a      	ldr	r2, [r3, #32]
 80047dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10f      	bne.n	8004806 <HAL_TIM_PWM_Stop+0x52>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6a1a      	ldr	r2, [r3, #32]
 80047ec:	f240 4344 	movw	r3, #1092	@ 0x444
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d107      	bne.n	8004806 <HAL_TIM_PWM_Stop+0x52>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004804:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6a1a      	ldr	r2, [r3, #32]
 800480c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004810:	4013      	ands	r3, r2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10f      	bne.n	8004836 <HAL_TIM_PWM_Stop+0x82>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a1a      	ldr	r2, [r3, #32]
 800481c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004820:	4013      	ands	r3, r2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d107      	bne.n	8004836 <HAL_TIM_PWM_Stop+0x82>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0201 	bic.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <HAL_TIM_PWM_Stop+0x92>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004844:	e013      	b.n	800486e <HAL_TIM_PWM_Stop+0xba>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b04      	cmp	r3, #4
 800484a:	d104      	bne.n	8004856 <HAL_TIM_PWM_Stop+0xa2>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004854:	e00b      	b.n	800486e <HAL_TIM_PWM_Stop+0xba>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d104      	bne.n	8004866 <HAL_TIM_PWM_Stop+0xb2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004864:	e003      	b.n	800486e <HAL_TIM_PWM_Stop+0xba>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40010000 	.word	0x40010000

0800487c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e041      	b.n	8004912 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f839 	bl	800491a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3304      	adds	r3, #4
 80048b8:	4619      	mov	r1, r3
 80048ba:	4610      	mov	r0, r2
 80048bc:	f000 fcca 	bl	8005254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
	...

08004930 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d104      	bne.n	800494e <HAL_TIM_IC_Start_IT+0x1e>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800494a:	b2db      	uxtb	r3, r3
 800494c:	e013      	b.n	8004976 <HAL_TIM_IC_Start_IT+0x46>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b04      	cmp	r3, #4
 8004952:	d104      	bne.n	800495e <HAL_TIM_IC_Start_IT+0x2e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800495a:	b2db      	uxtb	r3, r3
 800495c:	e00b      	b.n	8004976 <HAL_TIM_IC_Start_IT+0x46>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d104      	bne.n	800496e <HAL_TIM_IC_Start_IT+0x3e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800496a:	b2db      	uxtb	r3, r3
 800496c:	e003      	b.n	8004976 <HAL_TIM_IC_Start_IT+0x46>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004974:	b2db      	uxtb	r3, r3
 8004976:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <HAL_TIM_IC_Start_IT+0x58>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004984:	b2db      	uxtb	r3, r3
 8004986:	e013      	b.n	80049b0 <HAL_TIM_IC_Start_IT+0x80>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b04      	cmp	r3, #4
 800498c:	d104      	bne.n	8004998 <HAL_TIM_IC_Start_IT+0x68>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e00b      	b.n	80049b0 <HAL_TIM_IC_Start_IT+0x80>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b08      	cmp	r3, #8
 800499c:	d104      	bne.n	80049a8 <HAL_TIM_IC_Start_IT+0x78>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e003      	b.n	80049b0 <HAL_TIM_IC_Start_IT+0x80>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80049b2:	7bbb      	ldrb	r3, [r7, #14]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d102      	bne.n	80049be <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80049b8:	7b7b      	ldrb	r3, [r7, #13]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d001      	beq.n	80049c2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e0c2      	b.n	8004b48 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d104      	bne.n	80049d2 <HAL_TIM_IC_Start_IT+0xa2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049d0:	e013      	b.n	80049fa <HAL_TIM_IC_Start_IT+0xca>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d104      	bne.n	80049e2 <HAL_TIM_IC_Start_IT+0xb2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049e0:	e00b      	b.n	80049fa <HAL_TIM_IC_Start_IT+0xca>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d104      	bne.n	80049f2 <HAL_TIM_IC_Start_IT+0xc2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049f0:	e003      	b.n	80049fa <HAL_TIM_IC_Start_IT+0xca>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d104      	bne.n	8004a0a <HAL_TIM_IC_Start_IT+0xda>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a08:	e013      	b.n	8004a32 <HAL_TIM_IC_Start_IT+0x102>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d104      	bne.n	8004a1a <HAL_TIM_IC_Start_IT+0xea>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a18:	e00b      	b.n	8004a32 <HAL_TIM_IC_Start_IT+0x102>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d104      	bne.n	8004a2a <HAL_TIM_IC_Start_IT+0xfa>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a28:	e003      	b.n	8004a32 <HAL_TIM_IC_Start_IT+0x102>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b0c      	cmp	r3, #12
 8004a36:	d841      	bhi.n	8004abc <HAL_TIM_IC_Start_IT+0x18c>
 8004a38:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <HAL_TIM_IC_Start_IT+0x110>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a75 	.word	0x08004a75
 8004a44:	08004abd 	.word	0x08004abd
 8004a48:	08004abd 	.word	0x08004abd
 8004a4c:	08004abd 	.word	0x08004abd
 8004a50:	08004a87 	.word	0x08004a87
 8004a54:	08004abd 	.word	0x08004abd
 8004a58:	08004abd 	.word	0x08004abd
 8004a5c:	08004abd 	.word	0x08004abd
 8004a60:	08004a99 	.word	0x08004a99
 8004a64:	08004abd 	.word	0x08004abd
 8004a68:	08004abd 	.word	0x08004abd
 8004a6c:	08004abd 	.word	0x08004abd
 8004a70:	08004aab 	.word	0x08004aab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0202 	orr.w	r2, r2, #2
 8004a82:	60da      	str	r2, [r3, #12]
      break;
 8004a84:	e01d      	b.n	8004ac2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0204 	orr.w	r2, r2, #4
 8004a94:	60da      	str	r2, [r3, #12]
      break;
 8004a96:	e014      	b.n	8004ac2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0208 	orr.w	r2, r2, #8
 8004aa6:	60da      	str	r2, [r3, #12]
      break;
 8004aa8:	e00b      	b.n	8004ac2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0210 	orr.w	r2, r2, #16
 8004ab8:	60da      	str	r2, [r3, #12]
      break;
 8004aba:	e002      	b.n	8004ac2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d13e      	bne.n	8004b46 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2201      	movs	r2, #1
 8004ace:	6839      	ldr	r1, [r7, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 ff8f 	bl	80059f4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1d      	ldr	r2, [pc, #116]	@ (8004b50 <HAL_TIM_IC_Start_IT+0x220>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d018      	beq.n	8004b12 <HAL_TIM_IC_Start_IT+0x1e2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae8:	d013      	beq.n	8004b12 <HAL_TIM_IC_Start_IT+0x1e2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a19      	ldr	r2, [pc, #100]	@ (8004b54 <HAL_TIM_IC_Start_IT+0x224>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00e      	beq.n	8004b12 <HAL_TIM_IC_Start_IT+0x1e2>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a17      	ldr	r2, [pc, #92]	@ (8004b58 <HAL_TIM_IC_Start_IT+0x228>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d009      	beq.n	8004b12 <HAL_TIM_IC_Start_IT+0x1e2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a16      	ldr	r2, [pc, #88]	@ (8004b5c <HAL_TIM_IC_Start_IT+0x22c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d004      	beq.n	8004b12 <HAL_TIM_IC_Start_IT+0x1e2>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a14      	ldr	r2, [pc, #80]	@ (8004b60 <HAL_TIM_IC_Start_IT+0x230>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d111      	bne.n	8004b36 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b06      	cmp	r3, #6
 8004b22:	d010      	beq.n	8004b46 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b34:	e007      	b.n	8004b46 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40000800 	.word	0x40000800
 8004b5c:	40000c00 	.word	0x40000c00
 8004b60:	40014000 	.word	0x40014000

08004b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d020      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01b      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0202 	mvn.w	r2, #2
 8004b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fd fbde 	bl	8002370 <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fb2e 	bl	8005218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fb35 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d020      	beq.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01b      	beq.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0204 	mvn.w	r2, #4
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fd fbb8 	bl	8002370 <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fb08 	bl	8005218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fb0f 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d020      	beq.n	8004c60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01b      	beq.n	8004c60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0208 	mvn.w	r2, #8
 8004c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2204      	movs	r2, #4
 8004c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fd fb92 	bl	8002370 <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fae2 	bl	8005218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fae9 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d020      	beq.n	8004cac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01b      	beq.n	8004cac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0210 	mvn.w	r2, #16
 8004c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2208      	movs	r2, #8
 8004c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fd fb6c 	bl	8002370 <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fabc 	bl	8005218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fac3 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0201 	mvn.w	r2, #1
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fd fbd4 	bl	8002478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00c      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d007      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 ff70 	bl	8005bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00c      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fa94 	bl	8005240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00c      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0220 	mvn.w	r2, #32
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 ff42 	bl	8005bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e088      	b.n	8004e74 <HAL_TIM_IC_ConfigChannel+0x130>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d11b      	bne.n	8004da8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004d80:	f000 fc80 	bl	8005684 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 020c 	bic.w	r2, r2, #12
 8004d92:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6999      	ldr	r1, [r3, #24]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	619a      	str	r2, [r3, #24]
 8004da6:	e060      	b.n	8004e6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d11c      	bne.n	8004de8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004dbe:	f000 fcf8 	bl	80057b2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699a      	ldr	r2, [r3, #24]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004dd0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6999      	ldr	r1, [r3, #24]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	021a      	lsls	r2, r3, #8
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	619a      	str	r2, [r3, #24]
 8004de6:	e040      	b.n	8004e6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d11b      	bne.n	8004e26 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004dfe:	f000 fd45 	bl	800588c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 020c 	bic.w	r2, r2, #12
 8004e10:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69d9      	ldr	r1, [r3, #28]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	61da      	str	r2, [r3, #28]
 8004e24:	e021      	b.n	8004e6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b0c      	cmp	r3, #12
 8004e2a:	d11c      	bne.n	8004e66 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004e3c:	f000 fd62 	bl	8005904 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69da      	ldr	r2, [r3, #28]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004e4e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69d9      	ldr	r1, [r3, #28]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	021a      	lsls	r2, r3, #8
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	61da      	str	r2, [r3, #28]
 8004e64:	e001      	b.n	8004e6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e0ae      	b.n	8004ff8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b0c      	cmp	r3, #12
 8004ea6:	f200 809f 	bhi.w	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb0:	08004ee5 	.word	0x08004ee5
 8004eb4:	08004fe9 	.word	0x08004fe9
 8004eb8:	08004fe9 	.word	0x08004fe9
 8004ebc:	08004fe9 	.word	0x08004fe9
 8004ec0:	08004f25 	.word	0x08004f25
 8004ec4:	08004fe9 	.word	0x08004fe9
 8004ec8:	08004fe9 	.word	0x08004fe9
 8004ecc:	08004fe9 	.word	0x08004fe9
 8004ed0:	08004f67 	.word	0x08004f67
 8004ed4:	08004fe9 	.word	0x08004fe9
 8004ed8:	08004fe9 	.word	0x08004fe9
 8004edc:	08004fe9 	.word	0x08004fe9
 8004ee0:	08004fa7 	.word	0x08004fa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fa3e 	bl	800536c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0208 	orr.w	r2, r2, #8
 8004efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0204 	bic.w	r2, r2, #4
 8004f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6999      	ldr	r1, [r3, #24]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	619a      	str	r2, [r3, #24]
      break;
 8004f22:	e064      	b.n	8004fee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fa84 	bl	8005438 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6999      	ldr	r1, [r3, #24]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	021a      	lsls	r2, r3, #8
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	619a      	str	r2, [r3, #24]
      break;
 8004f64:	e043      	b.n	8004fee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 facf 	bl	8005510 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0208 	orr.w	r2, r2, #8
 8004f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0204 	bic.w	r2, r2, #4
 8004f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69d9      	ldr	r1, [r3, #28]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	61da      	str	r2, [r3, #28]
      break;
 8004fa4:	e023      	b.n	8004fee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fb19 	bl	80055e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69d9      	ldr	r1, [r3, #28]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	021a      	lsls	r2, r3, #8
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	61da      	str	r2, [r3, #28]
      break;
 8004fe6:	e002      	b.n	8004fee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	75fb      	strb	r3, [r7, #23]
      break;
 8004fec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_TIM_ConfigClockSource+0x1c>
 8005018:	2302      	movs	r3, #2
 800501a:	e0b4      	b.n	8005186 <HAL_TIM_ConfigClockSource+0x186>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800503a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005054:	d03e      	beq.n	80050d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800505a:	f200 8087 	bhi.w	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800505e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005062:	f000 8086 	beq.w	8005172 <HAL_TIM_ConfigClockSource+0x172>
 8005066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506a:	d87f      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800506c:	2b70      	cmp	r3, #112	@ 0x70
 800506e:	d01a      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005070:	2b70      	cmp	r3, #112	@ 0x70
 8005072:	d87b      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b60      	cmp	r3, #96	@ 0x60
 8005076:	d050      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x11a>
 8005078:	2b60      	cmp	r3, #96	@ 0x60
 800507a:	d877      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b50      	cmp	r3, #80	@ 0x50
 800507e:	d03c      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0xfa>
 8005080:	2b50      	cmp	r3, #80	@ 0x50
 8005082:	d873      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b40      	cmp	r3, #64	@ 0x40
 8005086:	d058      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x13a>
 8005088:	2b40      	cmp	r3, #64	@ 0x40
 800508a:	d86f      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b30      	cmp	r3, #48	@ 0x30
 800508e:	d064      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15a>
 8005090:	2b30      	cmp	r3, #48	@ 0x30
 8005092:	d86b      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 8005094:	2b20      	cmp	r3, #32
 8005096:	d060      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15a>
 8005098:	2b20      	cmp	r3, #32
 800509a:	d867      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d05c      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15a>
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d05a      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15a>
 80050a4:	e062      	b.n	800516c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050b6:	f000 fc7d 	bl	80059b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	609a      	str	r2, [r3, #8]
      break;
 80050d2:	e04f      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050e4:	f000 fc66 	bl	80059b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050f6:	609a      	str	r2, [r3, #8]
      break;
 80050f8:	e03c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005106:	461a      	mov	r2, r3
 8005108:	f000 fb24 	bl	8005754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2150      	movs	r1, #80	@ 0x50
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fc33 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005118:	e02c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005126:	461a      	mov	r2, r3
 8005128:	f000 fb80 	bl	800582c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2160      	movs	r1, #96	@ 0x60
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fc23 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005138:	e01c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005146:	461a      	mov	r2, r3
 8005148:	f000 fb04 	bl	8005754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2140      	movs	r1, #64	@ 0x40
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fc13 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005158:	e00c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f000 fc0a 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 800516a:	e003      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
      break;
 8005170:	e000      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005184:	7bfb      	ldrb	r3, [r7, #15]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b0c      	cmp	r3, #12
 80051a2:	d831      	bhi.n	8005208 <HAL_TIM_ReadCapturedValue+0x78>
 80051a4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ac <HAL_TIM_ReadCapturedValue+0x1c>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051e1 	.word	0x080051e1
 80051b0:	08005209 	.word	0x08005209
 80051b4:	08005209 	.word	0x08005209
 80051b8:	08005209 	.word	0x08005209
 80051bc:	080051eb 	.word	0x080051eb
 80051c0:	08005209 	.word	0x08005209
 80051c4:	08005209 	.word	0x08005209
 80051c8:	08005209 	.word	0x08005209
 80051cc:	080051f5 	.word	0x080051f5
 80051d0:	08005209 	.word	0x08005209
 80051d4:	08005209 	.word	0x08005209
 80051d8:	08005209 	.word	0x08005209
 80051dc:	080051ff 	.word	0x080051ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e6:	60fb      	str	r3, [r7, #12]

      break;
 80051e8:	e00f      	b.n	800520a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f0:	60fb      	str	r3, [r7, #12]

      break;
 80051f2:	e00a      	b.n	800520a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fa:	60fb      	str	r3, [r7, #12]

      break;
 80051fc:	e005      	b.n	800520a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005204:	60fb      	str	r3, [r7, #12]

      break;
 8005206:	e000      	b.n	800520a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005208:	bf00      	nop
  }

  return tmpreg;
 800520a:	68fb      	ldr	r3, [r7, #12]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a3a      	ldr	r2, [pc, #232]	@ (8005350 <TIM_Base_SetConfig+0xfc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00f      	beq.n	800528c <TIM_Base_SetConfig+0x38>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005272:	d00b      	beq.n	800528c <TIM_Base_SetConfig+0x38>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a37      	ldr	r2, [pc, #220]	@ (8005354 <TIM_Base_SetConfig+0x100>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <TIM_Base_SetConfig+0x38>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a36      	ldr	r2, [pc, #216]	@ (8005358 <TIM_Base_SetConfig+0x104>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_Base_SetConfig+0x38>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a35      	ldr	r2, [pc, #212]	@ (800535c <TIM_Base_SetConfig+0x108>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d108      	bne.n	800529e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005350 <TIM_Base_SetConfig+0xfc>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d01b      	beq.n	80052de <TIM_Base_SetConfig+0x8a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ac:	d017      	beq.n	80052de <TIM_Base_SetConfig+0x8a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a28      	ldr	r2, [pc, #160]	@ (8005354 <TIM_Base_SetConfig+0x100>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <TIM_Base_SetConfig+0x8a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a27      	ldr	r2, [pc, #156]	@ (8005358 <TIM_Base_SetConfig+0x104>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00f      	beq.n	80052de <TIM_Base_SetConfig+0x8a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a26      	ldr	r2, [pc, #152]	@ (800535c <TIM_Base_SetConfig+0x108>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00b      	beq.n	80052de <TIM_Base_SetConfig+0x8a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a25      	ldr	r2, [pc, #148]	@ (8005360 <TIM_Base_SetConfig+0x10c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d007      	beq.n	80052de <TIM_Base_SetConfig+0x8a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a24      	ldr	r2, [pc, #144]	@ (8005364 <TIM_Base_SetConfig+0x110>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d003      	beq.n	80052de <TIM_Base_SetConfig+0x8a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a23      	ldr	r2, [pc, #140]	@ (8005368 <TIM_Base_SetConfig+0x114>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d108      	bne.n	80052f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a0e      	ldr	r2, [pc, #56]	@ (8005350 <TIM_Base_SetConfig+0xfc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d103      	bne.n	8005324 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b01      	cmp	r3, #1
 8005334:	d105      	bne.n	8005342 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f023 0201 	bic.w	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	611a      	str	r2, [r3, #16]
  }
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40010000 	.word	0x40010000
 8005354:	40000400 	.word	0x40000400
 8005358:	40000800 	.word	0x40000800
 800535c:	40000c00 	.word	0x40000c00
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800

0800536c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f023 0201 	bic.w	r2, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f023 0302 	bic.w	r3, r3, #2
 80053b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005434 <TIM_OC1_SetConfig+0xc8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d10c      	bne.n	80053e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f023 0308 	bic.w	r3, r3, #8
 80053ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f023 0304 	bic.w	r3, r3, #4
 80053e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a13      	ldr	r2, [pc, #76]	@ (8005434 <TIM_OC1_SetConfig+0xc8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d111      	bne.n	800540e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	621a      	str	r2, [r3, #32]
}
 8005428:	bf00      	nop
 800542a:	371c      	adds	r7, #28
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	40010000 	.word	0x40010000

08005438 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	f023 0210 	bic.w	r2, r3, #16
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800546e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f023 0320 	bic.w	r3, r3, #32
 8005482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a1e      	ldr	r2, [pc, #120]	@ (800550c <TIM_OC2_SetConfig+0xd4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d10d      	bne.n	80054b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800549e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a15      	ldr	r2, [pc, #84]	@ (800550c <TIM_OC2_SetConfig+0xd4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d113      	bne.n	80054e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40010000 	.word	0x40010000

08005510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0303 	bic.w	r3, r3, #3
 8005546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	021b      	lsls	r3, r3, #8
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a1d      	ldr	r2, [pc, #116]	@ (80055e0 <TIM_OC3_SetConfig+0xd0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d10d      	bne.n	800558a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005574:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	021b      	lsls	r3, r3, #8
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a14      	ldr	r2, [pc, #80]	@ (80055e0 <TIM_OC3_SetConfig+0xd0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d113      	bne.n	80055ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	621a      	str	r2, [r3, #32]
}
 80055d4:	bf00      	nop
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	40010000 	.word	0x40010000

080055e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800561a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	021b      	lsls	r3, r3, #8
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800562e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	031b      	lsls	r3, r3, #12
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a10      	ldr	r2, [pc, #64]	@ (8005680 <TIM_OC4_SetConfig+0x9c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d109      	bne.n	8005658 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800564a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	019b      	lsls	r3, r3, #6
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000

08005684 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f023 0201 	bic.w	r2, r3, #1
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4a24      	ldr	r2, [pc, #144]	@ (8005740 <TIM_TI1_SetConfig+0xbc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <TIM_TI1_SetConfig+0x56>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b8:	d00f      	beq.n	80056da <TIM_TI1_SetConfig+0x56>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4a21      	ldr	r2, [pc, #132]	@ (8005744 <TIM_TI1_SetConfig+0xc0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00b      	beq.n	80056da <TIM_TI1_SetConfig+0x56>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4a20      	ldr	r2, [pc, #128]	@ (8005748 <TIM_TI1_SetConfig+0xc4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d007      	beq.n	80056da <TIM_TI1_SetConfig+0x56>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4a1f      	ldr	r2, [pc, #124]	@ (800574c <TIM_TI1_SetConfig+0xc8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d003      	beq.n	80056da <TIM_TI1_SetConfig+0x56>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005750 <TIM_TI1_SetConfig+0xcc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <TIM_TI1_SetConfig+0x5a>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <TIM_TI1_SetConfig+0x5c>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	e003      	b.n	80056fe <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005704:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	b2db      	uxtb	r3, r3
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f023 030a 	bic.w	r3, r3, #10
 8005718:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f003 030a 	and.w	r3, r3, #10
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40010000 	.word	0x40010000
 8005744:	40000400 	.word	0x40000400
 8005748:	40000800 	.word	0x40000800
 800574c:	40000c00 	.word	0x40000c00
 8005750:	40014000 	.word	0x40014000

08005754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	f023 0201 	bic.w	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800577e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f023 030a 	bic.w	r3, r3, #10
 8005790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b087      	sub	sp, #28
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
 80057be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0210 	bic.w	r2, r3, #16
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	021b      	lsls	r3, r3, #8
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	031b      	lsls	r3, r3, #12
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005804:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	621a      	str	r2, [r3, #32]
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f023 0210 	bic.w	r2, r3, #16
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	031b      	lsls	r3, r3, #12
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005868:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	621a      	str	r2, [r3, #32]
}
 8005880:	bf00      	nop
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f023 0303 	bic.w	r3, r3, #3
 80058b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80058dc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	021b      	lsls	r3, r3, #8
 80058e2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	621a      	str	r2, [r3, #32]
}
 80058f8:	bf00      	nop
 80058fa:	371c      	adds	r7, #28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005930:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	021b      	lsls	r3, r3, #8
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005942:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	031b      	lsls	r3, r3, #12
 8005948:	b29b      	uxth	r3, r3
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005956:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	031b      	lsls	r3, r3, #12
 800595c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	f043 0307 	orr.w	r3, r3, #7
 80059a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	609a      	str	r2, [r3, #8]
}
 80059a8:	bf00      	nop
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	021a      	lsls	r2, r3, #8
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4313      	orrs	r3, r2
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	609a      	str	r2, [r3, #8]
}
 80059e8:	bf00      	nop
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	2201      	movs	r2, #1
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a1a      	ldr	r2, [r3, #32]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	43db      	mvns	r3, r3
 8005a16:	401a      	ands	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1a      	ldr	r2, [r3, #32]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 031f 	and.w	r3, r3, #31
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]
}
 8005a32:	bf00      	nop
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
	...

08005a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e050      	b.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a1c      	ldr	r2, [pc, #112]	@ (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d018      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa4:	d013      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a18      	ldr	r2, [pc, #96]	@ (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00e      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a16      	ldr	r2, [pc, #88]	@ (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d009      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a15      	ldr	r2, [pc, #84]	@ (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a13      	ldr	r2, [pc, #76]	@ (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d10c      	bne.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	40000400 	.word	0x40000400
 8005b10:	40000800 	.word	0x40000800
 8005b14:	40000c00 	.word	0x40000c00
 8005b18:	40014000 	.word	0x40014000

08005b1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e03d      	b.n	8005bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e042      	b.n	8005c80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fc fe10 	bl	8002834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2224      	movs	r2, #36	@ 0x24
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fdbd 	bl	80067ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695a      	ldr	r2, [r3, #20]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08a      	sub	sp, #40	@ 0x28
 8005c8c:	af02      	add	r7, sp, #8
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	4613      	mov	r3, r2
 8005c96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	d175      	bne.n	8005d94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <HAL_UART_Transmit+0x2c>
 8005cae:	88fb      	ldrh	r3, [r7, #6]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e06e      	b.n	8005d96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2221      	movs	r2, #33	@ 0x21
 8005cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cc6:	f7fc ff65 	bl	8002b94 <HAL_GetTick>
 8005cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	88fa      	ldrh	r2, [r7, #6]
 8005cd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	88fa      	ldrh	r2, [r7, #6]
 8005cd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ce0:	d108      	bne.n	8005cf4 <HAL_UART_Transmit+0x6c>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d104      	bne.n	8005cf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	61bb      	str	r3, [r7, #24]
 8005cf2:	e003      	b.n	8005cfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005cfc:	e02e      	b.n	8005d5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2200      	movs	r2, #0
 8005d06:	2180      	movs	r1, #128	@ 0x80
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 fb1f 	bl	800634c <UART_WaitOnFlagUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d005      	beq.n	8005d20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e03a      	b.n	8005d96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10b      	bne.n	8005d3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	3302      	adds	r3, #2
 8005d3a:	61bb      	str	r3, [r7, #24]
 8005d3c:	e007      	b.n	8005d4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	781a      	ldrb	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1cb      	bne.n	8005cfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2140      	movs	r1, #64	@ 0x40
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 faeb 	bl	800634c <UART_WaitOnFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e006      	b.n	8005d96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	e000      	b.n	8005d96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005d94:	2302      	movs	r3, #2
  }
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3720      	adds	r7, #32
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	4613      	mov	r3, r2
 8005daa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d112      	bne.n	8005dde <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_UART_Receive_IT+0x26>
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e00b      	b.n	8005de0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	68b9      	ldr	r1, [r7, #8]
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fb12 	bl	80063fe <UART_Start_Receive_IT>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	e000      	b.n	8005de0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005dde:	2302      	movs	r3, #2
  }
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b0ba      	sub	sp, #232	@ 0xe8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10f      	bne.n	8005e4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <HAL_UART_IRQHandler+0x66>
 8005e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fbf2 	bl	8006630 <UART_Receive_IT>
      return;
 8005e4c:	e25b      	b.n	8006306 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 80de 	beq.w	8006014 <HAL_UART_IRQHandler+0x22c>
 8005e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d106      	bne.n	8005e72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 80d1 	beq.w	8006014 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00b      	beq.n	8005e96 <HAL_UART_IRQHandler+0xae>
 8005e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8e:	f043 0201 	orr.w	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00b      	beq.n	8005eba <HAL_UART_IRQHandler+0xd2>
 8005ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb2:	f043 0202 	orr.w	r2, r3, #2
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00b      	beq.n	8005ede <HAL_UART_IRQHandler+0xf6>
 8005ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d005      	beq.n	8005ede <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed6:	f043 0204 	orr.w	r2, r3, #4
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d011      	beq.n	8005f0e <HAL_UART_IRQHandler+0x126>
 8005eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d105      	bne.n	8005f02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f06:	f043 0208 	orr.w	r2, r3, #8
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 81f2 	beq.w	80062fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <HAL_UART_IRQHandler+0x14e>
 8005f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f28:	f003 0320 	and.w	r3, r3, #32
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fb7d 	bl	8006630 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f40:	2b40      	cmp	r3, #64	@ 0x40
 8005f42:	bf0c      	ite	eq
 8005f44:	2301      	moveq	r3, #1
 8005f46:	2300      	movne	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <HAL_UART_IRQHandler+0x17a>
 8005f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d04f      	beq.n	8006002 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa85 	bl	8006472 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f72:	2b40      	cmp	r3, #64	@ 0x40
 8005f74:	d141      	bne.n	8005ffa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3314      	adds	r3, #20
 8005f7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3314      	adds	r3, #20
 8005f9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005fa2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1d9      	bne.n	8005f76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d013      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fce:	4a7e      	ldr	r2, [pc, #504]	@ (80061c8 <HAL_UART_IRQHandler+0x3e0>)
 8005fd0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fd fb6f 	bl	80036ba <HAL_DMA_Abort_IT>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d016      	beq.n	8006010 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005fec:	4610      	mov	r0, r2
 8005fee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff0:	e00e      	b.n	8006010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f994 	bl	8006320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff8:	e00a      	b.n	8006010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f990 	bl	8006320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	e006      	b.n	8006010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f98c 	bl	8006320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800600e:	e175      	b.n	80062fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	bf00      	nop
    return;
 8006012:	e173      	b.n	80062fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006018:	2b01      	cmp	r3, #1
 800601a:	f040 814f 	bne.w	80062bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800601e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006022:	f003 0310 	and.w	r3, r3, #16
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 8148 	beq.w	80062bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800602c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8141 	beq.w	80062bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800603a:	2300      	movs	r3, #0
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605a:	2b40      	cmp	r3, #64	@ 0x40
 800605c:	f040 80b6 	bne.w	80061cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800606c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 8145 	beq.w	8006300 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800607a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800607e:	429a      	cmp	r2, r3
 8006080:	f080 813e 	bcs.w	8006300 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800608a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006096:	f000 8088 	beq.w	80061aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	330c      	adds	r3, #12
 80060a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	330c      	adds	r3, #12
 80060c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80060c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1d9      	bne.n	800609a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3314      	adds	r3, #20
 80060ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060f8:	f023 0301 	bic.w	r3, r3, #1
 80060fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3314      	adds	r3, #20
 8006106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800610a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800610e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006110:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006112:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800611c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e1      	bne.n	80060e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3314      	adds	r3, #20
 8006128:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006138:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3314      	adds	r3, #20
 8006142:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006146:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006148:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800614c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e3      	bne.n	8006122 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2220      	movs	r2, #32
 800615e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	330c      	adds	r3, #12
 800616e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006172:	e853 3f00 	ldrex	r3, [r3]
 8006176:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800617a:	f023 0310 	bic.w	r3, r3, #16
 800617e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	330c      	adds	r3, #12
 8006188:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800618c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800618e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006192:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800619a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e3      	bne.n	8006168 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fd fa18 	bl	80035da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2202      	movs	r2, #2
 80061ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	b29b      	uxth	r3, r3
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f8b7 	bl	8006334 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061c6:	e09b      	b.n	8006300 <HAL_UART_IRQHandler+0x518>
 80061c8:	08006539 	.word	0x08006539
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 808e 	beq.w	8006304 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80061e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 8089 	beq.w	8006304 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	330c      	adds	r3, #12
 80061f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006204:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006208:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	330c      	adds	r3, #12
 8006212:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006216:	647a      	str	r2, [r7, #68]	@ 0x44
 8006218:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800621c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e3      	bne.n	80061f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3314      	adds	r3, #20
 8006230:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	623b      	str	r3, [r7, #32]
   return(result);
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	f023 0301 	bic.w	r3, r3, #1
 8006240:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3314      	adds	r3, #20
 800624a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800624e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006250:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800625c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e3      	bne.n	800622a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2220      	movs	r2, #32
 8006266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	330c      	adds	r3, #12
 8006276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	e853 3f00 	ldrex	r3, [r3]
 800627e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0310 	bic.w	r3, r3, #16
 8006286:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	330c      	adds	r3, #12
 8006290:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006294:	61fa      	str	r2, [r7, #28]
 8006296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	69b9      	ldr	r1, [r7, #24]
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	617b      	str	r3, [r7, #20]
   return(result);
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e3      	bne.n	8006270 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f83d 	bl	8006334 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062ba:	e023      	b.n	8006304 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d009      	beq.n	80062dc <HAL_UART_IRQHandler+0x4f4>
 80062c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f943 	bl	8006560 <UART_Transmit_IT>
    return;
 80062da:	e014      	b.n	8006306 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00e      	beq.n	8006306 <HAL_UART_IRQHandler+0x51e>
 80062e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d008      	beq.n	8006306 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f983 	bl	8006600 <UART_EndTransmit_IT>
    return;
 80062fa:	e004      	b.n	8006306 <HAL_UART_IRQHandler+0x51e>
    return;
 80062fc:	bf00      	nop
 80062fe:	e002      	b.n	8006306 <HAL_UART_IRQHandler+0x51e>
      return;
 8006300:	bf00      	nop
 8006302:	e000      	b.n	8006306 <HAL_UART_IRQHandler+0x51e>
      return;
 8006304:	bf00      	nop
  }
}
 8006306:	37e8      	adds	r7, #232	@ 0xe8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	4613      	mov	r3, r2
 800635a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800635c:	e03b      	b.n	80063d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006364:	d037      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006366:	f7fc fc15 	bl	8002b94 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	6a3a      	ldr	r2, [r7, #32]
 8006372:	429a      	cmp	r2, r3
 8006374:	d302      	bcc.n	800637c <UART_WaitOnFlagUntilTimeout+0x30>
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e03a      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f003 0304 	and.w	r3, r3, #4
 800638a:	2b00      	cmp	r3, #0
 800638c:	d023      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b80      	cmp	r3, #128	@ 0x80
 8006392:	d020      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b40      	cmp	r3, #64	@ 0x40
 8006398:	d01d      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d116      	bne.n	80063d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 f857 	bl	8006472 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2208      	movs	r2, #8
 80063c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e00f      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4013      	ands	r3, r2
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	bf0c      	ite	eq
 80063e6:	2301      	moveq	r3, #1
 80063e8:	2300      	movne	r3, #0
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	79fb      	ldrb	r3, [r7, #7]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d0b4      	beq.n	800635e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063fe:	b480      	push	{r7}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	60f8      	str	r0, [r7, #12]
 8006406:	60b9      	str	r1, [r7, #8]
 8006408:	4613      	mov	r3, r2
 800640a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2222      	movs	r2, #34	@ 0x22
 8006428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d007      	beq.n	8006444 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006442:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695a      	ldr	r2, [r3, #20]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0201 	orr.w	r2, r2, #1
 8006452:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0220 	orr.w	r2, r2, #32
 8006462:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006472:	b480      	push	{r7}
 8006474:	b095      	sub	sp, #84	@ 0x54
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	330c      	adds	r3, #12
 8006480:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006484:	e853 3f00 	ldrex	r3, [r3]
 8006488:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800648a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006490:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	330c      	adds	r3, #12
 8006498:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800649a:	643a      	str	r2, [r7, #64]	@ 0x40
 800649c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e5      	bne.n	800647a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3314      	adds	r3, #20
 80064b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	f023 0301 	bic.w	r3, r3, #1
 80064c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3314      	adds	r3, #20
 80064cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e5      	bne.n	80064ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d119      	bne.n	800651e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	330c      	adds	r3, #12
 80064f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f023 0310 	bic.w	r3, r3, #16
 8006500:	647b      	str	r3, [r7, #68]	@ 0x44
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800650a:	61ba      	str	r2, [r7, #24]
 800650c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	6979      	ldr	r1, [r7, #20]
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	e841 2300 	strex	r3, r2, [r1]
 8006516:	613b      	str	r3, [r7, #16]
   return(result);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1e5      	bne.n	80064ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2220      	movs	r2, #32
 8006522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800652c:	bf00      	nop
 800652e:	3754      	adds	r7, #84	@ 0x54
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006544:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f7ff fee4 	bl	8006320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006558:	bf00      	nop
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b21      	cmp	r3, #33	@ 0x21
 8006572:	d13e      	bne.n	80065f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800657c:	d114      	bne.n	80065a8 <UART_Transmit_IT+0x48>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d110      	bne.n	80065a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	461a      	mov	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800659a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	1c9a      	adds	r2, r3, #2
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	621a      	str	r2, [r3, #32]
 80065a6:	e008      	b.n	80065ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	1c59      	adds	r1, r3, #1
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6211      	str	r1, [r2, #32]
 80065b2:	781a      	ldrb	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	4619      	mov	r1, r3
 80065c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10f      	bne.n	80065ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	e000      	b.n	80065f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065f2:	2302      	movs	r3, #2
  }
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68da      	ldr	r2, [r3, #12]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006616:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff fe73 	bl	800630c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08c      	sub	sp, #48	@ 0x30
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b22      	cmp	r3, #34	@ 0x22
 8006642:	f040 80ae 	bne.w	80067a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800664e:	d117      	bne.n	8006680 <UART_Receive_IT+0x50>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d113      	bne.n	8006680 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006658:	2300      	movs	r3, #0
 800665a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	b29b      	uxth	r3, r3
 800666a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666e:	b29a      	uxth	r2, r3
 8006670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006672:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006678:	1c9a      	adds	r2, r3, #2
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	629a      	str	r2, [r3, #40]	@ 0x28
 800667e:	e026      	b.n	80066ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006684:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006686:	2300      	movs	r3, #0
 8006688:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006692:	d007      	beq.n	80066a4 <UART_Receive_IT+0x74>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <UART_Receive_IT+0x82>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ae:	701a      	strb	r2, [r3, #0]
 80066b0:	e008      	b.n	80066c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	3b01      	subs	r3, #1
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	4619      	mov	r1, r3
 80066dc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d15d      	bne.n	800679e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0220 	bic.w	r2, r2, #32
 80066f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006700:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	695a      	ldr	r2, [r3, #20]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0201 	bic.w	r2, r2, #1
 8006710:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006724:	2b01      	cmp	r3, #1
 8006726:	d135      	bne.n	8006794 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	330c      	adds	r3, #12
 8006734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	613b      	str	r3, [r7, #16]
   return(result);
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f023 0310 	bic.w	r3, r3, #16
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	330c      	adds	r3, #12
 800674c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800674e:	623a      	str	r2, [r7, #32]
 8006750:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	69f9      	ldr	r1, [r7, #28]
 8006754:	6a3a      	ldr	r2, [r7, #32]
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	61bb      	str	r3, [r7, #24]
   return(result);
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e5      	bne.n	800672e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b10      	cmp	r3, #16
 800676e:	d10a      	bne.n	8006786 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff fdd1 	bl	8006334 <HAL_UARTEx_RxEventCallback>
 8006792:	e002      	b.n	800679a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7fb fe27 	bl	80023e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	e002      	b.n	80067a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e000      	b.n	80067a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80067a2:	2302      	movs	r3, #2
  }
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3730      	adds	r7, #48	@ 0x30
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067b0:	b0c0      	sub	sp, #256	@ 0x100
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80067c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c8:	68d9      	ldr	r1, [r3, #12]
 80067ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	ea40 0301 	orr.w	r3, r0, r1
 80067d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	431a      	orrs	r2, r3
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006804:	f021 010c 	bic.w	r1, r1, #12
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006812:	430b      	orrs	r3, r1
 8006814:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006826:	6999      	ldr	r1, [r3, #24]
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	ea40 0301 	orr.w	r3, r0, r1
 8006832:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4b8f      	ldr	r3, [pc, #572]	@ (8006a78 <UART_SetConfig+0x2cc>)
 800683c:	429a      	cmp	r2, r3
 800683e:	d005      	beq.n	800684c <UART_SetConfig+0xa0>
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	4b8d      	ldr	r3, [pc, #564]	@ (8006a7c <UART_SetConfig+0x2d0>)
 8006848:	429a      	cmp	r2, r3
 800684a:	d104      	bne.n	8006856 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800684c:	f7fd fd92 	bl	8004374 <HAL_RCC_GetPCLK2Freq>
 8006850:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006854:	e003      	b.n	800685e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006856:	f7fd fd79 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 800685a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800685e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006868:	f040 810c 	bne.w	8006a84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800686c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006870:	2200      	movs	r2, #0
 8006872:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006876:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800687a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800687e:	4622      	mov	r2, r4
 8006880:	462b      	mov	r3, r5
 8006882:	1891      	adds	r1, r2, r2
 8006884:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006886:	415b      	adcs	r3, r3
 8006888:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800688a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800688e:	4621      	mov	r1, r4
 8006890:	eb12 0801 	adds.w	r8, r2, r1
 8006894:	4629      	mov	r1, r5
 8006896:	eb43 0901 	adc.w	r9, r3, r1
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068ae:	4690      	mov	r8, r2
 80068b0:	4699      	mov	r9, r3
 80068b2:	4623      	mov	r3, r4
 80068b4:	eb18 0303 	adds.w	r3, r8, r3
 80068b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068bc:	462b      	mov	r3, r5
 80068be:	eb49 0303 	adc.w	r3, r9, r3
 80068c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80068d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80068da:	460b      	mov	r3, r1
 80068dc:	18db      	adds	r3, r3, r3
 80068de:	653b      	str	r3, [r7, #80]	@ 0x50
 80068e0:	4613      	mov	r3, r2
 80068e2:	eb42 0303 	adc.w	r3, r2, r3
 80068e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80068e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80068ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80068f0:	f7f9 fcce 	bl	8000290 <__aeabi_uldivmod>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4b61      	ldr	r3, [pc, #388]	@ (8006a80 <UART_SetConfig+0x2d4>)
 80068fa:	fba3 2302 	umull	r2, r3, r3, r2
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	011c      	lsls	r4, r3, #4
 8006902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006906:	2200      	movs	r2, #0
 8006908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800690c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006910:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006914:	4642      	mov	r2, r8
 8006916:	464b      	mov	r3, r9
 8006918:	1891      	adds	r1, r2, r2
 800691a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800691c:	415b      	adcs	r3, r3
 800691e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006920:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006924:	4641      	mov	r1, r8
 8006926:	eb12 0a01 	adds.w	sl, r2, r1
 800692a:	4649      	mov	r1, r9
 800692c:	eb43 0b01 	adc.w	fp, r3, r1
 8006930:	f04f 0200 	mov.w	r2, #0
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800693c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006944:	4692      	mov	sl, r2
 8006946:	469b      	mov	fp, r3
 8006948:	4643      	mov	r3, r8
 800694a:	eb1a 0303 	adds.w	r3, sl, r3
 800694e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006952:	464b      	mov	r3, r9
 8006954:	eb4b 0303 	adc.w	r3, fp, r3
 8006958:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006968:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800696c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006970:	460b      	mov	r3, r1
 8006972:	18db      	adds	r3, r3, r3
 8006974:	643b      	str	r3, [r7, #64]	@ 0x40
 8006976:	4613      	mov	r3, r2
 8006978:	eb42 0303 	adc.w	r3, r2, r3
 800697c:	647b      	str	r3, [r7, #68]	@ 0x44
 800697e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006982:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006986:	f7f9 fc83 	bl	8000290 <__aeabi_uldivmod>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	4611      	mov	r1, r2
 8006990:	4b3b      	ldr	r3, [pc, #236]	@ (8006a80 <UART_SetConfig+0x2d4>)
 8006992:	fba3 2301 	umull	r2, r3, r3, r1
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	2264      	movs	r2, #100	@ 0x64
 800699a:	fb02 f303 	mul.w	r3, r2, r3
 800699e:	1acb      	subs	r3, r1, r3
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80069a6:	4b36      	ldr	r3, [pc, #216]	@ (8006a80 <UART_SetConfig+0x2d4>)
 80069a8:	fba3 2302 	umull	r2, r3, r3, r2
 80069ac:	095b      	lsrs	r3, r3, #5
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80069b4:	441c      	add	r4, r3
 80069b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80069c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80069c8:	4642      	mov	r2, r8
 80069ca:	464b      	mov	r3, r9
 80069cc:	1891      	adds	r1, r2, r2
 80069ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80069d0:	415b      	adcs	r3, r3
 80069d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069d8:	4641      	mov	r1, r8
 80069da:	1851      	adds	r1, r2, r1
 80069dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80069de:	4649      	mov	r1, r9
 80069e0:	414b      	adcs	r3, r1
 80069e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069e4:	f04f 0200 	mov.w	r2, #0
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80069f0:	4659      	mov	r1, fp
 80069f2:	00cb      	lsls	r3, r1, #3
 80069f4:	4651      	mov	r1, sl
 80069f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069fa:	4651      	mov	r1, sl
 80069fc:	00ca      	lsls	r2, r1, #3
 80069fe:	4610      	mov	r0, r2
 8006a00:	4619      	mov	r1, r3
 8006a02:	4603      	mov	r3, r0
 8006a04:	4642      	mov	r2, r8
 8006a06:	189b      	adds	r3, r3, r2
 8006a08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	460a      	mov	r2, r1
 8006a10:	eb42 0303 	adc.w	r3, r2, r3
 8006a14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006a28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	18db      	adds	r3, r3, r3
 8006a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a32:	4613      	mov	r3, r2
 8006a34:	eb42 0303 	adc.w	r3, r2, r3
 8006a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a42:	f7f9 fc25 	bl	8000290 <__aeabi_uldivmod>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a80 <UART_SetConfig+0x2d4>)
 8006a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	2164      	movs	r1, #100	@ 0x64
 8006a54:	fb01 f303 	mul.w	r3, r1, r3
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	3332      	adds	r3, #50	@ 0x32
 8006a5e:	4a08      	ldr	r2, [pc, #32]	@ (8006a80 <UART_SetConfig+0x2d4>)
 8006a60:	fba2 2303 	umull	r2, r3, r2, r3
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	f003 0207 	and.w	r2, r3, #7
 8006a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4422      	add	r2, r4
 8006a72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a74:	e106      	b.n	8006c84 <UART_SetConfig+0x4d8>
 8006a76:	bf00      	nop
 8006a78:	40011000 	.word	0x40011000
 8006a7c:	40011400 	.word	0x40011400
 8006a80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006a92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006a96:	4642      	mov	r2, r8
 8006a98:	464b      	mov	r3, r9
 8006a9a:	1891      	adds	r1, r2, r2
 8006a9c:	6239      	str	r1, [r7, #32]
 8006a9e:	415b      	adcs	r3, r3
 8006aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aa6:	4641      	mov	r1, r8
 8006aa8:	1854      	adds	r4, r2, r1
 8006aaa:	4649      	mov	r1, r9
 8006aac:	eb43 0501 	adc.w	r5, r3, r1
 8006ab0:	f04f 0200 	mov.w	r2, #0
 8006ab4:	f04f 0300 	mov.w	r3, #0
 8006ab8:	00eb      	lsls	r3, r5, #3
 8006aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006abe:	00e2      	lsls	r2, r4, #3
 8006ac0:	4614      	mov	r4, r2
 8006ac2:	461d      	mov	r5, r3
 8006ac4:	4643      	mov	r3, r8
 8006ac6:	18e3      	adds	r3, r4, r3
 8006ac8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006acc:	464b      	mov	r3, r9
 8006ace:	eb45 0303 	adc.w	r3, r5, r3
 8006ad2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ae2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ae6:	f04f 0200 	mov.w	r2, #0
 8006aea:	f04f 0300 	mov.w	r3, #0
 8006aee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006af2:	4629      	mov	r1, r5
 8006af4:	008b      	lsls	r3, r1, #2
 8006af6:	4621      	mov	r1, r4
 8006af8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006afc:	4621      	mov	r1, r4
 8006afe:	008a      	lsls	r2, r1, #2
 8006b00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006b04:	f7f9 fbc4 	bl	8000290 <__aeabi_uldivmod>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4b60      	ldr	r3, [pc, #384]	@ (8006c90 <UART_SetConfig+0x4e4>)
 8006b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	011c      	lsls	r4, r3, #4
 8006b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	1891      	adds	r1, r2, r2
 8006b2e:	61b9      	str	r1, [r7, #24]
 8006b30:	415b      	adcs	r3, r3
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b38:	4641      	mov	r1, r8
 8006b3a:	1851      	adds	r1, r2, r1
 8006b3c:	6139      	str	r1, [r7, #16]
 8006b3e:	4649      	mov	r1, r9
 8006b40:	414b      	adcs	r3, r1
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b50:	4659      	mov	r1, fp
 8006b52:	00cb      	lsls	r3, r1, #3
 8006b54:	4651      	mov	r1, sl
 8006b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b5a:	4651      	mov	r1, sl
 8006b5c:	00ca      	lsls	r2, r1, #3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	4603      	mov	r3, r0
 8006b64:	4642      	mov	r2, r8
 8006b66:	189b      	adds	r3, r3, r2
 8006b68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	460a      	mov	r2, r1
 8006b70:	eb42 0303 	adc.w	r3, r2, r3
 8006b74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	f04f 0300 	mov.w	r3, #0
 8006b8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006b90:	4649      	mov	r1, r9
 8006b92:	008b      	lsls	r3, r1, #2
 8006b94:	4641      	mov	r1, r8
 8006b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b9a:	4641      	mov	r1, r8
 8006b9c:	008a      	lsls	r2, r1, #2
 8006b9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ba2:	f7f9 fb75 	bl	8000290 <__aeabi_uldivmod>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4611      	mov	r1, r2
 8006bac:	4b38      	ldr	r3, [pc, #224]	@ (8006c90 <UART_SetConfig+0x4e4>)
 8006bae:	fba3 2301 	umull	r2, r3, r3, r1
 8006bb2:	095b      	lsrs	r3, r3, #5
 8006bb4:	2264      	movs	r2, #100	@ 0x64
 8006bb6:	fb02 f303 	mul.w	r3, r2, r3
 8006bba:	1acb      	subs	r3, r1, r3
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	3332      	adds	r3, #50	@ 0x32
 8006bc0:	4a33      	ldr	r2, [pc, #204]	@ (8006c90 <UART_SetConfig+0x4e4>)
 8006bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc6:	095b      	lsrs	r3, r3, #5
 8006bc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bcc:	441c      	add	r4, r3
 8006bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006bd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006bd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006bdc:	4642      	mov	r2, r8
 8006bde:	464b      	mov	r3, r9
 8006be0:	1891      	adds	r1, r2, r2
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	415b      	adcs	r3, r3
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bec:	4641      	mov	r1, r8
 8006bee:	1851      	adds	r1, r2, r1
 8006bf0:	6039      	str	r1, [r7, #0]
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	414b      	adcs	r3, r1
 8006bf6:	607b      	str	r3, [r7, #4]
 8006bf8:	f04f 0200 	mov.w	r2, #0
 8006bfc:	f04f 0300 	mov.w	r3, #0
 8006c00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c04:	4659      	mov	r1, fp
 8006c06:	00cb      	lsls	r3, r1, #3
 8006c08:	4651      	mov	r1, sl
 8006c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c0e:	4651      	mov	r1, sl
 8006c10:	00ca      	lsls	r2, r1, #3
 8006c12:	4610      	mov	r0, r2
 8006c14:	4619      	mov	r1, r3
 8006c16:	4603      	mov	r3, r0
 8006c18:	4642      	mov	r2, r8
 8006c1a:	189b      	adds	r3, r3, r2
 8006c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c1e:	464b      	mov	r3, r9
 8006c20:	460a      	mov	r2, r1
 8006c22:	eb42 0303 	adc.w	r3, r2, r3
 8006c26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c32:	667a      	str	r2, [r7, #100]	@ 0x64
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	f04f 0300 	mov.w	r3, #0
 8006c3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c40:	4649      	mov	r1, r9
 8006c42:	008b      	lsls	r3, r1, #2
 8006c44:	4641      	mov	r1, r8
 8006c46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c4a:	4641      	mov	r1, r8
 8006c4c:	008a      	lsls	r2, r1, #2
 8006c4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c52:	f7f9 fb1d 	bl	8000290 <__aeabi_uldivmod>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c90 <UART_SetConfig+0x4e4>)
 8006c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c60:	095b      	lsrs	r3, r3, #5
 8006c62:	2164      	movs	r1, #100	@ 0x64
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	3332      	adds	r3, #50	@ 0x32
 8006c6e:	4a08      	ldr	r2, [pc, #32]	@ (8006c90 <UART_SetConfig+0x4e4>)
 8006c70:	fba2 2303 	umull	r2, r3, r2, r3
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	f003 020f 	and.w	r2, r3, #15
 8006c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4422      	add	r2, r4
 8006c82:	609a      	str	r2, [r3, #8]
}
 8006c84:	bf00      	nop
 8006c86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c90:	51eb851f 	.word	0x51eb851f

08006c94 <siprintf>:
 8006c94:	b40e      	push	{r1, r2, r3}
 8006c96:	b500      	push	{lr}
 8006c98:	b09c      	sub	sp, #112	@ 0x70
 8006c9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c9c:	9002      	str	r0, [sp, #8]
 8006c9e:	9006      	str	r0, [sp, #24]
 8006ca0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ca4:	4809      	ldr	r0, [pc, #36]	@ (8006ccc <siprintf+0x38>)
 8006ca6:	9107      	str	r1, [sp, #28]
 8006ca8:	9104      	str	r1, [sp, #16]
 8006caa:	4909      	ldr	r1, [pc, #36]	@ (8006cd0 <siprintf+0x3c>)
 8006cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cb0:	9105      	str	r1, [sp, #20]
 8006cb2:	6800      	ldr	r0, [r0, #0]
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	a902      	add	r1, sp, #8
 8006cb8:	f000 f994 	bl	8006fe4 <_svfiprintf_r>
 8006cbc:	9b02      	ldr	r3, [sp, #8]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	b01c      	add	sp, #112	@ 0x70
 8006cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cc8:	b003      	add	sp, #12
 8006cca:	4770      	bx	lr
 8006ccc:	20000014 	.word	0x20000014
 8006cd0:	ffff0208 	.word	0xffff0208

08006cd4 <memset>:
 8006cd4:	4402      	add	r2, r0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d100      	bne.n	8006cde <memset+0xa>
 8006cdc:	4770      	bx	lr
 8006cde:	f803 1b01 	strb.w	r1, [r3], #1
 8006ce2:	e7f9      	b.n	8006cd8 <memset+0x4>

08006ce4 <__errno>:
 8006ce4:	4b01      	ldr	r3, [pc, #4]	@ (8006cec <__errno+0x8>)
 8006ce6:	6818      	ldr	r0, [r3, #0]
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	20000014 	.word	0x20000014

08006cf0 <__libc_init_array>:
 8006cf0:	b570      	push	{r4, r5, r6, lr}
 8006cf2:	4d0d      	ldr	r5, [pc, #52]	@ (8006d28 <__libc_init_array+0x38>)
 8006cf4:	4c0d      	ldr	r4, [pc, #52]	@ (8006d2c <__libc_init_array+0x3c>)
 8006cf6:	1b64      	subs	r4, r4, r5
 8006cf8:	10a4      	asrs	r4, r4, #2
 8006cfa:	2600      	movs	r6, #0
 8006cfc:	42a6      	cmp	r6, r4
 8006cfe:	d109      	bne.n	8006d14 <__libc_init_array+0x24>
 8006d00:	4d0b      	ldr	r5, [pc, #44]	@ (8006d30 <__libc_init_array+0x40>)
 8006d02:	4c0c      	ldr	r4, [pc, #48]	@ (8006d34 <__libc_init_array+0x44>)
 8006d04:	f000 fc66 	bl	80075d4 <_init>
 8006d08:	1b64      	subs	r4, r4, r5
 8006d0a:	10a4      	asrs	r4, r4, #2
 8006d0c:	2600      	movs	r6, #0
 8006d0e:	42a6      	cmp	r6, r4
 8006d10:	d105      	bne.n	8006d1e <__libc_init_array+0x2e>
 8006d12:	bd70      	pop	{r4, r5, r6, pc}
 8006d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d18:	4798      	blx	r3
 8006d1a:	3601      	adds	r6, #1
 8006d1c:	e7ee      	b.n	8006cfc <__libc_init_array+0xc>
 8006d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d22:	4798      	blx	r3
 8006d24:	3601      	adds	r6, #1
 8006d26:	e7f2      	b.n	8006d0e <__libc_init_array+0x1e>
 8006d28:	08007a94 	.word	0x08007a94
 8006d2c:	08007a94 	.word	0x08007a94
 8006d30:	08007a94 	.word	0x08007a94
 8006d34:	08007a98 	.word	0x08007a98

08006d38 <__retarget_lock_acquire_recursive>:
 8006d38:	4770      	bx	lr

08006d3a <__retarget_lock_release_recursive>:
 8006d3a:	4770      	bx	lr

08006d3c <_free_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	4605      	mov	r5, r0
 8006d40:	2900      	cmp	r1, #0
 8006d42:	d041      	beq.n	8006dc8 <_free_r+0x8c>
 8006d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d48:	1f0c      	subs	r4, r1, #4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bfb8      	it	lt
 8006d4e:	18e4      	addlt	r4, r4, r3
 8006d50:	f000 f8e0 	bl	8006f14 <__malloc_lock>
 8006d54:	4a1d      	ldr	r2, [pc, #116]	@ (8006dcc <_free_r+0x90>)
 8006d56:	6813      	ldr	r3, [r2, #0]
 8006d58:	b933      	cbnz	r3, 8006d68 <_free_r+0x2c>
 8006d5a:	6063      	str	r3, [r4, #4]
 8006d5c:	6014      	str	r4, [r2, #0]
 8006d5e:	4628      	mov	r0, r5
 8006d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d64:	f000 b8dc 	b.w	8006f20 <__malloc_unlock>
 8006d68:	42a3      	cmp	r3, r4
 8006d6a:	d908      	bls.n	8006d7e <_free_r+0x42>
 8006d6c:	6820      	ldr	r0, [r4, #0]
 8006d6e:	1821      	adds	r1, r4, r0
 8006d70:	428b      	cmp	r3, r1
 8006d72:	bf01      	itttt	eq
 8006d74:	6819      	ldreq	r1, [r3, #0]
 8006d76:	685b      	ldreq	r3, [r3, #4]
 8006d78:	1809      	addeq	r1, r1, r0
 8006d7a:	6021      	streq	r1, [r4, #0]
 8006d7c:	e7ed      	b.n	8006d5a <_free_r+0x1e>
 8006d7e:	461a      	mov	r2, r3
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	b10b      	cbz	r3, 8006d88 <_free_r+0x4c>
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	d9fa      	bls.n	8006d7e <_free_r+0x42>
 8006d88:	6811      	ldr	r1, [r2, #0]
 8006d8a:	1850      	adds	r0, r2, r1
 8006d8c:	42a0      	cmp	r0, r4
 8006d8e:	d10b      	bne.n	8006da8 <_free_r+0x6c>
 8006d90:	6820      	ldr	r0, [r4, #0]
 8006d92:	4401      	add	r1, r0
 8006d94:	1850      	adds	r0, r2, r1
 8006d96:	4283      	cmp	r3, r0
 8006d98:	6011      	str	r1, [r2, #0]
 8006d9a:	d1e0      	bne.n	8006d5e <_free_r+0x22>
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	6053      	str	r3, [r2, #4]
 8006da2:	4408      	add	r0, r1
 8006da4:	6010      	str	r0, [r2, #0]
 8006da6:	e7da      	b.n	8006d5e <_free_r+0x22>
 8006da8:	d902      	bls.n	8006db0 <_free_r+0x74>
 8006daa:	230c      	movs	r3, #12
 8006dac:	602b      	str	r3, [r5, #0]
 8006dae:	e7d6      	b.n	8006d5e <_free_r+0x22>
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	1821      	adds	r1, r4, r0
 8006db4:	428b      	cmp	r3, r1
 8006db6:	bf04      	itt	eq
 8006db8:	6819      	ldreq	r1, [r3, #0]
 8006dba:	685b      	ldreq	r3, [r3, #4]
 8006dbc:	6063      	str	r3, [r4, #4]
 8006dbe:	bf04      	itt	eq
 8006dc0:	1809      	addeq	r1, r1, r0
 8006dc2:	6021      	streq	r1, [r4, #0]
 8006dc4:	6054      	str	r4, [r2, #4]
 8006dc6:	e7ca      	b.n	8006d5e <_free_r+0x22>
 8006dc8:	bd38      	pop	{r3, r4, r5, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000430 	.word	0x20000430

08006dd0 <sbrk_aligned>:
 8006dd0:	b570      	push	{r4, r5, r6, lr}
 8006dd2:	4e0f      	ldr	r6, [pc, #60]	@ (8006e10 <sbrk_aligned+0x40>)
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	6831      	ldr	r1, [r6, #0]
 8006dd8:	4605      	mov	r5, r0
 8006dda:	b911      	cbnz	r1, 8006de2 <sbrk_aligned+0x12>
 8006ddc:	f000 fba6 	bl	800752c <_sbrk_r>
 8006de0:	6030      	str	r0, [r6, #0]
 8006de2:	4621      	mov	r1, r4
 8006de4:	4628      	mov	r0, r5
 8006de6:	f000 fba1 	bl	800752c <_sbrk_r>
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	d103      	bne.n	8006df6 <sbrk_aligned+0x26>
 8006dee:	f04f 34ff 	mov.w	r4, #4294967295
 8006df2:	4620      	mov	r0, r4
 8006df4:	bd70      	pop	{r4, r5, r6, pc}
 8006df6:	1cc4      	adds	r4, r0, #3
 8006df8:	f024 0403 	bic.w	r4, r4, #3
 8006dfc:	42a0      	cmp	r0, r4
 8006dfe:	d0f8      	beq.n	8006df2 <sbrk_aligned+0x22>
 8006e00:	1a21      	subs	r1, r4, r0
 8006e02:	4628      	mov	r0, r5
 8006e04:	f000 fb92 	bl	800752c <_sbrk_r>
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d1f2      	bne.n	8006df2 <sbrk_aligned+0x22>
 8006e0c:	e7ef      	b.n	8006dee <sbrk_aligned+0x1e>
 8006e0e:	bf00      	nop
 8006e10:	2000042c 	.word	0x2000042c

08006e14 <_malloc_r>:
 8006e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e18:	1ccd      	adds	r5, r1, #3
 8006e1a:	f025 0503 	bic.w	r5, r5, #3
 8006e1e:	3508      	adds	r5, #8
 8006e20:	2d0c      	cmp	r5, #12
 8006e22:	bf38      	it	cc
 8006e24:	250c      	movcc	r5, #12
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	4606      	mov	r6, r0
 8006e2a:	db01      	blt.n	8006e30 <_malloc_r+0x1c>
 8006e2c:	42a9      	cmp	r1, r5
 8006e2e:	d904      	bls.n	8006e3a <_malloc_r+0x26>
 8006e30:	230c      	movs	r3, #12
 8006e32:	6033      	str	r3, [r6, #0]
 8006e34:	2000      	movs	r0, #0
 8006e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f10 <_malloc_r+0xfc>
 8006e3e:	f000 f869 	bl	8006f14 <__malloc_lock>
 8006e42:	f8d8 3000 	ldr.w	r3, [r8]
 8006e46:	461c      	mov	r4, r3
 8006e48:	bb44      	cbnz	r4, 8006e9c <_malloc_r+0x88>
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f7ff ffbf 	bl	8006dd0 <sbrk_aligned>
 8006e52:	1c43      	adds	r3, r0, #1
 8006e54:	4604      	mov	r4, r0
 8006e56:	d158      	bne.n	8006f0a <_malloc_r+0xf6>
 8006e58:	f8d8 4000 	ldr.w	r4, [r8]
 8006e5c:	4627      	mov	r7, r4
 8006e5e:	2f00      	cmp	r7, #0
 8006e60:	d143      	bne.n	8006eea <_malloc_r+0xd6>
 8006e62:	2c00      	cmp	r4, #0
 8006e64:	d04b      	beq.n	8006efe <_malloc_r+0xea>
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	4639      	mov	r1, r7
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	eb04 0903 	add.w	r9, r4, r3
 8006e70:	f000 fb5c 	bl	800752c <_sbrk_r>
 8006e74:	4581      	cmp	r9, r0
 8006e76:	d142      	bne.n	8006efe <_malloc_r+0xea>
 8006e78:	6821      	ldr	r1, [r4, #0]
 8006e7a:	1a6d      	subs	r5, r5, r1
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f7ff ffa6 	bl	8006dd0 <sbrk_aligned>
 8006e84:	3001      	adds	r0, #1
 8006e86:	d03a      	beq.n	8006efe <_malloc_r+0xea>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	442b      	add	r3, r5
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	bb62      	cbnz	r2, 8006ef0 <_malloc_r+0xdc>
 8006e96:	f8c8 7000 	str.w	r7, [r8]
 8006e9a:	e00f      	b.n	8006ebc <_malloc_r+0xa8>
 8006e9c:	6822      	ldr	r2, [r4, #0]
 8006e9e:	1b52      	subs	r2, r2, r5
 8006ea0:	d420      	bmi.n	8006ee4 <_malloc_r+0xd0>
 8006ea2:	2a0b      	cmp	r2, #11
 8006ea4:	d917      	bls.n	8006ed6 <_malloc_r+0xc2>
 8006ea6:	1961      	adds	r1, r4, r5
 8006ea8:	42a3      	cmp	r3, r4
 8006eaa:	6025      	str	r5, [r4, #0]
 8006eac:	bf18      	it	ne
 8006eae:	6059      	strne	r1, [r3, #4]
 8006eb0:	6863      	ldr	r3, [r4, #4]
 8006eb2:	bf08      	it	eq
 8006eb4:	f8c8 1000 	streq.w	r1, [r8]
 8006eb8:	5162      	str	r2, [r4, r5]
 8006eba:	604b      	str	r3, [r1, #4]
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	f000 f82f 	bl	8006f20 <__malloc_unlock>
 8006ec2:	f104 000b 	add.w	r0, r4, #11
 8006ec6:	1d23      	adds	r3, r4, #4
 8006ec8:	f020 0007 	bic.w	r0, r0, #7
 8006ecc:	1ac2      	subs	r2, r0, r3
 8006ece:	bf1c      	itt	ne
 8006ed0:	1a1b      	subne	r3, r3, r0
 8006ed2:	50a3      	strne	r3, [r4, r2]
 8006ed4:	e7af      	b.n	8006e36 <_malloc_r+0x22>
 8006ed6:	6862      	ldr	r2, [r4, #4]
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	bf0c      	ite	eq
 8006edc:	f8c8 2000 	streq.w	r2, [r8]
 8006ee0:	605a      	strne	r2, [r3, #4]
 8006ee2:	e7eb      	b.n	8006ebc <_malloc_r+0xa8>
 8006ee4:	4623      	mov	r3, r4
 8006ee6:	6864      	ldr	r4, [r4, #4]
 8006ee8:	e7ae      	b.n	8006e48 <_malloc_r+0x34>
 8006eea:	463c      	mov	r4, r7
 8006eec:	687f      	ldr	r7, [r7, #4]
 8006eee:	e7b6      	b.n	8006e5e <_malloc_r+0x4a>
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	42a3      	cmp	r3, r4
 8006ef6:	d1fb      	bne.n	8006ef0 <_malloc_r+0xdc>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	6053      	str	r3, [r2, #4]
 8006efc:	e7de      	b.n	8006ebc <_malloc_r+0xa8>
 8006efe:	230c      	movs	r3, #12
 8006f00:	6033      	str	r3, [r6, #0]
 8006f02:	4630      	mov	r0, r6
 8006f04:	f000 f80c 	bl	8006f20 <__malloc_unlock>
 8006f08:	e794      	b.n	8006e34 <_malloc_r+0x20>
 8006f0a:	6005      	str	r5, [r0, #0]
 8006f0c:	e7d6      	b.n	8006ebc <_malloc_r+0xa8>
 8006f0e:	bf00      	nop
 8006f10:	20000430 	.word	0x20000430

08006f14 <__malloc_lock>:
 8006f14:	4801      	ldr	r0, [pc, #4]	@ (8006f1c <__malloc_lock+0x8>)
 8006f16:	f7ff bf0f 	b.w	8006d38 <__retarget_lock_acquire_recursive>
 8006f1a:	bf00      	nop
 8006f1c:	20000428 	.word	0x20000428

08006f20 <__malloc_unlock>:
 8006f20:	4801      	ldr	r0, [pc, #4]	@ (8006f28 <__malloc_unlock+0x8>)
 8006f22:	f7ff bf0a 	b.w	8006d3a <__retarget_lock_release_recursive>
 8006f26:	bf00      	nop
 8006f28:	20000428 	.word	0x20000428

08006f2c <__ssputs_r>:
 8006f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f30:	688e      	ldr	r6, [r1, #8]
 8006f32:	461f      	mov	r7, r3
 8006f34:	42be      	cmp	r6, r7
 8006f36:	680b      	ldr	r3, [r1, #0]
 8006f38:	4682      	mov	sl, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	4690      	mov	r8, r2
 8006f3e:	d82d      	bhi.n	8006f9c <__ssputs_r+0x70>
 8006f40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f48:	d026      	beq.n	8006f98 <__ssputs_r+0x6c>
 8006f4a:	6965      	ldr	r5, [r4, #20]
 8006f4c:	6909      	ldr	r1, [r1, #16]
 8006f4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f52:	eba3 0901 	sub.w	r9, r3, r1
 8006f56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f5a:	1c7b      	adds	r3, r7, #1
 8006f5c:	444b      	add	r3, r9
 8006f5e:	106d      	asrs	r5, r5, #1
 8006f60:	429d      	cmp	r5, r3
 8006f62:	bf38      	it	cc
 8006f64:	461d      	movcc	r5, r3
 8006f66:	0553      	lsls	r3, r2, #21
 8006f68:	d527      	bpl.n	8006fba <__ssputs_r+0x8e>
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	f7ff ff52 	bl	8006e14 <_malloc_r>
 8006f70:	4606      	mov	r6, r0
 8006f72:	b360      	cbz	r0, 8006fce <__ssputs_r+0xa2>
 8006f74:	6921      	ldr	r1, [r4, #16]
 8006f76:	464a      	mov	r2, r9
 8006f78:	f000 fae8 	bl	800754c <memcpy>
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f86:	81a3      	strh	r3, [r4, #12]
 8006f88:	6126      	str	r6, [r4, #16]
 8006f8a:	6165      	str	r5, [r4, #20]
 8006f8c:	444e      	add	r6, r9
 8006f8e:	eba5 0509 	sub.w	r5, r5, r9
 8006f92:	6026      	str	r6, [r4, #0]
 8006f94:	60a5      	str	r5, [r4, #8]
 8006f96:	463e      	mov	r6, r7
 8006f98:	42be      	cmp	r6, r7
 8006f9a:	d900      	bls.n	8006f9e <__ssputs_r+0x72>
 8006f9c:	463e      	mov	r6, r7
 8006f9e:	6820      	ldr	r0, [r4, #0]
 8006fa0:	4632      	mov	r2, r6
 8006fa2:	4641      	mov	r1, r8
 8006fa4:	f000 faa8 	bl	80074f8 <memmove>
 8006fa8:	68a3      	ldr	r3, [r4, #8]
 8006faa:	1b9b      	subs	r3, r3, r6
 8006fac:	60a3      	str	r3, [r4, #8]
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	4433      	add	r3, r6
 8006fb2:	6023      	str	r3, [r4, #0]
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fba:	462a      	mov	r2, r5
 8006fbc:	f000 fad4 	bl	8007568 <_realloc_r>
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d1e0      	bne.n	8006f88 <__ssputs_r+0x5c>
 8006fc6:	6921      	ldr	r1, [r4, #16]
 8006fc8:	4650      	mov	r0, sl
 8006fca:	f7ff feb7 	bl	8006d3c <_free_r>
 8006fce:	230c      	movs	r3, #12
 8006fd0:	f8ca 3000 	str.w	r3, [sl]
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fda:	81a3      	strh	r3, [r4, #12]
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe0:	e7e9      	b.n	8006fb6 <__ssputs_r+0x8a>
	...

08006fe4 <_svfiprintf_r>:
 8006fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe8:	4698      	mov	r8, r3
 8006fea:	898b      	ldrh	r3, [r1, #12]
 8006fec:	061b      	lsls	r3, r3, #24
 8006fee:	b09d      	sub	sp, #116	@ 0x74
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	460d      	mov	r5, r1
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	d510      	bpl.n	800701a <_svfiprintf_r+0x36>
 8006ff8:	690b      	ldr	r3, [r1, #16]
 8006ffa:	b973      	cbnz	r3, 800701a <_svfiprintf_r+0x36>
 8006ffc:	2140      	movs	r1, #64	@ 0x40
 8006ffe:	f7ff ff09 	bl	8006e14 <_malloc_r>
 8007002:	6028      	str	r0, [r5, #0]
 8007004:	6128      	str	r0, [r5, #16]
 8007006:	b930      	cbnz	r0, 8007016 <_svfiprintf_r+0x32>
 8007008:	230c      	movs	r3, #12
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	f04f 30ff 	mov.w	r0, #4294967295
 8007010:	b01d      	add	sp, #116	@ 0x74
 8007012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007016:	2340      	movs	r3, #64	@ 0x40
 8007018:	616b      	str	r3, [r5, #20]
 800701a:	2300      	movs	r3, #0
 800701c:	9309      	str	r3, [sp, #36]	@ 0x24
 800701e:	2320      	movs	r3, #32
 8007020:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007024:	f8cd 800c 	str.w	r8, [sp, #12]
 8007028:	2330      	movs	r3, #48	@ 0x30
 800702a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80071c8 <_svfiprintf_r+0x1e4>
 800702e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007032:	f04f 0901 	mov.w	r9, #1
 8007036:	4623      	mov	r3, r4
 8007038:	469a      	mov	sl, r3
 800703a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800703e:	b10a      	cbz	r2, 8007044 <_svfiprintf_r+0x60>
 8007040:	2a25      	cmp	r2, #37	@ 0x25
 8007042:	d1f9      	bne.n	8007038 <_svfiprintf_r+0x54>
 8007044:	ebba 0b04 	subs.w	fp, sl, r4
 8007048:	d00b      	beq.n	8007062 <_svfiprintf_r+0x7e>
 800704a:	465b      	mov	r3, fp
 800704c:	4622      	mov	r2, r4
 800704e:	4629      	mov	r1, r5
 8007050:	4638      	mov	r0, r7
 8007052:	f7ff ff6b 	bl	8006f2c <__ssputs_r>
 8007056:	3001      	adds	r0, #1
 8007058:	f000 80a7 	beq.w	80071aa <_svfiprintf_r+0x1c6>
 800705c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800705e:	445a      	add	r2, fp
 8007060:	9209      	str	r2, [sp, #36]	@ 0x24
 8007062:	f89a 3000 	ldrb.w	r3, [sl]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 809f 	beq.w	80071aa <_svfiprintf_r+0x1c6>
 800706c:	2300      	movs	r3, #0
 800706e:	f04f 32ff 	mov.w	r2, #4294967295
 8007072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007076:	f10a 0a01 	add.w	sl, sl, #1
 800707a:	9304      	str	r3, [sp, #16]
 800707c:	9307      	str	r3, [sp, #28]
 800707e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007082:	931a      	str	r3, [sp, #104]	@ 0x68
 8007084:	4654      	mov	r4, sl
 8007086:	2205      	movs	r2, #5
 8007088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800708c:	484e      	ldr	r0, [pc, #312]	@ (80071c8 <_svfiprintf_r+0x1e4>)
 800708e:	f7f9 f8af 	bl	80001f0 <memchr>
 8007092:	9a04      	ldr	r2, [sp, #16]
 8007094:	b9d8      	cbnz	r0, 80070ce <_svfiprintf_r+0xea>
 8007096:	06d0      	lsls	r0, r2, #27
 8007098:	bf44      	itt	mi
 800709a:	2320      	movmi	r3, #32
 800709c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070a0:	0711      	lsls	r1, r2, #28
 80070a2:	bf44      	itt	mi
 80070a4:	232b      	movmi	r3, #43	@ 0x2b
 80070a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070aa:	f89a 3000 	ldrb.w	r3, [sl]
 80070ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80070b0:	d015      	beq.n	80070de <_svfiprintf_r+0xfa>
 80070b2:	9a07      	ldr	r2, [sp, #28]
 80070b4:	4654      	mov	r4, sl
 80070b6:	2000      	movs	r0, #0
 80070b8:	f04f 0c0a 	mov.w	ip, #10
 80070bc:	4621      	mov	r1, r4
 80070be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070c2:	3b30      	subs	r3, #48	@ 0x30
 80070c4:	2b09      	cmp	r3, #9
 80070c6:	d94b      	bls.n	8007160 <_svfiprintf_r+0x17c>
 80070c8:	b1b0      	cbz	r0, 80070f8 <_svfiprintf_r+0x114>
 80070ca:	9207      	str	r2, [sp, #28]
 80070cc:	e014      	b.n	80070f8 <_svfiprintf_r+0x114>
 80070ce:	eba0 0308 	sub.w	r3, r0, r8
 80070d2:	fa09 f303 	lsl.w	r3, r9, r3
 80070d6:	4313      	orrs	r3, r2
 80070d8:	9304      	str	r3, [sp, #16]
 80070da:	46a2      	mov	sl, r4
 80070dc:	e7d2      	b.n	8007084 <_svfiprintf_r+0xa0>
 80070de:	9b03      	ldr	r3, [sp, #12]
 80070e0:	1d19      	adds	r1, r3, #4
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	9103      	str	r1, [sp, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bfbb      	ittet	lt
 80070ea:	425b      	neglt	r3, r3
 80070ec:	f042 0202 	orrlt.w	r2, r2, #2
 80070f0:	9307      	strge	r3, [sp, #28]
 80070f2:	9307      	strlt	r3, [sp, #28]
 80070f4:	bfb8      	it	lt
 80070f6:	9204      	strlt	r2, [sp, #16]
 80070f8:	7823      	ldrb	r3, [r4, #0]
 80070fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80070fc:	d10a      	bne.n	8007114 <_svfiprintf_r+0x130>
 80070fe:	7863      	ldrb	r3, [r4, #1]
 8007100:	2b2a      	cmp	r3, #42	@ 0x2a
 8007102:	d132      	bne.n	800716a <_svfiprintf_r+0x186>
 8007104:	9b03      	ldr	r3, [sp, #12]
 8007106:	1d1a      	adds	r2, r3, #4
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	9203      	str	r2, [sp, #12]
 800710c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007110:	3402      	adds	r4, #2
 8007112:	9305      	str	r3, [sp, #20]
 8007114:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80071d8 <_svfiprintf_r+0x1f4>
 8007118:	7821      	ldrb	r1, [r4, #0]
 800711a:	2203      	movs	r2, #3
 800711c:	4650      	mov	r0, sl
 800711e:	f7f9 f867 	bl	80001f0 <memchr>
 8007122:	b138      	cbz	r0, 8007134 <_svfiprintf_r+0x150>
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	eba0 000a 	sub.w	r0, r0, sl
 800712a:	2240      	movs	r2, #64	@ 0x40
 800712c:	4082      	lsls	r2, r0
 800712e:	4313      	orrs	r3, r2
 8007130:	3401      	adds	r4, #1
 8007132:	9304      	str	r3, [sp, #16]
 8007134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007138:	4824      	ldr	r0, [pc, #144]	@ (80071cc <_svfiprintf_r+0x1e8>)
 800713a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800713e:	2206      	movs	r2, #6
 8007140:	f7f9 f856 	bl	80001f0 <memchr>
 8007144:	2800      	cmp	r0, #0
 8007146:	d036      	beq.n	80071b6 <_svfiprintf_r+0x1d2>
 8007148:	4b21      	ldr	r3, [pc, #132]	@ (80071d0 <_svfiprintf_r+0x1ec>)
 800714a:	bb1b      	cbnz	r3, 8007194 <_svfiprintf_r+0x1b0>
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	3307      	adds	r3, #7
 8007150:	f023 0307 	bic.w	r3, r3, #7
 8007154:	3308      	adds	r3, #8
 8007156:	9303      	str	r3, [sp, #12]
 8007158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800715a:	4433      	add	r3, r6
 800715c:	9309      	str	r3, [sp, #36]	@ 0x24
 800715e:	e76a      	b.n	8007036 <_svfiprintf_r+0x52>
 8007160:	fb0c 3202 	mla	r2, ip, r2, r3
 8007164:	460c      	mov	r4, r1
 8007166:	2001      	movs	r0, #1
 8007168:	e7a8      	b.n	80070bc <_svfiprintf_r+0xd8>
 800716a:	2300      	movs	r3, #0
 800716c:	3401      	adds	r4, #1
 800716e:	9305      	str	r3, [sp, #20]
 8007170:	4619      	mov	r1, r3
 8007172:	f04f 0c0a 	mov.w	ip, #10
 8007176:	4620      	mov	r0, r4
 8007178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800717c:	3a30      	subs	r2, #48	@ 0x30
 800717e:	2a09      	cmp	r2, #9
 8007180:	d903      	bls.n	800718a <_svfiprintf_r+0x1a6>
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0c6      	beq.n	8007114 <_svfiprintf_r+0x130>
 8007186:	9105      	str	r1, [sp, #20]
 8007188:	e7c4      	b.n	8007114 <_svfiprintf_r+0x130>
 800718a:	fb0c 2101 	mla	r1, ip, r1, r2
 800718e:	4604      	mov	r4, r0
 8007190:	2301      	movs	r3, #1
 8007192:	e7f0      	b.n	8007176 <_svfiprintf_r+0x192>
 8007194:	ab03      	add	r3, sp, #12
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	462a      	mov	r2, r5
 800719a:	4b0e      	ldr	r3, [pc, #56]	@ (80071d4 <_svfiprintf_r+0x1f0>)
 800719c:	a904      	add	r1, sp, #16
 800719e:	4638      	mov	r0, r7
 80071a0:	f3af 8000 	nop.w
 80071a4:	1c42      	adds	r2, r0, #1
 80071a6:	4606      	mov	r6, r0
 80071a8:	d1d6      	bne.n	8007158 <_svfiprintf_r+0x174>
 80071aa:	89ab      	ldrh	r3, [r5, #12]
 80071ac:	065b      	lsls	r3, r3, #25
 80071ae:	f53f af2d 	bmi.w	800700c <_svfiprintf_r+0x28>
 80071b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071b4:	e72c      	b.n	8007010 <_svfiprintf_r+0x2c>
 80071b6:	ab03      	add	r3, sp, #12
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	462a      	mov	r2, r5
 80071bc:	4b05      	ldr	r3, [pc, #20]	@ (80071d4 <_svfiprintf_r+0x1f0>)
 80071be:	a904      	add	r1, sp, #16
 80071c0:	4638      	mov	r0, r7
 80071c2:	f000 f879 	bl	80072b8 <_printf_i>
 80071c6:	e7ed      	b.n	80071a4 <_svfiprintf_r+0x1c0>
 80071c8:	08007a58 	.word	0x08007a58
 80071cc:	08007a62 	.word	0x08007a62
 80071d0:	00000000 	.word	0x00000000
 80071d4:	08006f2d 	.word	0x08006f2d
 80071d8:	08007a5e 	.word	0x08007a5e

080071dc <_printf_common>:
 80071dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e0:	4616      	mov	r6, r2
 80071e2:	4698      	mov	r8, r3
 80071e4:	688a      	ldr	r2, [r1, #8]
 80071e6:	690b      	ldr	r3, [r1, #16]
 80071e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071ec:	4293      	cmp	r3, r2
 80071ee:	bfb8      	it	lt
 80071f0:	4613      	movlt	r3, r2
 80071f2:	6033      	str	r3, [r6, #0]
 80071f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071f8:	4607      	mov	r7, r0
 80071fa:	460c      	mov	r4, r1
 80071fc:	b10a      	cbz	r2, 8007202 <_printf_common+0x26>
 80071fe:	3301      	adds	r3, #1
 8007200:	6033      	str	r3, [r6, #0]
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	0699      	lsls	r1, r3, #26
 8007206:	bf42      	ittt	mi
 8007208:	6833      	ldrmi	r3, [r6, #0]
 800720a:	3302      	addmi	r3, #2
 800720c:	6033      	strmi	r3, [r6, #0]
 800720e:	6825      	ldr	r5, [r4, #0]
 8007210:	f015 0506 	ands.w	r5, r5, #6
 8007214:	d106      	bne.n	8007224 <_printf_common+0x48>
 8007216:	f104 0a19 	add.w	sl, r4, #25
 800721a:	68e3      	ldr	r3, [r4, #12]
 800721c:	6832      	ldr	r2, [r6, #0]
 800721e:	1a9b      	subs	r3, r3, r2
 8007220:	42ab      	cmp	r3, r5
 8007222:	dc26      	bgt.n	8007272 <_printf_common+0x96>
 8007224:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007228:	6822      	ldr	r2, [r4, #0]
 800722a:	3b00      	subs	r3, #0
 800722c:	bf18      	it	ne
 800722e:	2301      	movne	r3, #1
 8007230:	0692      	lsls	r2, r2, #26
 8007232:	d42b      	bmi.n	800728c <_printf_common+0xb0>
 8007234:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007238:	4641      	mov	r1, r8
 800723a:	4638      	mov	r0, r7
 800723c:	47c8      	blx	r9
 800723e:	3001      	adds	r0, #1
 8007240:	d01e      	beq.n	8007280 <_printf_common+0xa4>
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	6922      	ldr	r2, [r4, #16]
 8007246:	f003 0306 	and.w	r3, r3, #6
 800724a:	2b04      	cmp	r3, #4
 800724c:	bf02      	ittt	eq
 800724e:	68e5      	ldreq	r5, [r4, #12]
 8007250:	6833      	ldreq	r3, [r6, #0]
 8007252:	1aed      	subeq	r5, r5, r3
 8007254:	68a3      	ldr	r3, [r4, #8]
 8007256:	bf0c      	ite	eq
 8007258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800725c:	2500      	movne	r5, #0
 800725e:	4293      	cmp	r3, r2
 8007260:	bfc4      	itt	gt
 8007262:	1a9b      	subgt	r3, r3, r2
 8007264:	18ed      	addgt	r5, r5, r3
 8007266:	2600      	movs	r6, #0
 8007268:	341a      	adds	r4, #26
 800726a:	42b5      	cmp	r5, r6
 800726c:	d11a      	bne.n	80072a4 <_printf_common+0xc8>
 800726e:	2000      	movs	r0, #0
 8007270:	e008      	b.n	8007284 <_printf_common+0xa8>
 8007272:	2301      	movs	r3, #1
 8007274:	4652      	mov	r2, sl
 8007276:	4641      	mov	r1, r8
 8007278:	4638      	mov	r0, r7
 800727a:	47c8      	blx	r9
 800727c:	3001      	adds	r0, #1
 800727e:	d103      	bne.n	8007288 <_printf_common+0xac>
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007288:	3501      	adds	r5, #1
 800728a:	e7c6      	b.n	800721a <_printf_common+0x3e>
 800728c:	18e1      	adds	r1, r4, r3
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	2030      	movs	r0, #48	@ 0x30
 8007292:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007296:	4422      	add	r2, r4
 8007298:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800729c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072a0:	3302      	adds	r3, #2
 80072a2:	e7c7      	b.n	8007234 <_printf_common+0x58>
 80072a4:	2301      	movs	r3, #1
 80072a6:	4622      	mov	r2, r4
 80072a8:	4641      	mov	r1, r8
 80072aa:	4638      	mov	r0, r7
 80072ac:	47c8      	blx	r9
 80072ae:	3001      	adds	r0, #1
 80072b0:	d0e6      	beq.n	8007280 <_printf_common+0xa4>
 80072b2:	3601      	adds	r6, #1
 80072b4:	e7d9      	b.n	800726a <_printf_common+0x8e>
	...

080072b8 <_printf_i>:
 80072b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072bc:	7e0f      	ldrb	r7, [r1, #24]
 80072be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072c0:	2f78      	cmp	r7, #120	@ 0x78
 80072c2:	4691      	mov	r9, r2
 80072c4:	4680      	mov	r8, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	469a      	mov	sl, r3
 80072ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072ce:	d807      	bhi.n	80072e0 <_printf_i+0x28>
 80072d0:	2f62      	cmp	r7, #98	@ 0x62
 80072d2:	d80a      	bhi.n	80072ea <_printf_i+0x32>
 80072d4:	2f00      	cmp	r7, #0
 80072d6:	f000 80d2 	beq.w	800747e <_printf_i+0x1c6>
 80072da:	2f58      	cmp	r7, #88	@ 0x58
 80072dc:	f000 80b9 	beq.w	8007452 <_printf_i+0x19a>
 80072e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072e8:	e03a      	b.n	8007360 <_printf_i+0xa8>
 80072ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072ee:	2b15      	cmp	r3, #21
 80072f0:	d8f6      	bhi.n	80072e0 <_printf_i+0x28>
 80072f2:	a101      	add	r1, pc, #4	@ (adr r1, 80072f8 <_printf_i+0x40>)
 80072f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072f8:	08007351 	.word	0x08007351
 80072fc:	08007365 	.word	0x08007365
 8007300:	080072e1 	.word	0x080072e1
 8007304:	080072e1 	.word	0x080072e1
 8007308:	080072e1 	.word	0x080072e1
 800730c:	080072e1 	.word	0x080072e1
 8007310:	08007365 	.word	0x08007365
 8007314:	080072e1 	.word	0x080072e1
 8007318:	080072e1 	.word	0x080072e1
 800731c:	080072e1 	.word	0x080072e1
 8007320:	080072e1 	.word	0x080072e1
 8007324:	08007465 	.word	0x08007465
 8007328:	0800738f 	.word	0x0800738f
 800732c:	0800741f 	.word	0x0800741f
 8007330:	080072e1 	.word	0x080072e1
 8007334:	080072e1 	.word	0x080072e1
 8007338:	08007487 	.word	0x08007487
 800733c:	080072e1 	.word	0x080072e1
 8007340:	0800738f 	.word	0x0800738f
 8007344:	080072e1 	.word	0x080072e1
 8007348:	080072e1 	.word	0x080072e1
 800734c:	08007427 	.word	0x08007427
 8007350:	6833      	ldr	r3, [r6, #0]
 8007352:	1d1a      	adds	r2, r3, #4
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6032      	str	r2, [r6, #0]
 8007358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800735c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007360:	2301      	movs	r3, #1
 8007362:	e09d      	b.n	80074a0 <_printf_i+0x1e8>
 8007364:	6833      	ldr	r3, [r6, #0]
 8007366:	6820      	ldr	r0, [r4, #0]
 8007368:	1d19      	adds	r1, r3, #4
 800736a:	6031      	str	r1, [r6, #0]
 800736c:	0606      	lsls	r6, r0, #24
 800736e:	d501      	bpl.n	8007374 <_printf_i+0xbc>
 8007370:	681d      	ldr	r5, [r3, #0]
 8007372:	e003      	b.n	800737c <_printf_i+0xc4>
 8007374:	0645      	lsls	r5, r0, #25
 8007376:	d5fb      	bpl.n	8007370 <_printf_i+0xb8>
 8007378:	f9b3 5000 	ldrsh.w	r5, [r3]
 800737c:	2d00      	cmp	r5, #0
 800737e:	da03      	bge.n	8007388 <_printf_i+0xd0>
 8007380:	232d      	movs	r3, #45	@ 0x2d
 8007382:	426d      	negs	r5, r5
 8007384:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007388:	4859      	ldr	r0, [pc, #356]	@ (80074f0 <_printf_i+0x238>)
 800738a:	230a      	movs	r3, #10
 800738c:	e011      	b.n	80073b2 <_printf_i+0xfa>
 800738e:	6821      	ldr	r1, [r4, #0]
 8007390:	6833      	ldr	r3, [r6, #0]
 8007392:	0608      	lsls	r0, r1, #24
 8007394:	f853 5b04 	ldr.w	r5, [r3], #4
 8007398:	d402      	bmi.n	80073a0 <_printf_i+0xe8>
 800739a:	0649      	lsls	r1, r1, #25
 800739c:	bf48      	it	mi
 800739e:	b2ad      	uxthmi	r5, r5
 80073a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80073a2:	4853      	ldr	r0, [pc, #332]	@ (80074f0 <_printf_i+0x238>)
 80073a4:	6033      	str	r3, [r6, #0]
 80073a6:	bf14      	ite	ne
 80073a8:	230a      	movne	r3, #10
 80073aa:	2308      	moveq	r3, #8
 80073ac:	2100      	movs	r1, #0
 80073ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073b2:	6866      	ldr	r6, [r4, #4]
 80073b4:	60a6      	str	r6, [r4, #8]
 80073b6:	2e00      	cmp	r6, #0
 80073b8:	bfa2      	ittt	ge
 80073ba:	6821      	ldrge	r1, [r4, #0]
 80073bc:	f021 0104 	bicge.w	r1, r1, #4
 80073c0:	6021      	strge	r1, [r4, #0]
 80073c2:	b90d      	cbnz	r5, 80073c8 <_printf_i+0x110>
 80073c4:	2e00      	cmp	r6, #0
 80073c6:	d04b      	beq.n	8007460 <_printf_i+0x1a8>
 80073c8:	4616      	mov	r6, r2
 80073ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80073ce:	fb03 5711 	mls	r7, r3, r1, r5
 80073d2:	5dc7      	ldrb	r7, [r0, r7]
 80073d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073d8:	462f      	mov	r7, r5
 80073da:	42bb      	cmp	r3, r7
 80073dc:	460d      	mov	r5, r1
 80073de:	d9f4      	bls.n	80073ca <_printf_i+0x112>
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d10b      	bne.n	80073fc <_printf_i+0x144>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	07df      	lsls	r7, r3, #31
 80073e8:	d508      	bpl.n	80073fc <_printf_i+0x144>
 80073ea:	6923      	ldr	r3, [r4, #16]
 80073ec:	6861      	ldr	r1, [r4, #4]
 80073ee:	4299      	cmp	r1, r3
 80073f0:	bfde      	ittt	le
 80073f2:	2330      	movle	r3, #48	@ 0x30
 80073f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073fc:	1b92      	subs	r2, r2, r6
 80073fe:	6122      	str	r2, [r4, #16]
 8007400:	f8cd a000 	str.w	sl, [sp]
 8007404:	464b      	mov	r3, r9
 8007406:	aa03      	add	r2, sp, #12
 8007408:	4621      	mov	r1, r4
 800740a:	4640      	mov	r0, r8
 800740c:	f7ff fee6 	bl	80071dc <_printf_common>
 8007410:	3001      	adds	r0, #1
 8007412:	d14a      	bne.n	80074aa <_printf_i+0x1f2>
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	b004      	add	sp, #16
 800741a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	f043 0320 	orr.w	r3, r3, #32
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	4833      	ldr	r0, [pc, #204]	@ (80074f4 <_printf_i+0x23c>)
 8007428:	2778      	movs	r7, #120	@ 0x78
 800742a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	6831      	ldr	r1, [r6, #0]
 8007432:	061f      	lsls	r7, r3, #24
 8007434:	f851 5b04 	ldr.w	r5, [r1], #4
 8007438:	d402      	bmi.n	8007440 <_printf_i+0x188>
 800743a:	065f      	lsls	r7, r3, #25
 800743c:	bf48      	it	mi
 800743e:	b2ad      	uxthmi	r5, r5
 8007440:	6031      	str	r1, [r6, #0]
 8007442:	07d9      	lsls	r1, r3, #31
 8007444:	bf44      	itt	mi
 8007446:	f043 0320 	orrmi.w	r3, r3, #32
 800744a:	6023      	strmi	r3, [r4, #0]
 800744c:	b11d      	cbz	r5, 8007456 <_printf_i+0x19e>
 800744e:	2310      	movs	r3, #16
 8007450:	e7ac      	b.n	80073ac <_printf_i+0xf4>
 8007452:	4827      	ldr	r0, [pc, #156]	@ (80074f0 <_printf_i+0x238>)
 8007454:	e7e9      	b.n	800742a <_printf_i+0x172>
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	f023 0320 	bic.w	r3, r3, #32
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	e7f6      	b.n	800744e <_printf_i+0x196>
 8007460:	4616      	mov	r6, r2
 8007462:	e7bd      	b.n	80073e0 <_printf_i+0x128>
 8007464:	6833      	ldr	r3, [r6, #0]
 8007466:	6825      	ldr	r5, [r4, #0]
 8007468:	6961      	ldr	r1, [r4, #20]
 800746a:	1d18      	adds	r0, r3, #4
 800746c:	6030      	str	r0, [r6, #0]
 800746e:	062e      	lsls	r6, r5, #24
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	d501      	bpl.n	8007478 <_printf_i+0x1c0>
 8007474:	6019      	str	r1, [r3, #0]
 8007476:	e002      	b.n	800747e <_printf_i+0x1c6>
 8007478:	0668      	lsls	r0, r5, #25
 800747a:	d5fb      	bpl.n	8007474 <_printf_i+0x1bc>
 800747c:	8019      	strh	r1, [r3, #0]
 800747e:	2300      	movs	r3, #0
 8007480:	6123      	str	r3, [r4, #16]
 8007482:	4616      	mov	r6, r2
 8007484:	e7bc      	b.n	8007400 <_printf_i+0x148>
 8007486:	6833      	ldr	r3, [r6, #0]
 8007488:	1d1a      	adds	r2, r3, #4
 800748a:	6032      	str	r2, [r6, #0]
 800748c:	681e      	ldr	r6, [r3, #0]
 800748e:	6862      	ldr	r2, [r4, #4]
 8007490:	2100      	movs	r1, #0
 8007492:	4630      	mov	r0, r6
 8007494:	f7f8 feac 	bl	80001f0 <memchr>
 8007498:	b108      	cbz	r0, 800749e <_printf_i+0x1e6>
 800749a:	1b80      	subs	r0, r0, r6
 800749c:	6060      	str	r0, [r4, #4]
 800749e:	6863      	ldr	r3, [r4, #4]
 80074a0:	6123      	str	r3, [r4, #16]
 80074a2:	2300      	movs	r3, #0
 80074a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074a8:	e7aa      	b.n	8007400 <_printf_i+0x148>
 80074aa:	6923      	ldr	r3, [r4, #16]
 80074ac:	4632      	mov	r2, r6
 80074ae:	4649      	mov	r1, r9
 80074b0:	4640      	mov	r0, r8
 80074b2:	47d0      	blx	sl
 80074b4:	3001      	adds	r0, #1
 80074b6:	d0ad      	beq.n	8007414 <_printf_i+0x15c>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	079b      	lsls	r3, r3, #30
 80074bc:	d413      	bmi.n	80074e6 <_printf_i+0x22e>
 80074be:	68e0      	ldr	r0, [r4, #12]
 80074c0:	9b03      	ldr	r3, [sp, #12]
 80074c2:	4298      	cmp	r0, r3
 80074c4:	bfb8      	it	lt
 80074c6:	4618      	movlt	r0, r3
 80074c8:	e7a6      	b.n	8007418 <_printf_i+0x160>
 80074ca:	2301      	movs	r3, #1
 80074cc:	4632      	mov	r2, r6
 80074ce:	4649      	mov	r1, r9
 80074d0:	4640      	mov	r0, r8
 80074d2:	47d0      	blx	sl
 80074d4:	3001      	adds	r0, #1
 80074d6:	d09d      	beq.n	8007414 <_printf_i+0x15c>
 80074d8:	3501      	adds	r5, #1
 80074da:	68e3      	ldr	r3, [r4, #12]
 80074dc:	9903      	ldr	r1, [sp, #12]
 80074de:	1a5b      	subs	r3, r3, r1
 80074e0:	42ab      	cmp	r3, r5
 80074e2:	dcf2      	bgt.n	80074ca <_printf_i+0x212>
 80074e4:	e7eb      	b.n	80074be <_printf_i+0x206>
 80074e6:	2500      	movs	r5, #0
 80074e8:	f104 0619 	add.w	r6, r4, #25
 80074ec:	e7f5      	b.n	80074da <_printf_i+0x222>
 80074ee:	bf00      	nop
 80074f0:	08007a69 	.word	0x08007a69
 80074f4:	08007a7a 	.word	0x08007a7a

080074f8 <memmove>:
 80074f8:	4288      	cmp	r0, r1
 80074fa:	b510      	push	{r4, lr}
 80074fc:	eb01 0402 	add.w	r4, r1, r2
 8007500:	d902      	bls.n	8007508 <memmove+0x10>
 8007502:	4284      	cmp	r4, r0
 8007504:	4623      	mov	r3, r4
 8007506:	d807      	bhi.n	8007518 <memmove+0x20>
 8007508:	1e43      	subs	r3, r0, #1
 800750a:	42a1      	cmp	r1, r4
 800750c:	d008      	beq.n	8007520 <memmove+0x28>
 800750e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007512:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007516:	e7f8      	b.n	800750a <memmove+0x12>
 8007518:	4402      	add	r2, r0
 800751a:	4601      	mov	r1, r0
 800751c:	428a      	cmp	r2, r1
 800751e:	d100      	bne.n	8007522 <memmove+0x2a>
 8007520:	bd10      	pop	{r4, pc}
 8007522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800752a:	e7f7      	b.n	800751c <memmove+0x24>

0800752c <_sbrk_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	4d06      	ldr	r5, [pc, #24]	@ (8007548 <_sbrk_r+0x1c>)
 8007530:	2300      	movs	r3, #0
 8007532:	4604      	mov	r4, r0
 8007534:	4608      	mov	r0, r1
 8007536:	602b      	str	r3, [r5, #0]
 8007538:	f7fb fa54 	bl	80029e4 <_sbrk>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d102      	bne.n	8007546 <_sbrk_r+0x1a>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	b103      	cbz	r3, 8007546 <_sbrk_r+0x1a>
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	20000424 	.word	0x20000424

0800754c <memcpy>:
 800754c:	440a      	add	r2, r1
 800754e:	4291      	cmp	r1, r2
 8007550:	f100 33ff 	add.w	r3, r0, #4294967295
 8007554:	d100      	bne.n	8007558 <memcpy+0xc>
 8007556:	4770      	bx	lr
 8007558:	b510      	push	{r4, lr}
 800755a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800755e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007562:	4291      	cmp	r1, r2
 8007564:	d1f9      	bne.n	800755a <memcpy+0xe>
 8007566:	bd10      	pop	{r4, pc}

08007568 <_realloc_r>:
 8007568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800756c:	4680      	mov	r8, r0
 800756e:	4615      	mov	r5, r2
 8007570:	460c      	mov	r4, r1
 8007572:	b921      	cbnz	r1, 800757e <_realloc_r+0x16>
 8007574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007578:	4611      	mov	r1, r2
 800757a:	f7ff bc4b 	b.w	8006e14 <_malloc_r>
 800757e:	b92a      	cbnz	r2, 800758c <_realloc_r+0x24>
 8007580:	f7ff fbdc 	bl	8006d3c <_free_r>
 8007584:	2400      	movs	r4, #0
 8007586:	4620      	mov	r0, r4
 8007588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800758c:	f000 f81a 	bl	80075c4 <_malloc_usable_size_r>
 8007590:	4285      	cmp	r5, r0
 8007592:	4606      	mov	r6, r0
 8007594:	d802      	bhi.n	800759c <_realloc_r+0x34>
 8007596:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800759a:	d8f4      	bhi.n	8007586 <_realloc_r+0x1e>
 800759c:	4629      	mov	r1, r5
 800759e:	4640      	mov	r0, r8
 80075a0:	f7ff fc38 	bl	8006e14 <_malloc_r>
 80075a4:	4607      	mov	r7, r0
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d0ec      	beq.n	8007584 <_realloc_r+0x1c>
 80075aa:	42b5      	cmp	r5, r6
 80075ac:	462a      	mov	r2, r5
 80075ae:	4621      	mov	r1, r4
 80075b0:	bf28      	it	cs
 80075b2:	4632      	movcs	r2, r6
 80075b4:	f7ff ffca 	bl	800754c <memcpy>
 80075b8:	4621      	mov	r1, r4
 80075ba:	4640      	mov	r0, r8
 80075bc:	f7ff fbbe 	bl	8006d3c <_free_r>
 80075c0:	463c      	mov	r4, r7
 80075c2:	e7e0      	b.n	8007586 <_realloc_r+0x1e>

080075c4 <_malloc_usable_size_r>:
 80075c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075c8:	1f18      	subs	r0, r3, #4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	bfbc      	itt	lt
 80075ce:	580b      	ldrlt	r3, [r1, r0]
 80075d0:	18c0      	addlt	r0, r0, r3
 80075d2:	4770      	bx	lr

080075d4 <_init>:
 80075d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d6:	bf00      	nop
 80075d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075da:	bc08      	pop	{r3}
 80075dc:	469e      	mov	lr, r3
 80075de:	4770      	bx	lr

080075e0 <_fini>:
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e2:	bf00      	nop
 80075e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075e6:	bc08      	pop	{r3}
 80075e8:	469e      	mov	lr, r3
 80075ea:	4770      	bx	lr
